! ==============================================================================
! messy_mecca_tag_IC
! generated: 4-3-09 11:50:40
!
! this module is generated by imtag utility
!
! C isotopes tagging configuration: kinetics
! level: smcl
!
! source mech. equations: mecca.spc (253 reactions)
!    tagged species list: mecca.eqn (60 of 71 given species are tagged)
!
! [Gromov, MPIC, 2007-2008]
! ==============================================================================

! - general tagging parameters (as conditional defines) ------------------------

#include "messy_mecca_tag_parameters.inc"

! - configuration parameters ---------------------------------------------------

! configuration parameters

#define TAG
#define tag_IC

#define ABBR_I
#define ATOM_C
#define CLASSES_2
#define CLASS_12
#define CLASS_13

#define KIE
#define SRC
#define NO_IEX

#define USE_PT

! user configuration parameters

#define ISO
#define INIUNIT_DELTAPM
#define INT_SIMEULER
#define xINT_CG1
#define xINT_LINMAX
#define xINT_USEJAC
#define xINT_RADER
#define OPT_LOW_FILTER
#define xOPT_C2R_FILTER
#define xOPT_USE_KRSIND

! replacements:
!
! {%TIMEDATE} is 4-3-09 11:50:40
! {%CASE} is tag
! {%CMODEL} is messy_mecca
! {%ABBR} is I
! {%ATOM} is C
! {%A} is C
! {%CONF} is IC
! {%C} is IC
! {%QSPEC} is 60
! {%NSPEC} is NTCSPEC
! {%QCLASS} is 2
! {%NCLASS} is NTCCLASS
! {%QISO} is 2
! {%NISO} is NTCISO
! {%NQATOM} is QTCATOM
! {%PT} is PT#
! {%TAG} is tag_IC
! {%NTSPEC} is NTCSPEC
! {%RTIND} is RTCIND
! {%QCFLDIR} is 226
! {%QIFLDIR} is -1
! {%DBL} is tag_IC
! {%NDSPEC} is NDCSPEC
! {%RDIND} is RDCIND
! \t is 	
! \n is 


! - integration scheme ---------------------------------------------------------

! define in cfg with INT_LINMAX, INT_SIMEULER, INT_CASHKARP params

! -----------------------------------------------------------------------------

MODULE messy_mecca_tag_IC

  USE messy_mecca_kpp ! dp, nreact, nspec, ind_*, ...

#ifdef INTERFLOW
! in case of inter-configuration molecules flow calculation (default) 
! using flow and its direction variables from messy_mecca_tag

  USE messy_mecca_tag_common
#endif


  IMPLICIT NONE

! here constants and tracers are to be defined
! data declaration

! number of tagged species, number of classes (isotopologues)
  INTEGER, PARAMETER :: NTCSPEC = 60, NTCCLASS = 2, NTCISO = 2

! isotopologues tracers indices
  INTEGER, PARAMETER :: tag_IC_CH4 = 1          ! indicated as fixed
  INTEGER, PARAMETER :: tag_IC_CH3OH = 2
  INTEGER, PARAMETER :: tag_IC_CH3O2 = 3
  INTEGER, PARAMETER :: tag_IC_CH3OOH = 4
  INTEGER, PARAMETER :: tag_IC_HCHO = 5
  INTEGER, PARAMETER :: tag_IC_CO = 6
  INTEGER, PARAMETER :: tag_IC_HCOOH = 7
  INTEGER, PARAMETER :: tag_IC_CO2 = 8
  INTEGER, PARAMETER :: tag_IC_C2H6 = 9
  INTEGER, PARAMETER :: tag_IC_C2H4 = 10
  INTEGER, PARAMETER :: tag_IC_C2H2 = 11
  INTEGER, PARAMETER :: tag_IC_C2H5O2 = 12
  INTEGER, PARAMETER :: tag_IC_C2H5OOH = 13
  INTEGER, PARAMETER :: tag_IC_CH3CHO = 14
  INTEGER, PARAMETER :: tag_IC_CH3CO2H = 15
  INTEGER, PARAMETER :: tag_IC_CH3CO3 = 16
  INTEGER, PARAMETER :: tag_IC_CH3CO3H = 17
  INTEGER, PARAMETER :: tag_IC_NACA = 18
  INTEGER, PARAMETER :: tag_IC_PAN = 19
  INTEGER, PARAMETER :: tag_IC_C3H8 = 20
  INTEGER, PARAMETER :: tag_IC_C3H6 = 21
  INTEGER, PARAMETER :: tag_IC_IC3H7O2 = 22
  INTEGER, PARAMETER :: tag_IC_IC3H7OOH = 23
  INTEGER, PARAMETER :: tag_IC_LHOC3H6O2 = 24
  INTEGER, PARAMETER :: tag_IC_LHOC3H6OOH = 25
  INTEGER, PARAMETER :: tag_IC_CH3COCH3 = 26
  INTEGER, PARAMETER :: tag_IC_CH3COCH2O2 = 27
  INTEGER, PARAMETER :: tag_IC_HYPERACET = 28
  INTEGER, PARAMETER :: tag_IC_ACETOL = 29
  INTEGER, PARAMETER :: tag_IC_MGLYOX = 30
  INTEGER, PARAMETER :: tag_IC_MPAN = 31
  INTEGER, PARAMETER :: tag_IC_IC3H7NO3 = 32
  INTEGER, PARAMETER :: tag_IC_NC4H10 = 33
  INTEGER, PARAMETER :: tag_IC_LC4H9O2 = 34
  INTEGER, PARAMETER :: tag_IC_LC4H9OOH = 35
  INTEGER, PARAMETER :: tag_IC_MVK = 36
  INTEGER, PARAMETER :: tag_IC_MVKO2 = 37
  INTEGER, PARAMETER :: tag_IC_MVKOOH = 38
  INTEGER, PARAMETER :: tag_IC_MEK = 39
  INTEGER, PARAMETER :: tag_IC_LMEKO2 = 40
  INTEGER, PARAMETER :: tag_IC_LMEKOOH = 41
  INTEGER, PARAMETER :: tag_IC_BIACET = 42
  INTEGER, PARAMETER :: tag_IC_LC4H9NO3 = 43
  INTEGER, PARAMETER :: tag_IC_C5H8 = 44
  INTEGER, PARAMETER :: tag_IC_ISO2 = 45
  INTEGER, PARAMETER :: tag_IC_ISOOH = 46
  INTEGER, PARAMETER :: tag_IC_ISON = 47
  INTEGER, PARAMETER :: tag_IC_CCl4 = 48
  INTEGER, PARAMETER :: tag_IC_CH3Cl = 49
  INTEGER, PARAMETER :: tag_IC_CH3CCl3 = 50
  INTEGER, PARAMETER :: tag_IC_CF2Cl2 = 51
  INTEGER, PARAMETER :: tag_IC_CFCl3 = 52
  INTEGER, PARAMETER :: tag_IC_CH3Br = 53
  INTEGER, PARAMETER :: tag_IC_CF3Br = 54
  INTEGER, PARAMETER :: tag_IC_CF2ClBr = 55
  INTEGER, PARAMETER :: tag_IC_CH3SO3H = 56
  INTEGER, PARAMETER :: tag_IC_DMS = 57
  INTEGER, PARAMETER :: tag_IC_DMSO = 58
  INTEGER, PARAMETER :: tag_IC_CH3SO2 = 59
  INTEGER, PARAMETER :: tag_IC_CH3SO3 = 60

! dummy indices of species present TSL but not in the mechanism (resolves dependency problems)
  INTEGER, PARAMETER :: tag_IC_CHCl2Br = 0
  INTEGER, PARAMETER :: tag_IC_CHClBr2 = 0
  INTEGER, PARAMETER :: tag_IC_CH2ClBr = 0
  INTEGER, PARAMETER :: tag_IC_CH2Br2 = 0
  INTEGER, PARAMETER :: tag_IC_CHBr3 = 0
  INTEGER, PARAMETER :: tag_IC_CH3I = 0
  INTEGER, PARAMETER :: tag_IC_CH2I2 = 0
  INTEGER, PARAMETER :: tag_IC_C3H7I = 0
  INTEGER, PARAMETER :: tag_IC_CH2ClI = 0
  INTEGER, PARAMETER :: tag_IC_CX = 0
  INTEGER, PARAMETER :: tag_IC_CY = 0

! corresponding regular <-> tagged species indices 
  INTEGER, PARAMETER :: RTCIND(NTCSPEC) = &
    (/ ind_CH4, ind_CH3OH, ind_CH3O2, ind_CH3OOH, ind_HCHO, ind_CO, ind_HCOOH, ind_CO2, &
       ind_C2H6, ind_C2H4, ind_C2H2, ind_C2H5O2, ind_C2H5OOH, ind_CH3CHO, &
       ind_CH3CO2H, ind_CH3CO3, ind_CH3CO3H, ind_NACA, ind_PAN, ind_C3H8, ind_C3H6, &
       ind_IC3H7O2, ind_IC3H7OOH, ind_LHOC3H6O2, ind_LHOC3H6OOH, ind_CH3COCH3, ind_CH3COCH2O2, &
       ind_HYPERACET, ind_ACETOL, ind_MGLYOX, ind_MPAN, ind_IC3H7NO3, ind_NC4H10, &
       ind_LC4H9O2, ind_LC4H9OOH, ind_MVK, ind_MVKO2, ind_MVKOOH, ind_MEK, &
       ind_LMEKO2, ind_LMEKOOH, ind_BIACET, ind_LC4H9NO3, ind_C5H8, ind_ISO2, &
       ind_ISOOH, ind_ISON, ind_CCl4, ind_CH3Cl, ind_CH3CCl3, ind_CF2Cl2, &
       ind_CFCl3, ind_CH3Br, ind_CF3Br, ind_CF2ClBr, ind_CH3SO3H, ind_DMS, &
       ind_DMSO, ind_CH3SO2, ind_CH3SO3 /)

! quantity of C atoms in corresponding taggedspecies
  INTEGER, PARAMETER :: QTCATOM(NTCSPEC) = &
    (/ 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, &
    3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 1, 1, &
    2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1 /)

! number of tagged reactions
  INTEGER, PARAMETER :: NTCREAC = 140
! added passive tracers indices
  INTEGER, PARAMETER :: TRPTCIND(NTCREAC) = &
    (/ ind_PTG4100, ind_PTG4101, ind_PTG4102, ind_PTG4103, ind_PTG4104, ind_PTG4105, &
       ind_PTG4106a, ind_PTG4106b, ind_PTG4107, ind_PTG4108, ind_PTG4109, &
       ind_PTG4110, ind_PTG4111, ind_PTG4200, ind_PTG4201, ind_PTG4202, &
       ind_PTG4203, ind_PTG4204, ind_PTG4205, ind_PTG4206, ind_PTG4207, &
       ind_PTG4208, ind_PTG4209, ind_PTG4210, ind_PTG4211a, ind_PTG4211b, &
       ind_PTG4212, ind_PTG4213, ind_PTG4214, ind_PTG4215a, ind_PTG4215b, &
       ind_PTG4216, ind_PTG4217, ind_PTG4218, ind_PTG4219, ind_PTG4220, &
       ind_PTG4221, ind_PTG4222, ind_PTG4300, ind_PTG4301, ind_PTG4302, &
       ind_PTG4303, ind_PTG4304, ind_PTG4305, ind_PTG4306, ind_PTG4307, &
       ind_PTG4308, ind_PTG4309, ind_PTG4310, ind_PTG4311, ind_PTG4312, &
       ind_PTG4313, ind_PTG4314, ind_PTG4315, ind_PTG4316, ind_PTG4317, &
       ind_PTG4318, ind_PTG4319, ind_PTG4320, ind_PTG4400, ind_PTG4401, &
       ind_PTG4402, ind_PTG4403, ind_PTG4404, ind_PTG4405, ind_PTG4406, &
       ind_PTG4407, ind_PTG4408, ind_PTG4409, ind_PTG4410, ind_PTG4411, &
       ind_PTG4412, ind_PTG4413, ind_PTG4414, ind_PTG4415, ind_PTG4416, &
       ind_PTG4417, ind_PTG4500, ind_PTG4501, ind_PTG4502, ind_PTG4503, &
       ind_PTG4504, ind_PTG4505, ind_PTG4506, ind_PTG4507, ind_PTG4508, &
       ind_PTG6400, ind_PTG6401, ind_PTG6402, ind_PTG6403, ind_PTG6404, &
       ind_PTG6405, ind_PTG6406, ind_PTG6407, ind_PTG6408, ind_PTG6500, &
       ind_PTG6501, ind_PTG7400, ind_PTG7403, ind_PTG9400a, ind_PTG9400b, &
       ind_PTG9401, ind_PTG9402, ind_PTG9403, ind_PTG9404, ind_PTG9405, &
       ind_PTJ4100, ind_PTJ4101a, ind_PTJ4101b, ind_PTJ4102, ind_PTJ4103, &
       ind_PTJ4200, ind_PTJ4201, ind_PTJ4202, ind_PTJ4203, ind_PTJ4204, &
       ind_PTJ4300, ind_PTJ4301, ind_PTJ4302, ind_PTJ4303, ind_PTJ4304, &
       ind_PTJ4305, ind_PTJ4306, ind_PTJ4400, ind_PTJ4401, ind_PTJ4402, &
       ind_PTJ4403, ind_PTJ4404, ind_PTJ4405, ind_PTJ4406, ind_PTJ4500, &
       ind_PTJ4501, ind_PTJ6400, ind_PTJ6401, ind_PTJ6402, ind_PTJ6500, &
       ind_PTJ6501, ind_PTJ7400, ind_PTJ7500, ind_PTJ7601 /)

! number of KIE-escorted reactions
  INTEGER, PARAMETER :: NKRREAC = 3
  INTEGER, PARAMETER :: KRREAC(NKRREAC) = &
    (/ ind_PTG4100, ind_PTG4101, ind_PTG4110 /)
! indices of KIE-related species
  INTEGER, PARAMETER :: NKRSPEC = 5
  INTEGER, PARAMETER :: KRSIND(NKRSPEC) = &
    (/ tag_IC_CH4, tag_IC_CH3O2, tag_IC_HCHO, tag_IC_CO, tag_IC_CO2 /)

! there is no isotope exchange in selected mechanism, empty arrays are for the compatibility
! number of isotope exchange reactions
  INTEGER, PARAMETER :: NIXREAC = 0
  INTEGER, PARAMETER :: IXREAC(NIXREAC+1) = (/ NIXREAC /)
! indices of IEX-related species
  INTEGER, PARAMETER :: NIXSPEC = 0
  INTEGER, PARAMETER :: IXSIND(NIXSPEC+1) = (/ NIXSPEC /)



! index used for substitution of isotopic fraction of total C
  INTEGER, PARAMETER :: ind_tTC = NTCSPEC+1

! -----------------------------------------------------------------------------

#ifndef INTERFLOW
! C atoms flow control and directions indices
  INTEGER, PARAMETER :: NFLCDIR = 226
  REAL(dp)           :: flow(NFLCDIR)
  INTEGER, PARAMETER, PRIVATE :: &
    CH4_sink = 1, C3H6_CH4 = 2, CH3OH_sink = 3, CH3O2_CH3OH = 4, C3H6_CH3OH = 5, &
    ISO2_CH3OH = 6, CH3O2_sink = 7, CH4_CH3O2 = 8, CH3OOH_CH3O2 = 9, &
    CH3CO2H_CH3O2 = 10, CH3CO3_CH3O2 = 11, C2H2_CH3O2 = 12, C3H6_CH3O2 = 13, &
    C5H8_CH3O2 = 14, DMSO_CH3O2 = 15, CH3SO2_CH3O2 = 16, CH3CHO_CH3O2 = 17, &
    CH3CO3H_CH3O2 = 18, PAN_CH3O2 = 19, CH3COCH3_CH3O2 = 20, CH3Cl_CH3O2 = 21, &
    CH3Br_CH3O2 = 22, CH3OOH_sink = 23, CH3O2_CH3OOH = 24, HCHO_sink = 25, &
    CH4_HCHO = 26, CH3OH_HCHO = 27, CH3O2_HCHO = 28, CH3OOH_HCHO = 29, &
    C2H4_HCHO = 30, NACA_HCHO = 31, PAN_HCHO = 32, C3H6_HCHO = 33, &
    LHOC3H6O2_HCHO = 34, CH3COCH2O2_HCHO = 35, MVKO2_HCHO = 36, C5H8_HCHO = 37, &
    ISO2_HCHO = 38, DMS_HCHO = 39, DMSO_HCHO = 40, ACETOL_HCHO = 41, &
    MVK_HCHO = 42, MVKOOH_HCHO = 43, ISOOH_HCHO = 44, ISON_HCHO = 45, &
    CO_sink = 46, HCHO_CO = 47, C2H4_CO = 48, NACA_CO = 49, C3H6_CO = 50, &
    MGLYOX_CO = 51, MVK_CO = 52, MVKO2_CO = 53, C5H8_CO = 54, CO2_CO = 55, &
    CH4_CO = 56, CH3CHO_CO = 57, MVKOOH_CO = 58, HCOOH_sink = 59, &
    C2H4_HCOOH = 60, C3H6_HCOOH = 61, MVK_HCOOH = 62, C5H8_HCOOH = 63, &
    CO2_sink = 64, CO_CO2 = 65, CH3CO2H_CO2 = 66, CH3CO3_CO2 = 67, PAN_CO2 = 68, &
    C2H6_sink = 69, C2H4_sink = 70, C2H2_sink = 71, C2H5O2_sink = 72, &
    C2H6_C2H5O2 = 73, C2H5OOH_C2H5O2 = 74, C3H8_C2H5O2 = 75, C3H6_C2H5O2 = 76, &
    LC4H9O2_C2H5O2 = 77, LC4H9OOH_C2H5O2 = 78, MEK_C2H5O2 = 79, LC4H9NO3_C2H5O2 = 80, &
    C2H5OOH_sink = 81, C2H5O2_C2H5OOH = 82, CH3CHO_sink = 83, C2H5O2_CH3CHO = 84, &
    C2H5OOH_CH3CHO = 85, C3H6_CH3CHO = 86, LHOC3H6O2_CH3CHO = 87, LC4H9O2_CH3CHO = 88, &
    LMEKO2_CH3CHO = 89, LC4H9OOH_CH3CHO = 90, LMEKOOH_CH3CHO = 91, &
    LC4H9NO3_CH3CHO = 92, CH3CO2H_sink = 93, CH3CO3_CH3CO2H = 94, CH3CO3_sink = 95, &
    CH3CHO_CH3CO3 = 96, CH3CO3H_CH3CO3 = 97, PAN_CH3CO3 = 98, C3H6_CH3CO3 = 99, CH3COCH2O2_CH3CO3 = 100, &
    MGLYOX_CH3CO3 = 101, MVK_CH3CO3 = 102, MVKO2_CH3CO3 = 103, LMEKO2_CH3CO3 = 104, &
    C5H8_CH3CO3 = 105, CH3COCH3_CH3CO3 = 106, ACETOL_CH3CO3 = 107, HYPERACET_CH3CO3 = 108, &
    MVKOOH_CH3CO3 = 109, MEK_CH3CO3 = 110, LMEKOOH_CH3CO3 = 111, BIACET_CH3CO3 = 112, &
    CH3CO3H_sink = 113, CH3CO3_CH3CO3H = 114, NACA_sink = 115, ISON_NACA = 116, &
    PAN_sink = 117, CH3CO3_PAN = 118, C3H8_sink = 119, C3H6_sink = 120, &
    IC3H7O2_sink = 121, C3H8_IC3H7O2 = 122, IC3H7OOH_IC3H7O2 = 123, IC3H7OOH_sink = 124, &
    IC3H7O2_IC3H7OOH = 125, LHOC3H6O2_sink = 126, C2H4_LHOC3H6O2 = 127, C3H6_LHOC3H6O2 = 128, &
    LHOC3H6OOH_LHOC3H6O2 = 129, LHOC3H6OOH_sink = 130, LHOC3H6O2_LHOC3H6OOH = 131, &
    CH3COCH3_sink = 132, IC3H7O2_CH3COCH3 = 133, IC3H7OOH_CH3COCH3 = 134, &
    IC3H7NO3_CH3COCH3 = 135, CH3COCH2O2_sink = 136, CH3COCH3_CH3COCH2O2 = 137, &
    HYPERACET_CH3COCH2O2 = 138, HYPERACET_sink = 139, CH3COCH2O2_HYPERACET = 140, ACETOL_sink = 141, &
    LHOC3H6OOH_ACETOL = 142, CH3COCH2O2_ACETOL = 143, MPAN_ACETOL = 144, &
    MVKO2_ACETOL = 145, ISO2_ACETOL = 146, CH3O2_ACETOL = 147, &
    ISON_ACETOL = 148, MVKOOH_ACETOL = 149, MGLYOX_sink = 150, &
    C3H6_MGLYOX = 151, CH3COCH2O2_MGLYOX = 152, HYPERACET_MGLYOX = 153, &
    ACETOL_MGLYOX = 154, MVK_MGLYOX = 155, MVKO2_MGLYOX = 156, &
    ISO2_MGLYOX = 157, CH3O2_MGLYOX = 158, MVKOOH_MGLYOX = 159, &
    MPAN_sink = 160, MVKO2_MPAN = 161, IC3H7NO3_sink = 162, IC3H7O2_IC3H7NO3 = 163, &
    NC4H10_sink = 164, LC4H9O2_sink = 165, NC4H10_LC4H9O2 = 166, &
    LC4H9OOH_LC4H9O2 = 167, LC4H9OOH_sink = 168, LC4H9O2_LC4H9OOH = 169, &
    MVK_sink = 170, C5H8_MVK = 171, ISO2_MVK = 172, CH3O2_MVK = 173, &
    ISOOH_MVK = 174, ISON_MVK = 175, MVKO2_sink = 176, MPAN_MVKO2 = 177, &
    MVK_MVKO2 = 178, MVKOOH_MVKO2 = 179, C5H8_MVKO2 = 180, MVKOOH_sink = 181, &
    MVKO2_MVKOOH = 182, MEK_sink = 183, LC4H9O2_MEK = 184, LC4H9OOH_MEK = 185, &
    LC4H9NO3_MEK = 186, LMEKO2_sink = 187, MEK_LMEKO2 = 188, LMEKOOH_LMEKO2 = 189, &
    LMEKOOH_sink = 190, LMEKO2_LMEKOOH = 191, BIACET_sink = 192, &
    LMEKOOH_BIACET = 193, LC4H9NO3_sink = 194, C3H6_LC4H9NO3 = 195, LHOC3H6O2_LC4H9NO3 = 196, &
    LC4H9O2_LC4H9NO3 = 197, LMEKO2_LC4H9NO3 = 198, C5H8_sink = 199, ISO2_sink = 200, &
    C5H8_ISO2 = 201, ISOOH_sink = 202, ISO2_ISOOH = 203, ISON_sink = 204, &
    C5H8_ISON = 205, ISO2_ISON = 206, CCl4_sink = 207, CH3Cl_sink = 208, &
    CH3CCl3_sink = 209, CF2Cl2_sink = 210, CFCl3_sink = 211, CH3Br_sink = 212, &
    CF3Br_sink = 213, CF2ClBr_sink = 214, DMSO_CH3SO3H = 215, &
    CH3SO3_CH3SO3H = 216, DMS_sink = 217, DMSO_sink = 218, DMS_DMSO = 219, &
    CH3SO2_sink = 220, DMS_CH3SO2 = 221, CH3SO3_sink = 222, CH3SO2_CH3SO3 = 223, &
    KIE_G4100_I13CH4 = 224, KIE_G4101_I13CH4 = 225, KIE_G4110_I13CO = 226
#else
! flow() is imported from messy_mecca_tag_common
#endif

! -----------------------------------------------------------------------------

! concentrations of isotopologues
  REAL(dp)           :: ISOC(NTCSPEC,NTCISO)

  REAL(dp)           :: TC(NTCISO)

! total C (atoms) of the regular composition
  REAL(dp)           :: TC_R

! 12C 13C tagged species arrays
  REAL(dp)           :: I12C(NTCSPEC)
  REAL(dp)           :: I13C(NTCSPEC)
    EQUIVALENCE( I12C(1),ISOC(1,1) )
    EQUIVALENCE( I13C(1),ISOC(1,2) )

! totals (atoms)
  REAL(dp)           :: T12C, T13C
    EQUIVALENCE( T12C, TC(1) )
    EQUIVALENCE( T13C, TC(2) )

! fractions (operative), +1 for TC
  REAL(dp)           :: F12C(NTCSPEC+1), &
                        F13C(NTCSPEC+1)

! -----------------------------------------------------------------------------

! runtime control parameters

! treshold value: below it species stops to sink to the others (but can receive)
!                                         x * mean cair
  REAL(dp), PARAMETER :: THRES_LOW = 1.0E-16_dp * 2.5047E+19_dp

! integrator performance parameters
! # of taken, rejected steps + special parameter
  INTEGER             :: tag_IC_ISTEP, tag_IC_IREJCT
  REAL(dp)            :: tag_IC_ISPAR

! # of derivative evaluations & "rejected" species (under threshold to cut)
  INTEGER             :: tag_IC_NREJCT, tag_IC_NDEREV
  
! fraction of "corrected to regular" species (diagnostic) & filter threshold
  INTEGER             :: tag_IC_NCOR2R
  REAL(dp), PARAMETER :: THRES_C2R = 1.0E-3_dp ! (max. ratio tag/reg allowed)

! -----------------------------------------------------------------------------

  PUBLIC

  PRIVATE zerodiv

  PRIVATE THRES_LOW, THRES_C2R

#ifndef INTERFLOW
  PRIVATE flow
#endif

  PUBLIC tag_IC_update_kie
  PUBLIC tag_IC_flow_calc
  PUBLIC tag_IC_integrate
  PUBLIC tag_IC_calctotals
  PUBLIC tag_IC_correct2reg
  PUBLIC tag_IC_correct2iso

! =============================================================================

CONTAINS

! -----------------------------------------------------------------------------

  ELEMENTAL REAL(dp) FUNCTION zerodiv(what,by)
    ! safe division which gives zero when division by zero is performed
    REAL(dp), INTENT(IN) :: what, by   ! operands
    IF (by .EQ. 0.0_dp) THEN
      zerodiv = 0.0_dp
    ELSE
      zerodiv = what/by
    ENDIF
  END FUNCTION zerodiv



! -----------------------------------------------------------------------------

  SUBROUTINE tag_IC_update_kie(C, press, cair, temp)

    IMPLICIT NONE

    ! I/O
    REAL(dp), INTENT(IN) :: C(:)
    REAL(dp), INTENT(IN) :: press
    REAL(dp), INTENT(IN) :: cair
    REAL(dp), INTENT(IN) :: temp

  ! ===== KIE preparation section (coeff. update, etc.) =======================

  ! ----- carbon KIE declaration part -----

  ! = G4100 ----- CH4+O1D -----------------------------------------------------
  ! KIE=1.0130+-       EPS=-12.8+-    (o/oo) IRMS/Saueressig et al.[2001]/C0839
    REAL(dp) :: r_G4100_12k_13k = 1.0130_dp

  ! - G4101 ----- CH4+OH ------------------------------------------------------
  ! KIE=1.0039+-0.0004 EPS=-3.9+-0.00 (o/oo) IRMS/Saueressig et al.[2001]/C0839
    REAL(dp) :: r_G4101_12k_13k = 1.0039_dp

  ! - G4110 ------------ CO+OH ------------------------------------------------
  ! Stevens et al.[1980], Roeckmann et al.[1998]
    REAL(dp) :: r_G4110_12k_13k

  ! - G6400 ------------------ CH4+Cl -----------------------------------------
  ! Chlorine + methane
  ! Saueressig, G et al. Carbon kinetic isotope effect in the reaction of CH4 with Cl atoms.
  ! GEOPHYSICAL RESEARCH LETTERS, VOL. 22, NO. 10, PAGES 1225-1228, MAY 15, 1995
    REAL(dp) :: r_G6400_12k_13k


  ! ----- carbon KIE calculation part -----
   
  ! - G4110 ----- CH4+O1D -----------------------------------------------------
  ! defined constant

  ! - G4101 ----- CH4+OH ------------------------------------------------------
  ! defined constant

  ! - G4110 ----- CO+OH -------------------------------------------------------
  ! note: CO+OH reaction rate  k_CO_OH = (1.57E-13 + cair*3.54E-33)
  !
  ! pressure dependent
  ! - 2nd order fit ----- (as k2*(p**2) + k1*p + k2) ----------------------(1)-
    r_G4110_12k_13k    = ( -1.035926E-12_dp * (press ** 2) &
                           + 2.376942E-07_dp * press &
                           + 9.931051E-01_dp )

  ! can be slightly faster as (k2 * (k01-p) * (k02-p)) - may be wrong! ----(2)-
  !   
  ! - constant value ------------------------------------------------------(3)-
  ! r_G4110_12k_13k = 1 + 5.0_dp / 1000.0_dp

  ! - G6400 ------------------ CH4+Cl -----------------------------------------
  ! Cl + CH4 = HCl + CH3O2 : {%StTrGCl} 9.6E-12*EXP(-1360./temp); {&1555}
  ! temperature dependent: alpha = 1.043 * exp(6.455/T)     [k maj/k min]

    r_G6400_12k_13k = 1.043_dp * EXP(6.455_dp/temp)


  ! ===== calculation of KIE-correction for reac/isot =========================

  ! ----- tag_IC: flow(KIE_REAC_ISOT) corrections calculation -----

    flow(KIE_G4100_I13CH4) = C(ind_PTG4100) * (1.0_dp - 1.0_dp/r_G4100_12k_13k)
    flow(KIE_G4101_I13CH4) = C(ind_PTG4101) * (1.0_dp - 1.0_dp/r_G4101_12k_13k)
    flow(KIE_G4110_I13CO) = C(ind_PTG4110) * (1.0_dp - 1.0_dp/r_G4110_12k_13k)

  
  ! ===== calculation of the rates for isotope exchange =======================

  ! ----- tag_IC: flow(IEX_REAC_ISOT) corrections calculation -----



  END SUBROUTINE tag_IC_update_kie



! -----------------------------------------------------------------------------

  SUBROUTINE tag_IC_flow_calc(C, TSL)
    
  ! this subroutine calculates flow of C-containig molecules
  ! from one tagged species to another, plus sinks; from PTs
    
    IMPLICIT NONE

    ! I/O
    REAL(dp), INTENT(IN)  :: C(:), TSL

#ifndef INTERFLOW
  ! ----- tag_IC: flow(FROM_TO[sink]) = SUM( PTs(FROM->TO[sink]) ) -----

  ! ----- IC: CH4 ----- WARN: indicated as fixed species
    flow(CH4_sink) = -( C(ind_PTG4100) + &
      C(ind_PTG4101) + C(ind_PTG6400) + &
      C(ind_PTJ4103) )
    flow(C3H6_CH4) = 0.06 * C(ind_PTG4301) 

  ! ----- IC: CH3OH -----
    flow(CH3OH_sink) = -( C(ind_PTG4102) )
    flow(CH3O2_CH3OH) = C(ind_PTG4106b) + &
      0.25 * C(ind_PTG4206) + 0.2 * C(ind_PTG4306) + 0.5 * C(ind_PTG4314) + &
      0.18 * C(ind_PTG4401) + 0.25 * C(ind_PTG4410) + &
      0.0416666666666667 * C(ind_PTG4505) 
    flow(C3H6_CH3OH) = 0.03 * C(ind_PTG4301) 
    flow(ISO2_CH3OH) = 0.2083333333333333 * C(ind_PTG4505) 

  ! ----- IC: CH3O2 -----
    flow(CH3O2_sink) = -( C(ind_PTG4103) + &
      C(ind_PTG4104) + C(ind_PTG4105) + 2.0_dp * C(ind_PTG4106a) + &
      2.0_dp * C(ind_PTG4106b) + C(ind_PTG4206) + C(ind_PTG4215a) + &
      C(ind_PTG4215b) + C(ind_PTG4306) + C(ind_PTG4314) + C(ind_PTG4401) + &
      C(ind_PTG4410) + C(ind_PTG4505) + &
      C(ind_PTG6403) )
    flow(CH4_CH3O2) = 0.75 * C(ind_PTG4100) + &
      C(ind_PTG4101) + &
      C(ind_PTG6400) 
    flow(CH3OOH_CH3O2) = 0.7 * C(ind_PTG4107) 
    flow(CH3CO2H_CH3O2) = C(ind_PTG4210) 
    flow(CH3CO3_CH3O2) = C(ind_PTG4212) + &
      C(ind_PTG4214) + C(ind_PTG4215a) + 0.82 * C(ind_PTG4216) + &
      2.0 * C(ind_PTG4217) 
    flow(C2H2_CH3O2) = C(ind_PTG4222) 
    flow(C3H6_CH3O2) = 0.07 * C(ind_PTG4301) 
    flow(C5H8_CH3O2) = 0.08 * C(ind_PTG4500) 
    flow(DMSO_CH3O2) = 0.6 * C(ind_PTG9402) 
    flow(CH3SO2_CH3O2) = C(ind_PTG9403) 
    flow(CH3CHO_CH3O2) = C(ind_PTJ4201) 
    flow(CH3CO3H_CH3O2) = C(ind_PTJ4202) 
    flow(PAN_CH3O2) = 0.4 * C(ind_PTJ4204) 
    flow(CH3COCH3_CH3O2) = C(ind_PTJ4301) 
    flow(CH3Cl_CH3O2) = C(ind_PTJ6400) 
    flow(CH3Br_CH3O2) = C(ind_PTJ7400) 

  ! ----- IC: CH3OOH -----
    flow(CH3OOH_sink) = -( C(ind_PTG4107) + &
      C(ind_PTG6402) + &
      C(ind_PTJ4100) )
    flow(CH3O2_CH3OOH) = C(ind_PTG4103) 

  ! ----- IC: HCHO -----
    flow(HCHO_sink) = -( C(ind_PTG4108) + &
      C(ind_PTG4109) + C(ind_PTG6401) + C(ind_PTG7400) + C(ind_PTJ4101a) + &
      C(ind_PTJ4101b) )
    flow(CH4_HCHO) = 0.25 * C(ind_PTG4100) 
    flow(CH3OH_HCHO) = C(ind_PTG4102) 
    flow(CH3O2_HCHO) = C(ind_PTG4104) + &
      C(ind_PTG4105) + 2.0 * C(ind_PTG4106a) + C(ind_PTG4106b) + &
      0.75 * C(ind_PTG4206) + C(ind_PTG4215a) + C(ind_PTG4215b) + &
      0.8 * C(ind_PTG4306) + 0.68 * C(ind_PTG4401) + 0.25 * C(ind_PTG4410) + &
      0.2083333333333333 * C(ind_PTG4505) + &
      C(ind_PTG6403) 
    flow(CH3OOH_HCHO) = 0.3 * C(ind_PTG4107) + &
      C(ind_PTG6402) + &
      C(ind_PTJ4100) 
    flow(C2H4_HCHO) = C(ind_PTG4201) 
    flow(NACA_HCHO) = C(ind_PTG4219) + &
      C(ind_PTJ4203) 
    flow(PAN_HCHO) = C(ind_PTG4220) 
    flow(C3H6_HCHO) = 0.57 * C(ind_PTG4301) 
    flow(LHOC3H6O2_HCHO) = 0.98 * C(ind_PTG4309) 
    flow(CH3COCH2O2_HCHO) = C(ind_PTG4313) + &
      0.8 * C(ind_PTG4314) 
    flow(MVKO2_HCHO) = 0.75 * C(ind_PTG4408) + &
      0.875 * C(ind_PTG4410) + &
      0.5 * C(ind_PTG4411) 
    flow(C5H8_HCHO) = 0.58 * C(ind_PTG4500) 
    flow(ISO2_HCHO) = 0.88 * C(ind_PTG4504) + &
      1.0416666666666667 * C(ind_PTG4505) + &
      C(ind_PTG4506) 
    flow(DMS_HCHO) = C(ind_PTG9400a) + &
      C(ind_PTG9401) 
    flow(DMSO_HCHO) = C(ind_PTG9402) 
    flow(ACETOL_HCHO) = C(ind_PTJ4302) 
    flow(MVK_HCHO) = C(ind_PTJ4401) 
    flow(MVKOOH_HCHO) = 0.75 * C(ind_PTJ4402) 
    flow(ISOOH_HCHO) = C(ind_PTJ4500) 
    flow(ISON_HCHO) = C(ind_PTJ4501) 

  ! ----- IC: CO -----
    flow(CO_sink) = -( C(ind_PTG4110) )
    flow(HCHO_CO) = C(ind_PTG4108) + &
      C(ind_PTG4109) + C(ind_PTG6401) + C(ind_PTG7400) + C(ind_PTJ4101a) + &
      C(ind_PTJ4101b) 
    flow(C2H4_CO) = 0.23 * C(ind_PTG4201) 
    flow(NACA_CO) = C(ind_PTG4219) + &
      C(ind_PTJ4203) 
    flow(C3H6_CO) = 0.31 * C(ind_PTG4301) 
    flow(MGLYOX_CO) = C(ind_PTG4317) + &
      C(ind_PTJ4303) 
    flow(MVK_CO) = 0.22 * C(ind_PTG4405) + &
      C(ind_PTJ4401) 
    flow(MVKO2_CO) = 0.25 * C(ind_PTG4408) + &
      0.125 * C(ind_PTG4410) + &
      0.5 * C(ind_PTG4411) 
    flow(C5H8_CO) = 0.14 * C(ind_PTG4500) 
    flow(CO2_CO) = C(ind_PTJ4102) 
    flow(CH4_CO) = C(ind_PTJ4103) 
    flow(CH3CHO_CO) = C(ind_PTJ4201) 
    flow(MVKOOH_CO) = 0.25 * C(ind_PTJ4402) 

  ! ----- IC: HCOOH -----
    flow(HCOOH_sink) = -( C(ind_PTG4111) )
    flow(C2H4_HCOOH) = 0.54 * C(ind_PTG4201) 
    flow(C3H6_HCOOH) = 0.22 * C(ind_PTG4301) 
    flow(MVK_HCOOH) = 0.45 * C(ind_PTG4405) 
    flow(C5H8_HCOOH) = 0.28 * C(ind_PTG4500) 

  ! ----- IC: CO2 -----
    flow(CO2_sink) = -( C(ind_PTJ4102) )
    flow(CO_CO2) = C(ind_PTG4110) 
    flow(CH3CO2H_CO2) = C(ind_PTG4210) 
    flow(CH3CO3_CO2) = C(ind_PTG4215a) + &
      2.0 * C(ind_PTG4217) 
    flow(PAN_CO2) = 0.4 * C(ind_PTJ4204) 

  ! ----- IC: C2H6 -----
    flow(C2H6_sink) = -( C(ind_PTG4200) )

  ! ----- IC: C2H4 -----
    flow(C2H4_sink) = -( C(ind_PTG4201) + &
      C(ind_PTG4202) )

  ! ----- IC: C2H2 -----
    flow(C2H2_sink) = -( C(ind_PTG4222) )

  ! ----- IC: C2H5O2 -----
    flow(C2H5O2_sink) = -( C(ind_PTG4203) + &
      C(ind_PTG4204) + C(ind_PTG4205) + C(ind_PTG4206) + &
      C(ind_PTG4216) )
    flow(C2H6_C2H5O2) = C(ind_PTG4200) 
    flow(C2H5OOH_C2H5O2) = 0.3 * C(ind_PTG4207) 
    flow(C3H8_C2H5O2) = 0.18 * C(ind_PTG4300) 
    flow(C3H6_C2H5O2) = 0.06 * C(ind_PTG4301) 
    flow(LC4H9O2_C2H5O2) = 0.12 * C(ind_PTG4401) + &
      0.28 * C(ind_PTG4403) 
    flow(LC4H9OOH_C2H5O2) = 0.33 * C(ind_PTJ4400) 
    flow(MEK_C2H5O2) = C(ind_PTJ4403) 
    flow(LC4H9NO3_C2H5O2) = 0.33 * C(ind_PTJ4406) 

  ! ----- IC: C2H5OOH -----
    flow(C2H5OOH_sink) = -( C(ind_PTG4207) + &
      C(ind_PTJ4200) )
    flow(C2H5O2_C2H5OOH) = C(ind_PTG4203) 

  ! ----- IC: CH3CHO -----
    flow(CH3CHO_sink) = -( C(ind_PTG4208) + &
      C(ind_PTG4209) + C(ind_PTJ4201) )
    flow(C2H5O2_CH3CHO) = C(ind_PTG4204) + &
      C(ind_PTG4205) + 0.75 * C(ind_PTG4206) + &
      C(ind_PTG4216) 
    flow(C2H5OOH_CH3CHO) = 0.7 * C(ind_PTG4207) + &
      C(ind_PTJ4200) 
    flow(C3H6_CH3CHO) = 0.47 * C(ind_PTG4301) 
    flow(LHOC3H6O2_CH3CHO) = 0.98 * C(ind_PTG4309) 
    flow(LC4H9O2_CH3CHO) = 0.12 * C(ind_PTG4401) + &
      0.84 * C(ind_PTG4403) 
    flow(LMEKO2_CH3CHO) = 0.985 * C(ind_PTG4415) 
    flow(LC4H9OOH_CH3CHO) = 0.33 * C(ind_PTJ4400) 
    flow(LMEKOOH_CH3CHO) = C(ind_PTJ4404) 
    flow(LC4H9NO3_CH3CHO) = 0.33 * C(ind_PTJ4406) 

  ! ----- IC: CH3CO2H -----
    flow(CH3CO2H_sink) = -( C(ind_PTG4210) )
    flow(CH3CO3_CH3CO2H) = C(ind_PTG4211b) + &
      C(ind_PTG4215b) + &
      0.18 * C(ind_PTG4216) 

  ! ----- IC: CH3CO3 -----
    flow(CH3CO3_sink) = -( C(ind_PTG4211a) + &
      C(ind_PTG4211b) + C(ind_PTG4212) + C(ind_PTG4213) + C(ind_PTG4214) + &
      C(ind_PTG4215a) + C(ind_PTG4215b) + C(ind_PTG4216) + &
      2.0_dp * C(ind_PTG4217) )
    flow(CH3CHO_CH3CO3) = C(ind_PTG4208) + &
      C(ind_PTG4209) 
    flow(CH3CO3H_CH3CO3) = C(ind_PTG4218) 
    flow(PAN_CH3CO3) = C(ind_PTG4221) + &
      0.6 * C(ind_PTJ4204) 
    flow(C3H6_CH3CO3) = 0.23 * C(ind_PTG4301) 
    flow(CH3COCH2O2_CH3CO3) = C(ind_PTG4313) + &
      0.3 * C(ind_PTG4314) 
    flow(MGLYOX_CH3CO3) = C(ind_PTG4317) + &
      C(ind_PTJ4303) 
    flow(MVK_CH3CO3) = 0.1 * C(ind_PTG4405) + &
      C(ind_PTJ4401) 
    flow(MVKO2_CH3CO3) = 0.25 * C(ind_PTG4408) + &
      0.125 * C(ind_PTG4410) 
    flow(LMEKO2_CH3CO3) = 0.985 * C(ind_PTG4415) 
    flow(C5H8_CH3CO3) = 0.1 * C(ind_PTG4500) 
    flow(CH3COCH3_CH3CO3) = C(ind_PTJ4301) 
    flow(ACETOL_CH3CO3) = C(ind_PTJ4302) 
    flow(HYPERACET_CH3CO3) = C(ind_PTJ4304) 
    flow(MVKOOH_CH3CO3) = 0.25 * C(ind_PTJ4402) 
    flow(MEK_CH3CO3) = C(ind_PTJ4403) 
    flow(LMEKOOH_CH3CO3) = C(ind_PTJ4404) 
    flow(BIACET_CH3CO3) = 2.0 * C(ind_PTJ4405) 

  ! ----- IC: CH3CO3H -----
    flow(CH3CO3H_sink) = -( C(ind_PTG4218) + &
      C(ind_PTJ4202) )
    flow(CH3CO3_CH3CO3H) = C(ind_PTG4211a) 

  ! ----- IC: NACA -----
    flow(NACA_sink) = -( C(ind_PTG4219) + &
      C(ind_PTJ4203) )
    flow(ISON_NACA) = C(ind_PTG4508) 

  ! ----- IC: PAN -----
    flow(PAN_sink) = -( C(ind_PTG4220) + &
      C(ind_PTG4221) + &
      C(ind_PTJ4204) )
    flow(CH3CO3_PAN) = C(ind_PTG4213) 

  ! ----- IC: C3H8 -----
    flow(C3H8_sink) = -( C(ind_PTG4300) )

  ! ----- IC: C3H6 -----
    flow(C3H6_sink) = -( C(ind_PTG4301) + &
      C(ind_PTG4302) + &
      C(ind_PTG4303) )

  ! ----- IC: IC3H7O2 -----
    flow(IC3H7O2_sink) = -( C(ind_PTG4304) + &
      C(ind_PTG4305) + &
      C(ind_PTG4306) )
    flow(C3H8_IC3H7O2) = 0.82 * C(ind_PTG4300) 
    flow(IC3H7OOH_IC3H7O2) = 0.3 * C(ind_PTG4307) 

  ! ----- IC: IC3H7OOH -----
    flow(IC3H7OOH_sink) = -( C(ind_PTG4307) + &
      C(ind_PTJ4300) )
    flow(IC3H7O2_IC3H7OOH) = C(ind_PTG4304) 

  ! ----- IC: LHOC3H6O2 -----
    flow(LHOC3H6O2_sink) = -( C(ind_PTG4308) + &
      C(ind_PTG4309) )
    flow(C2H4_LHOC3H6O2) = 0.6666666999999999 * C(ind_PTG4202) 
    flow(C3H6_LHOC3H6O2) = C(ind_PTG4302) 
    flow(LHOC3H6OOH_LHOC3H6O2) = 0.5 * C(ind_PTG4310) 

  ! ----- IC: LHOC3H6OOH -----
    flow(LHOC3H6OOH_sink) = -( C(ind_PTG4310) )
    flow(LHOC3H6O2_LHOC3H6OOH) = C(ind_PTG4308) 

  ! ----- IC: CH3COCH3 -----
    flow(CH3COCH3_sink) = -( C(ind_PTG4311) + &
      C(ind_PTJ4301) )
    flow(IC3H7O2_CH3COCH3) = 0.96 * C(ind_PTG4305) + &
      C(ind_PTG4306) 
    flow(IC3H7OOH_CH3COCH3) = 0.7 * C(ind_PTG4307) + &
      C(ind_PTJ4300) 
    flow(IC3H7NO3_CH3COCH3) = C(ind_PTG4320) + &
      C(ind_PTJ4306) 

  ! ----- IC: CH3COCH2O2 -----
    flow(CH3COCH2O2_sink) = -( C(ind_PTG4312) + &
      C(ind_PTG4313) + &
      C(ind_PTG4314) )
    flow(CH3COCH3_CH3COCH2O2) = C(ind_PTG4311) 
    flow(HYPERACET_CH3COCH2O2) = 0.3 * C(ind_PTG4315) 

  ! ----- IC: HYPERACET -----
    flow(HYPERACET_sink) = -( C(ind_PTG4315) + &
      C(ind_PTJ4304) )
    flow(CH3COCH2O2_HYPERACET) = C(ind_PTG4312) 

  ! ----- IC: ACETOL -----
    flow(ACETOL_sink) = -( C(ind_PTG4316) + &
      C(ind_PTJ4302) )
    flow(LHOC3H6OOH_ACETOL) = 0.5 * C(ind_PTG4310) 
    flow(CH3COCH2O2_ACETOL) = 0.2 * C(ind_PTG4314) 
    flow(MPAN_ACETOL) = C(ind_PTG4318) + &
      C(ind_PTJ4305) 
    flow(MVKO2_ACETOL) = 0.25 * C(ind_PTG4408) + &
      0.375 * C(ind_PTG4410) + &
      C(ind_PTG4411) 
    flow(ISO2_ACETOL) = 0.2083333333333333 * C(ind_PTG4505) 
    flow(CH3O2_ACETOL) = 0.0416666666666667 * C(ind_PTG4505) 
    flow(ISON_ACETOL) = C(ind_PTG4508) 
    flow(MVKOOH_ACETOL) = 0.25 * C(ind_PTJ4402) 

  ! ----- IC: MGLYOX -----
    flow(MGLYOX_sink) = -( C(ind_PTG4317) + &
      C(ind_PTJ4303) )
    flow(C3H6_MGLYOX) = 0.04 * C(ind_PTG4301) 
    flow(CH3COCH2O2_MGLYOX) = 0.5 * C(ind_PTG4314) 
    flow(HYPERACET_MGLYOX) = 0.7 * C(ind_PTG4315) 
    flow(ACETOL_MGLYOX) = C(ind_PTG4316) 
    flow(MVK_MGLYOX) = 0.9 * C(ind_PTG4405) 
    flow(MVKO2_MGLYOX) = 0.5 * C(ind_PTG4408) + &
      0.5 * C(ind_PTG4410) + &
      C(ind_PTG4411) 
    flow(ISO2_MGLYOX) = 0.2083333333333333 * C(ind_PTG4505) 
    flow(CH3O2_MGLYOX) = 0.0416666666666667 * C(ind_PTG4505) 
    flow(MVKOOH_MGLYOX) = 0.5 * C(ind_PTJ4402) 

  ! ----- IC: MPAN -----
    flow(MPAN_sink) = -( C(ind_PTG4318) + &
      C(ind_PTG4319) + &
      C(ind_PTJ4305) )
    flow(MVKO2_MPAN) = C(ind_PTG4409) 

  ! ----- IC: IC3H7NO3 -----
    flow(IC3H7NO3_sink) = -( C(ind_PTG4320) + &
      C(ind_PTJ4306) )
    flow(IC3H7O2_IC3H7NO3) = 0.04 * C(ind_PTG4305) 

  ! ----- IC: NC4H10 -----
    flow(NC4H10_sink) = -( C(ind_PTG4400) )

  ! ----- IC: LC4H9O2 -----
    flow(LC4H9O2_sink) = -( C(ind_PTG4401) + &
      C(ind_PTG4402) + &
      C(ind_PTG4403) )
    flow(NC4H10_LC4H9O2) = C(ind_PTG4400) 
    flow(LC4H9OOH_LC4H9O2) = 0.15 * C(ind_PTG4404) 

  ! ----- IC: LC4H9OOH -----
    flow(LC4H9OOH_sink) = -( C(ind_PTG4404) + &
      C(ind_PTJ4400) )
    flow(LC4H9O2_LC4H9OOH) = C(ind_PTG4402) 

  ! ----- IC: MVK -----
    flow(MVK_sink) = -( C(ind_PTG4405) + &
      C(ind_PTG4406) + &
      C(ind_PTJ4401) )
    flow(C5H8_MVK) = 0.65 * C(ind_PTG4500) 
    flow(ISO2_MVK) = 0.88 * C(ind_PTG4504) + &
      0.4166666666666667 * C(ind_PTG4505) + &
      2.0 * C(ind_PTG4506) 
    flow(CH3O2_MVK) = 0.0833333333333333 * C(ind_PTG4505) 
    flow(ISOOH_MVK) = C(ind_PTG4507) + &
      C(ind_PTJ4500) 
    flow(ISON_MVK) = C(ind_PTJ4501) 

  ! ----- IC: MVKO2 -----
    flow(MVKO2_sink) = -( C(ind_PTG4407) + &
      C(ind_PTG4408) + C(ind_PTG4409) + C(ind_PTG4410) + &
      2.0_dp * C(ind_PTG4411) )
    flow(MPAN_MVKO2) = C(ind_PTG4319) 
    flow(MVK_MVKO2) = C(ind_PTG4406) 
    flow(MVKOOH_MVKO2) = C(ind_PTG4412) 
    flow(C5H8_MVKO2) = 0.1 * C(ind_PTG4500) 

  ! ----- IC: MVKOOH -----
    flow(MVKOOH_sink) = -( C(ind_PTG4412) + &
      C(ind_PTJ4402) )
    flow(MVKO2_MVKOOH) = C(ind_PTG4407) 

  ! ----- IC: MEK -----
    flow(MEK_sink) = -( C(ind_PTG4413) + &
      C(ind_PTJ4403) )
    flow(LC4H9O2_MEK) = 0.88 * C(ind_PTG4401) + &
      0.5600000000000001 * C(ind_PTG4403) 
    flow(LC4H9OOH_MEK) = 0.85 * C(ind_PTG4404) + &
      0.67 * C(ind_PTJ4400) 
    flow(LC4H9NO3_MEK) = C(ind_PTG4417) + &
      0.67 * C(ind_PTJ4406) 

  ! ----- IC: LMEKO2 -----
    flow(LMEKO2_sink) = -( C(ind_PTG4414) + &
      C(ind_PTG4415) )
    flow(MEK_LMEKO2) = C(ind_PTG4413) 
    flow(LMEKOOH_LMEKO2) = 0.2 * C(ind_PTG4416) 

  ! ----- IC: LMEKOOH -----
    flow(LMEKOOH_sink) = -( C(ind_PTG4416) + &
      C(ind_PTJ4404) )
    flow(LMEKO2_LMEKOOH) = C(ind_PTG4414) 

  ! ----- IC: BIACET -----
    flow(BIACET_sink) = -( C(ind_PTJ4405) )
    flow(LMEKOOH_BIACET) = 0.8 * C(ind_PTG4416) 

  ! ----- IC: LC4H9NO3 -----
    flow(LC4H9NO3_sink) = -( C(ind_PTG4417) + &
      C(ind_PTJ4406) )
    flow(C3H6_LC4H9NO3) = C(ind_PTG4303) 
    flow(LHOC3H6O2_LC4H9NO3) = 0.02 * C(ind_PTG4309) 
    flow(LC4H9O2_LC4H9NO3) = 0.16 * C(ind_PTG4403) 
    flow(LMEKO2_LC4H9NO3) = 0.015 * C(ind_PTG4415) 

  ! ----- IC: C5H8 -----
    flow(C5H8_sink) = -( C(ind_PTG4500) + &
      C(ind_PTG4501) + &
      C(ind_PTG4502) )

  ! ----- IC: ISO2 -----
    flow(ISO2_sink) = -( C(ind_PTG4503) + &
      C(ind_PTG4504) + C(ind_PTG4505) + &
      2.0_dp * C(ind_PTG4506) )
    flow(C5H8_ISO2) = C(ind_PTG4501) 

  ! ----- IC: ISOOH -----
    flow(ISOOH_sink) = -( C(ind_PTG4507) + &
      C(ind_PTJ4500) )
    flow(ISO2_ISOOH) = C(ind_PTG4503) 

  ! ----- IC: ISON -----
    flow(ISON_sink) = -( C(ind_PTG4508) + &
      C(ind_PTJ4501) )
    flow(C5H8_ISON) = C(ind_PTG4502) 
    flow(ISO2_ISON) = 0.12 * C(ind_PTG4504) 

  ! ----- IC: CCl4 -----
    flow(CCl4_sink) = -( C(ind_PTG6404) + &
      C(ind_PTJ6401) )

  ! ----- IC: CH3Cl -----
    flow(CH3Cl_sink) = -( C(ind_PTG6405) + &
      C(ind_PTG6406) + &
      C(ind_PTJ6400) )

  ! ----- IC: CH3CCl3 -----
    flow(CH3CCl3_sink) = -( C(ind_PTG6407) + &
      C(ind_PTG6408) + &
      C(ind_PTJ6402) )

  ! ----- IC: CF2Cl2 -----
    flow(CF2Cl2_sink) = -( C(ind_PTG6500) + &
      C(ind_PTJ6501) )

  ! ----- IC: CFCl3 -----
    flow(CFCl3_sink) = -( C(ind_PTG6501) + &
      C(ind_PTJ6500) )

  ! ----- IC: CH3Br -----
    flow(CH3Br_sink) = -( C(ind_PTG7403) + &
      C(ind_PTJ7400) )

  ! ----- IC: CF3Br -----
    flow(CF3Br_sink) = -( C(ind_PTJ7500) )

  ! ----- IC: CF2ClBr -----
    flow(CF2ClBr_sink) = -( C(ind_PTJ7601) )

  ! ----- IC: CH3SO3H -----
    flow(DMSO_CH3SO3H) = 0.4 * C(ind_PTG9402) 

  ! ----- IC: CH3SO3H -----
    flow(CH3SO3_CH3SO3H) = C(ind_PTG9405) 

  ! ----- IC: DMS -----
    flow(DMS_sink) = -( C(ind_PTG9400a) + &
      C(ind_PTG9400b) + &
      C(ind_PTG9401) )

  ! ----- IC: DMSO -----
    flow(DMSO_sink) = -( C(ind_PTG9402) )
    flow(DMS_DMSO) = C(ind_PTG9400b) 

  ! ----- IC: CH3SO2 -----
    flow(CH3SO2_sink) = -( C(ind_PTG9403) + &
      C(ind_PTG9404) )
    flow(DMS_CH3SO2) = C(ind_PTG9400a) + &
      C(ind_PTG9401) 

  ! ----- IC: CH3SO3 -----
    flow(CH3SO3_sink) = -( C(ind_PTG9405) )
    flow(CH3SO2_CH3SO3) = C(ind_PTG9404) 

#endif

  END SUBROUTINE tag_IC_flow_calc

! -----------------------------------------------------------------------------

! main subroutine of isotopic exchange calculation

  SUBROUTINE tag_IC_integrate(TSL, nstep, C, press, cair, temp)

! turned off so far due to incompatibility with CAABA variables management
!   USE messy_mecca_kpp, ONLY: A, SPC_NAMES, EQN_TAGS

    IMPLICIT NONE

    ! I/O
    REAL(dp), INTENT(IN) :: C(:)
    REAL(dp), INTENT(IN) :: press
    REAL(dp), INTENT(IN) :: cair
    REAL(dp), INTENT(IN) :: temp

    INTRINSIC SUM

  ! TSL = times_step_len value    
    REAL(dp), INTENT(IN) :: TSL
  
  ! number of steps to take ( = nsteps from integrator? )
    INTEGER, INTENT(IN)  :: nstep

    REAL(dp) :: tot, tmp

    INTEGER  :: n, s, k

#ifdef INT_USEJAC
  ! jacobians
    REAL(dp) :: J(NTCSPEC,NTCSPEC,NTCISO)
    REAL(dp) :: Z(NTCSPEC)
#endif

  ! tagging compartment type
    TYPE TCOMP 
      REAL(dp) :: A(NTCSPEC,1:NTCISO), &
                  R(NTCSPEC,2:NTCISO)
    END TYPE TCOMP

  ! isotope exchange calculation & derivatives
    REAL(dp) :: RIEX(NIXREAC,2:NTCISO)
    REAL(dp) :: DIEX(NTCSPEC,2:NTCISO)

  ! atomic fractions
    TYPE (TCOMP) :: F

  ! atomic content
    TYPE (TCOMP) :: I, I0

#ifdef INT_SIMEULER
    INTEGER  :: steps
    INTEGER  :: nok, nbad
    REAL(dp) :: delta, delta_last, done             ! time control
    REAL(dp) :: maxerr, drR, dr0, drE               ! error control
    LOGICAL  :: reject, reject_last
    REAL(dp), PARAMETER :: RTOL = 1E-2              ! tolerance
    REAL(dp), PARAMETER :: CLOSE_FAC = 0.9_dp, FAR_FAC = 1.1_dp
    REAL(dp), PARAMETER :: PSHRNK = -0.25_dp, PGROW = -0.2_dp
  ! temporary
    TYPE (TCOMP) :: ID, IR
#endif

#ifdef INT_CG1
  ! parameters
    INTEGER  :: CG1_MAXTRY = 100
    REAL(dp) :: CG1_MAXSTEP
    REAL(dp) :: CG1_SIMREG = 0.5_dp
    REAL(dp) :: CG1_PRKLAM = 0.99_dp
    REAL(dp) :: TOL = 1E4
  ! operative        
    INTEGER  :: steps, steps2damp, niter
    REAL(dp) :: delta, delta_prev, dk, done, last_first
    REAL(dp) :: rc, rd, lev
    LOGICAL  :: damp, p_damp
  ! temporary
    TYPE (TCOMP) :: IP, ID, IT
#endif
    
#ifdef INT_LINMAX
    REAL(dp) :: delta, comp
    INTEGER  :: steps
#endif

#ifdef INT_CASHKARP
    INTEGER  :: n, nok, nbad
#endif

  ! = PREPARATION =============================================================

  ! ----- prepairing flow (if not INTERFLOW) ----------------------------------

#ifndef INTERFLOW
  ! calculate C molecules flow through PTs (or A)
    CALL tag_IC_flow_calc(C, TSL)
#endif
    
  ! ----- prepairing KIE correction values ------------------------------------
    CALL tag_IC_update_kie(C, press, cair, temp)

#ifdef INT_USEJAC
  ! ----- setting up major jacobian -----

  ! though weights are no longer used -- subject to remove!
    CALL prepare_Z(Z,0,1.0_dp)                  ! prepare weights:    type 0 1 2 3 4 5
    CALL prepare_J(J,.FALSE.)                   ! prepare "major jacobian"

  ! ----- filling the minor matrices -----
    DO k = 2, NTCISO
      J(:,:,k) = J(:,:,1)
    ENDDO

  ! ----- accounting KIE in jacobians -----


    J(tag_IC_CH4, tag_IC_CH4, 2) = flow(CH4_sink)+flow(KIE_G4101_I13CH4)
    J(tag_IC_CH3O2, tag_IC_CH4, 2) = flow(CH4_CH3O2)-flow(KIE_G4101_I13CH4)
    J(tag_IC_HCHO, tag_IC_CH4, 2) = flow(CH4_HCHO)-0.25_dp*flow(KIE_G4100_I13CH4)
    J(tag_IC_CO, tag_IC_CO, 2) = flow(CO_sink)+flow(KIE_G4110_I13CO)
    J(tag_IC_CO2, tag_IC_CO, 2) = flow(CO_CO2)-flow(KIE_G4110_I13CO)

#endif

! = INTEGRATION ================================================================

  ! repartitioning tracers: molecules to atoms
  ! abundant in major
    I%A(:,1) = ISOC(:,1)
    DO k = 2, NTCISO  
    ! rare in minor
      I%R(:,k) = ISOC(:,k) / QTCATOM(:)
    ! abundant in minor
      I%A(:,k) = ISOC(:,k) - I%R(:,k)
    ENDDO

  ! ----- performance parameters -----
    tag_IC_ISTEP = 0
    tag_IC_IREJCT = 0

    tag_IC_NREJCT = 0
    tag_IC_NDEREV = 0

#ifdef IEX
  ! --- initializing IEX data arrays ---
    DIEX(:,:) = 0.0_dp
    RIEX(:,:) = 0.0_dp
#endif

  ! ===== later works specified integrator =====

#ifdef INT_SIMEULER
! >>>>> Simple Euler integration scheme >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

    tag_IC_IREJCT = 0   ! # of rejected species
    tag_IC_ISTEP  = 0   ! # of calculation steps made
    tag_IC_ISPAR  = 0   ! # of pre-CLOSE_FAC overshoots
    
  ! first timestep
!   IF (delta_last .EQ. 0.0_dp) THEN
      delta = TSL ! / DBLE(nstep)
!   ELSE
!     delta = delta_last
!   ENDIF

    reject = .FALSE.; reject_last = .FALSE.
    done = 0.0_dp
    nok = 0; nbad = 0

    IR = I

    DO WHILE (done .LT. TSL)

#ifdef DEBUG    
      print *, 'step = ',tag_IC_NSTEP+1,'   done = ',done,'   delta = ',delta
#endif

    ! advancing solution
      CALL iderivs_atom(I,ID,F)        ! I` -> ID
      I0%A = I%A + delta * ID%A
      I0%R = I%R + delta * ID%R

    ! error control      
      reject = .FALSE.
      maxerr = 0.0_dp
      DO n = 1, NTCSPEC
        tot = SUM(I0%A(n,:))
        IF ( tot .GT. 0.0_dp ) THEN
          DO k = 2, NTCISO
            drR = DABS( (IR%R(n,k)/SUM(IR%A(n,:))) - (I%R(n,k)/SUM(I%A(n,:))) ) ! * delta
            dr0 = DABS( (I0%R(n,k)/SUM(I0%A(n,:))) - (I%R(n,k)/SUM(I%A(n,:))) ) ! * delta
            drE = DABS( drR - dr0 ) * delta
            IF (  drE .GT. RTOL  ) THEN
              reject = .TRUE.
              reject_last = .TRUE.
            ENDIF
            maxerr = DMAX1( maxerr, RTOL / drE )
          ENDDO
        ENDIF
      ENDDO

    ! prepairing new step
      delta_last = delta

      IF (.NOT. reject) THEN

      ! accepted step
        IR = I
        I = I0
        done = done + delta

      ! if the last step was not rejected, assume greater next delta
      ! else keep
        IF (reject_last) THEN
          reject_last = .FALSE.
        ELSE
          tmp = delta * (maxerr**(PSHRNK))  ! CLOSE_FAC * 
          delta = DMAX1(delta * FAR_FAC, tmp)
        ENDIF

        nok = nok + 1
      ELSE
        
      ! choosing new, smaller delta from "overshoot"
      ! plus soome safe stepback
        tmp =  delta * (maxerr**(PGROW))  ! CLOSE_FAC *
        delta = DMAX1(delta * 0.1_dp, tmp)

        nbad = nbad + 1
      ENDIF

    ! TSL overshoot check
      delta = DMIN1(delta, TSL-done)

    ENDDO        !   (WHILE)

    tag_IC_ISTEP = nok
    tag_IC_IREJCT = nbad

! <<<<< Simple Euler integration scheme <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
#endif

#ifdef INT_CG1
! >>>>> CG(1) method (Logg, Eriksson, Johnston; CFEC) >>>>>>>>>>>>>>>>>>>>>>>>>>

    tag_IC_ISPAR = 0.0_dp

  ! ----- computing first step size -----

    CG1_MAXSTEP = TSL
  
  ! first guess: from last successful guess or from scratch
    IF ( last_first .LE. 0.0_dp) THEN
      delta = TSL / 5.0_dp             ! 20% of TSL
    ELSE
      delta = last_first * 1.20_dp     ! 20% of previous successful
    ENDIF                              
  
  ! trials
    DO s = 1, CG1_MAXTRY

    ! get solution at (done,+delta)
      CALL step_CG1(I,delta,IP)            ! IP = solution(I,delta) -- proposed solution

    ! computing resudial
      CALL iderivs_atom(IP,ID,F)           ! ID = derivative(IP)
      rc = MAX( MAXVAL( ( IP%A-I%A )/delta - ID%A ), &
                MAXVAL( ( IP%R-I%R )/delta - ID%R ) )

    ! estimating suitability
      IF ( ((delta*lev) .LT. 1.0_dp) .AND. ((delta*delta*rc) .LT. TOL) ) EXIT

    ! trying smaller timestep  
      delta = delta * 0.5_dp

    ENDDO
    
  ! firs step estimation trials number
    tag_IC_ISPAR = s - 1
  ! storing successful estimation
    last_first = delta
    
    IF (s .GE. CG1_MAXTRY) THEN
      print *,'tag_IC_integrate: CG1 failed to estimate first timestep'
      pause 'press any key'
    ! EXIT HERE
    ENDIF

  ! ----- integration loop -----
  
    damp = .FALSE.
    p_damp = .FALSE.

    delta_prev = delta
    done = 0.0_dp

    steps = 0
    DO WHILE (done .LT. TSL)

      done = done + delta
      steps = steps + 1
#ifdef DEBUG
      print *,'tag_IC_integrate_CG1: doing step: ',steps,' @ done:',done,' [delta]: ',delta
#endif
  
      IF (damp) THEN
      
      ! --- performing forward Euler damping ---
        niter = 1
        CALL iderivs_atom(I,ID,F)            ! ID = derivative(I)
        I%A = I%A + delta * ID%A
        I%R = I%R + delta * ID%R
        steps2damp = steps2damp - 1
      
      ELSE
      
      ! --- regular CG1 step ---
        CALL step_CG1(I,delta,IP)            ! IP = solution(I,delta) -- proposed solution
                                             ! step_CG1 calculates I0 = derivative at current time (done)
#ifdef INT_CG1_PLAIN
        IF (damp) THEN
          IF (delta .LT. CG1_MAXSTEP) THEN
            CG1_MAXSTEP = delta
          ENDIF
          damp = .FALSE.
        ENDIF
#endif
        IF (damp) THEN
  
        ! prepairing for damping
          p_damp = .TRUE.
        
          steps2damp = MAX( INT( LOG(delta_prev*lev)+1.0_dp ), 2 )
#ifdef DEBUG
          print *,'tag_IC_integrate_CG1: damping at ( ',done,' ), lev = ',lev,', steps2damp = ',steps2damp
#endif
        ! redoing current step:

        ! rolling back
          done = done - delta
          delta = delta_prev

        ! skipping solution obtained in IP
        ! skipping new rc, ed calculation
        
        ENDIF  ! IF (damp) #2

      ENDIF    ! IF (damp) #1
      
      IF ( .NOT.(p_damp) ) THEN
  
      ! --- computing resudials ---
    
      ! IP = solution(done,+delta)
      ! ID = derivative(done,+delta)

        IT%A = ( IP%A - I%A ) / delta
        IT%R = ( IP%R - I%R ) / delta

      ! continuous
        CALL iderivs_atom(IP,I0,F)           ! I0 = derivative(IP)
        rc = MAX( MAXVAL( IT%A - I0%A ), &
                  MAXVAL( IT%R - I0%R ) )

!!    ! diagnostic from Logg
!!    ! discrete resudial
!!      I0%A = 0.5_dp * ( I%A + IP%A )
!!      I0%R = 0.5_dp * ( I%R + IP%R )
!!
!!      CALL iderivs_atom(I0,I0,F)
!!      rd = MAX( MAXVAL( IT%A - I0%A ), &
!!                MAXVAL( IT%R - I0%R ) )

      ! continue with damping?
        IF ( steps2damp .EQ. 0 ) damp = .FALSE.

      ! --- redoing the step if it was not OK ---
        IF ( ( ((rc*delta) .GT. (2.0_dp*TOL)) .AND. (steps .GT. 1) ) &
#ifdef NTC_CG1_PLAIN
           .AND. .FALSE. &
#endif
                           ) THEN
        ! rolling back
          done = done - delta
          delta = delta_prev
          tag_IC_IREJCT = tag_IC_IREJCT + 1
#ifdef DEBUG
          print *,'tag_IC_integrate_CG1: rejecting step: ',steps,'  @ ',done
#endif
        ELSE
          ! accepted step, advancing
          I = IP
        ENDIF

      ELSE    ! if not p_damp
        p_damp = .FALSE.
      ENDIF

    ! --- computing new stepsize ---
      delta_prev = delta
      IF ( rc .GT. 0.0_dp ) THEN
        dk = TOL/rc
      ELSE
        dk = CG1_MAXSTEP
      ENDIF
      
    ! a simple regulator
      dk = (1.0_dp + CG1_SIMREG) * dk * delta / (CG1_SIMREG * dk + delta)
      
    ! overriding timestep in case of damping
      IF (damp) THEN
        tmp = CG1_PRKLAM/lev
        IF (tmp .LT. dk) dk = tmp
      ENDIF
      
    ! checking too large step
      IF ( dk .GT. CG1_MAXSTEP ) dk = CG1_MAXSTEP

    ! checking TSL overshoot (tricking with +20% of new estimated stepsize)
      IF ( (done + dk*1.20_dp) .GT. TSL ) dk = (TSL - done)
      
      delta = dk

    ENDDO

  ! performance infomation
    tag_IC_ISTEP = steps
  ! tag_IC_IREJCT is updated within

! <<<<< CG(1) method (Logg, Eriksson, Johnston; CFEC) <<<<<<<<<<<<<<<<<<<<<<<<<<
#endif

#ifdef INT_LINMAX
! >>>>> LINEAR-MATRIX integration scheme >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
! Based on Bloch [1990], needs reconfiguration

  ! ----- stepping -----

  ! assessing values from the major jacobian

    delta = 0.0_dp
    DO n = 1, NTCSPEC
!     comp = MAXVAL(J(n,:,1), MASK=(J(n,:,1) .GT. 0.0_dp)) / &
!            MINVAL(J(n,:,1), MASK=(J(n,:,1) .GT. 0.0_dp))
      IF (C(TRPTIND(n)) .GT. 0.0_dp) &
        comp = MAXVAL(J(n,:,1), MASK=(J(n,:,1) .GT. 0.0_dp)) / &
               MINVAL(J(n,:,1), MASK=(J(n,:,1) .GT. 0.0_dp)) / C(TRPTIND(n))
      IF (comp .GT. delta) delta = comp
    ENDDO

  ! choosing the number of steps

!    steps = INT(2*1.0E5 * delta**2.71)
!    steps = INT(5.0E3 * done)

!    steps = ABS(INT(delta))   ! 250

    steps = 25

!PRINT *,steps

    IF (steps .LT. 25) steps = 25
    IF (steps .GT. 1000) steps = 1000
    
    delta = TSL / steps

/*
  ! preparing major and minor jac. matrices for integration
    DO n = 1, NTCSPEC
      Z(n) = J(n,n,1)
    ENDDO
    
    DO n = 1, NTCSPEC
      DO s = 1, NTCSPEC
        J(n,s,:) = J(n,s,:) / (1.0_dp - delta * Z(s))
      ENDDO
    ENDDO
*/

    DO s = 1, steps 

    ! advancing solution
      CALL iderivs_atom(I,I0,F)        ! I -> I0
      I%A = I%A + delta * I0%A
      I%R = I%R + delta * I0%R
      
    ! filtering negative concentrations 
      DO n = 1, NTCSPEC
        DO k = 1, NTCISO    
          IF (I%A(n,k) .LT. 0.0_dp) THEN
            print *,'tag_IC_integrate: ',TRIM(SPC_NAMES(RTCIND(n))),', class #',k,&
                    ', abundant is negative = ',I%A(n,k)
            I%A(n,k) = 0.0_dp
          ENDIF
        ENDDO
        DO k = 2, NTCISO    
          IF (I%R(n,k) .LT. 0.0_dp) THEN
            print *,'tag_IC_integrate: ',TRIM(SPC_NAMES(RTCIND(n))),', class #',k,&
                    ', rare is negative = ',I%R(n,k)
            I%R(n,k) = 0.0_dp
          ENDIF
        ENDDO
      ENDDO
      
    ENDDO

  ! performance info
    tag_IC_ISTEP = steps
    tag_IC_IREJCT = -1

! <<<<< LINEAR-MATRIX integration scheme <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
#endif

#ifdef INT_CASHKARP
! >>>>> CASH-KARP RK integration scheme >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                                              
  ! calling integrator                                                        
    CALL rkckintegrate(ISOC, &                                          
                       0.0_dp, 1.0_dp, 1.0E-7_dp, &                           
                       1.0_dp/DBLE(nstep), 0.0_dp, &                          
                       nok, nbad)                                             
                                                                              
  ! run-control parameters                                                    
    tag_IC_ISTEP  = nok          ! # of successful steps made
    tag_IC_IREJCT = nbad         ! # of rejected steps
                                                                              
! <<<<< CASH-KARP RK integration scheme <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
#endif

  ! ----- finishing -----

  ! scaling tracers: atoms to molecules
  ! abundant
    ISOC(:,1) = I%A(:,1)
  ! rare
    DO k = 2, NTCISO
      ISOC(:,k) = I%R(:,k) * QTCATOM(:)
    ENDDO

! for benchmarking
! #ifdef KIE
    ! necessary for KIE
    CALL tag_IC_correct2reg(C)
! #endif

  ! CALL tag_IC_correct2reg(C)
  ! CALL tag_IC_calctotals(C)
  ! CALL tag_IC_calcdeltas

  ! estimating ave # of species "rejected" in derivative calculations
    tag_IC_NREJCT = tag_IC_NREJCT / tag_IC_NDEREV

#ifdef DEBUG
    print *,'tag_IC_integrate: passed, derev: ',tag_IC_NDEREV, &
                                    ', steps: ', tag_IC_ISTEP, &
                                    ', i-rej: ', tag_IC_IREJCT, &
                                    ', n-rej: ', tag_IC_NREJCT
#endif 

  CONTAINS

  ! ----------------------------------------------------------------------------

    SUBROUTINE ifracs_atom(AC,AF)

    ! returns atomic content fractions

      IMPLICIT NONE

    ! in: atomic content
      TYPE (TCOMP), INTENT(INOUT) :: AC
    ! out: atomic fractions
      TYPE (TCOMP), INTENT(INOUT) :: AF

    ! getting the fractions of isotopologues
      DO n = 1, NTCSPEC
        tot = SUM(AC%A(n,:))+SUM(AC%R(n,:))              ! gettting total
#ifdef OPT_LOW_FILTER
        IF (tot .LT. THRES_LOW) THEN
#else
        IF (tot .EQ. 0.0_dp) THEN
#endif
          AF%A(n,:) = 0.0_dp
          AF%R(n,:) = 0.0_dp
          tag_IC_NREJCT = tag_IC_NREJCT + 1
        ELSE
          AF%A(n,:) = AC%A(n,:) / tot
          AF%R(n,:) = AC%R(n,:) / tot
        ENDIF
      ENDDO

    END SUBROUTINE ifracs_atom

  ! ----------------------------------------------------------------------------

    SUBROUTINE iderivs_atom(C,D,F)

    ! returns atomic content derivative
    ! exact kinetic solution
    ! using either jacobian (MATMUL) or sparse equivalent

      IMPLICIT NONE

    ! in: atomic content
      TYPE (TCOMP), INTENT(INOUT) :: C

    ! out: atomic content derivative
      TYPE (TCOMP), INTENT(INOUT) :: D

    ! fractions calculated on the way
      TYPE (TCOMP), INTENT(INOUT) :: F

    ! updating atomic fractions   [F in the head of integrate]
      CALL ifracs_atom(C,F)

    ! calculating regular transfer derivative
#ifdef INT_USEJAC
    ! using full jacobian algebra

    ! minor isotopologues: kinetic transfer { + isotope exchange }
      DO k = 2, NTCISO
      ! rare in minor
        D%R(:,k) = ( MATMUL(J(:,:,k),F%R(:,k)) )
      ! abundant in minor
        D%A(:,k) = ( MATMUL(J(:,:,k),F%A(:,k)) )
      ENDDO

    ! abundant isotopologues
      D%A(:,1) = MATMUL(J(:,:,1),F%A(:,1))
#else
    ! using sparse jacobian algebra
    
    ! calculating 12C 13C isotopologues derivatives

    ! major isotopologues

    ! ===== tag_IC:        D%A(tag_IC_#,1) <- F%A(tag_IC_$,1) * ~ + ... ) =====

      ! ----- CH4 -----  WARN: indicated as fixed species
       D%A(tag_IC_CH4,1) =   &
        + F%A(tag_IC_CH4,1) * flow(CH4_sink)  &
        + F%A(tag_IC_C3H6,1) * flow(C3H6_CH4)

      ! ----- CH3OH -----
       D%A(tag_IC_CH3OH,1) =   &
        + F%A(tag_IC_CH3OH,1) * flow(CH3OH_sink)  &
        + F%A(tag_IC_CH3O2,1) * flow(CH3O2_CH3OH)  &
        + F%A(tag_IC_C3H6,1) * flow(C3H6_CH3OH)  &
        + F%A(tag_IC_ISO2,1) * flow(ISO2_CH3OH)

      ! ----- CH3O2 -----
       D%A(tag_IC_CH3O2,1) =   &
        + F%A(tag_IC_CH3O2,1) * flow(CH3O2_sink)  &
        + F%A(tag_IC_CH4,1) * flow(CH4_CH3O2)  &
        + F%A(tag_IC_CH3OOH,1) * flow(CH3OOH_CH3O2)  &
        + F%A(tag_IC_CH3CO2H,1) * flow(CH3CO2H_CH3O2)  &
        + F%A(tag_IC_CH3CO3,1) * flow(CH3CO3_CH3O2)  &
        + F%A(tag_IC_C2H2,1) * flow(C2H2_CH3O2)  &
        + F%A(tag_IC_C3H6,1) * flow(C3H6_CH3O2)  &
        + F%A(tag_IC_C5H8,1) * flow(C5H8_CH3O2)  &
        + F%A(tag_IC_DMSO,1) * flow(DMSO_CH3O2)  &
        + F%A(tag_IC_CH3SO2,1) * flow(CH3SO2_CH3O2)  &
        + F%A(tag_IC_CH3CHO,1) * flow(CH3CHO_CH3O2)  &
        + F%A(tag_IC_CH3CO3H,1) * flow(CH3CO3H_CH3O2)  &
        + F%A(tag_IC_PAN,1) * flow(PAN_CH3O2)  &
        + F%A(tag_IC_CH3COCH3,1) * flow(CH3COCH3_CH3O2)  &
        + F%A(tag_IC_CH3Cl,1) * flow(CH3Cl_CH3O2)  &
        + F%A(tag_IC_CH3Br,1) * flow(CH3Br_CH3O2)

      ! ----- CH3OOH -----
       D%A(tag_IC_CH3OOH,1) =   &
        + F%A(tag_IC_CH3OOH,1) * flow(CH3OOH_sink)  &
        + F%A(tag_IC_CH3O2,1) * flow(CH3O2_CH3OOH)

      ! ----- HCHO -----
       D%A(tag_IC_HCHO,1) =   &
        + F%A(tag_IC_HCHO,1) * flow(HCHO_sink)  &
        + F%A(tag_IC_CH4,1) * flow(CH4_HCHO)  &
        + F%A(tag_IC_CH3OH,1) * flow(CH3OH_HCHO)  &
        + F%A(tag_IC_CH3O2,1) * flow(CH3O2_HCHO)  &
        + F%A(tag_IC_CH3OOH,1) * flow(CH3OOH_HCHO)  &
        + F%A(tag_IC_C2H4,1) * flow(C2H4_HCHO)  &
        + F%A(tag_IC_NACA,1) * flow(NACA_HCHO)  &
        + F%A(tag_IC_PAN,1) * flow(PAN_HCHO)  &
        + F%A(tag_IC_C3H6,1) * flow(C3H6_HCHO)  &
        + F%A(tag_IC_LHOC3H6O2,1) * flow(LHOC3H6O2_HCHO)  &
        + F%A(tag_IC_CH3COCH2O2,1) * flow(CH3COCH2O2_HCHO)  &
        + F%A(tag_IC_MVKO2,1) * flow(MVKO2_HCHO)  &
        + F%A(tag_IC_C5H8,1) * flow(C5H8_HCHO)  &
        + F%A(tag_IC_ISO2,1) * flow(ISO2_HCHO)  &
        + F%A(tag_IC_DMS,1) * flow(DMS_HCHO)  &
        + F%A(tag_IC_DMSO,1) * flow(DMSO_HCHO)  &
        + F%A(tag_IC_ACETOL,1) * flow(ACETOL_HCHO)  &
        + F%A(tag_IC_MVK,1) * flow(MVK_HCHO)  &
        + F%A(tag_IC_MVKOOH,1) * flow(MVKOOH_HCHO)  &
        + F%A(tag_IC_ISOOH,1) * flow(ISOOH_HCHO)  &
        + F%A(tag_IC_ISON,1) * flow(ISON_HCHO)

      ! ----- CO -----
       D%A(tag_IC_CO,1) =   &
        + F%A(tag_IC_CO,1) * flow(CO_sink)  &
        + F%A(tag_IC_HCHO,1) * flow(HCHO_CO)  &
        + F%A(tag_IC_C2H4,1) * flow(C2H4_CO)  &
        + F%A(tag_IC_NACA,1) * flow(NACA_CO)  &
        + F%A(tag_IC_C3H6,1) * flow(C3H6_CO)  &
        + F%A(tag_IC_MGLYOX,1) * flow(MGLYOX_CO)  &
        + F%A(tag_IC_MVK,1) * flow(MVK_CO)  &
        + F%A(tag_IC_MVKO2,1) * flow(MVKO2_CO)  &
        + F%A(tag_IC_C5H8,1) * flow(C5H8_CO)  &
        + F%A(tag_IC_CO2,1) * flow(CO2_CO)  &
        + F%A(tag_IC_CH4,1) * flow(CH4_CO)  &
        + F%A(tag_IC_CH3CHO,1) * flow(CH3CHO_CO)  &
        + F%A(tag_IC_MVKOOH,1) * flow(MVKOOH_CO)

      ! ----- HCOOH -----
       D%A(tag_IC_HCOOH,1) =   &
        + F%A(tag_IC_HCOOH,1) * flow(HCOOH_sink)  &
        + F%A(tag_IC_C2H4,1) * flow(C2H4_HCOOH)  &
        + F%A(tag_IC_C3H6,1) * flow(C3H6_HCOOH)  &
        + F%A(tag_IC_MVK,1) * flow(MVK_HCOOH)  &
        + F%A(tag_IC_C5H8,1) * flow(C5H8_HCOOH)

      ! ----- CO2 -----
       D%A(tag_IC_CO2,1) =   &
        + F%A(tag_IC_CO2,1) * flow(CO2_sink)  &
        + F%A(tag_IC_CO,1) * flow(CO_CO2)  &
        + F%A(tag_IC_CH3CO2H,1) * flow(CH3CO2H_CO2)  &
        + F%A(tag_IC_CH3CO3,1) * flow(CH3CO3_CO2)  &
        + F%A(tag_IC_PAN,1) * flow(PAN_CO2)

      ! ----- C2H6 -----
       D%A(tag_IC_C2H6,1) =   &
        + F%A(tag_IC_C2H6,1) * flow(C2H6_sink)

      ! ----- C2H4 -----
       D%A(tag_IC_C2H4,1) =   &
        + F%A(tag_IC_C2H4,1) * flow(C2H4_sink)

      ! ----- C2H2 -----
       D%A(tag_IC_C2H2,1) =   &
        + F%A(tag_IC_C2H2,1) * flow(C2H2_sink)

      ! ----- C2H5O2 -----
       D%A(tag_IC_C2H5O2,1) =   &
        + F%A(tag_IC_C2H5O2,1) * flow(C2H5O2_sink)  &
        + F%A(tag_IC_C2H6,1) * flow(C2H6_C2H5O2)  &
        + F%A(tag_IC_C2H5OOH,1) * flow(C2H5OOH_C2H5O2)  &
        + F%A(tag_IC_C3H8,1) * flow(C3H8_C2H5O2)  &
        + F%A(tag_IC_C3H6,1) * flow(C3H6_C2H5O2)  &
        + F%A(tag_IC_LC4H9O2,1) * flow(LC4H9O2_C2H5O2)  &
        + F%A(tag_IC_LC4H9OOH,1) * flow(LC4H9OOH_C2H5O2)  &
        + F%A(tag_IC_MEK,1) * flow(MEK_C2H5O2)  &
        + F%A(tag_IC_LC4H9NO3,1) * flow(LC4H9NO3_C2H5O2)

      ! ----- C2H5OOH -----
       D%A(tag_IC_C2H5OOH,1) =   &
        + F%A(tag_IC_C2H5OOH,1) * flow(C2H5OOH_sink)  &
        + F%A(tag_IC_C2H5O2,1) * flow(C2H5O2_C2H5OOH)

      ! ----- CH3CHO -----
       D%A(tag_IC_CH3CHO,1) =   &
        + F%A(tag_IC_CH3CHO,1) * flow(CH3CHO_sink)  &
        + F%A(tag_IC_C2H5O2,1) * flow(C2H5O2_CH3CHO)  &
        + F%A(tag_IC_C2H5OOH,1) * flow(C2H5OOH_CH3CHO)  &
        + F%A(tag_IC_C3H6,1) * flow(C3H6_CH3CHO)  &
        + F%A(tag_IC_LHOC3H6O2,1) * flow(LHOC3H6O2_CH3CHO)  &
        + F%A(tag_IC_LC4H9O2,1) * flow(LC4H9O2_CH3CHO)  &
        + F%A(tag_IC_LMEKO2,1) * flow(LMEKO2_CH3CHO)  &
        + F%A(tag_IC_LC4H9OOH,1) * flow(LC4H9OOH_CH3CHO)  &
        + F%A(tag_IC_LMEKOOH,1) * flow(LMEKOOH_CH3CHO)  &
        + F%A(tag_IC_LC4H9NO3,1) * flow(LC4H9NO3_CH3CHO)

      ! ----- CH3CO2H -----
       D%A(tag_IC_CH3CO2H,1) =   &
        + F%A(tag_IC_CH3CO2H,1) * flow(CH3CO2H_sink)  &
        + F%A(tag_IC_CH3CO3,1) * flow(CH3CO3_CH3CO2H)

      ! ----- CH3CO3 -----
       D%A(tag_IC_CH3CO3,1) =   &
        + F%A(tag_IC_CH3CO3,1) * flow(CH3CO3_sink)  &
        + F%A(tag_IC_CH3CHO,1) * flow(CH3CHO_CH3CO3)  &
        + F%A(tag_IC_CH3CO3H,1) * flow(CH3CO3H_CH3CO3)  &
        + F%A(tag_IC_PAN,1) * flow(PAN_CH3CO3)  &
        + F%A(tag_IC_C3H6,1) * flow(C3H6_CH3CO3)  &
        + F%A(tag_IC_CH3COCH2O2,1) * flow(CH3COCH2O2_CH3CO3)  &
        + F%A(tag_IC_MGLYOX,1) * flow(MGLYOX_CH3CO3)  &
        + F%A(tag_IC_MVK,1) * flow(MVK_CH3CO3)  &
        + F%A(tag_IC_MVKO2,1) * flow(MVKO2_CH3CO3)  &
        + F%A(tag_IC_LMEKO2,1) * flow(LMEKO2_CH3CO3)  &
        + F%A(tag_IC_C5H8,1) * flow(C5H8_CH3CO3)  &
        + F%A(tag_IC_CH3COCH3,1) * flow(CH3COCH3_CH3CO3)  &
        + F%A(tag_IC_ACETOL,1) * flow(ACETOL_CH3CO3)  &
        + F%A(tag_IC_HYPERACET,1) * flow(HYPERACET_CH3CO3)  &
        + F%A(tag_IC_MVKOOH,1) * flow(MVKOOH_CH3CO3)  &
        + F%A(tag_IC_MEK,1) * flow(MEK_CH3CO3)  &
        + F%A(tag_IC_LMEKOOH,1) * flow(LMEKOOH_CH3CO3)  &
        + F%A(tag_IC_BIACET,1) * flow(BIACET_CH3CO3)

      ! ----- CH3CO3H -----
       D%A(tag_IC_CH3CO3H,1) =   &
        + F%A(tag_IC_CH3CO3H,1) * flow(CH3CO3H_sink)  &
        + F%A(tag_IC_CH3CO3,1) * flow(CH3CO3_CH3CO3H)

      ! ----- NACA -----
       D%A(tag_IC_NACA,1) =   &
        + F%A(tag_IC_NACA,1) * flow(NACA_sink)  &
        + F%A(tag_IC_ISON,1) * flow(ISON_NACA)

      ! ----- PAN -----
       D%A(tag_IC_PAN,1) =   &
        + F%A(tag_IC_PAN,1) * flow(PAN_sink)  &
        + F%A(tag_IC_CH3CO3,1) * flow(CH3CO3_PAN)

      ! ----- C3H8 -----
       D%A(tag_IC_C3H8,1) =   &
        + F%A(tag_IC_C3H8,1) * flow(C3H8_sink)

      ! ----- C3H6 -----
       D%A(tag_IC_C3H6,1) =   &
        + F%A(tag_IC_C3H6,1) * flow(C3H6_sink)

      ! ----- IC3H7O2 -----
       D%A(tag_IC_IC3H7O2,1) =   &
        + F%A(tag_IC_IC3H7O2,1) * flow(IC3H7O2_sink)  &
        + F%A(tag_IC_C3H8,1) * flow(C3H8_IC3H7O2)  &
        + F%A(tag_IC_IC3H7OOH,1) * flow(IC3H7OOH_IC3H7O2)

      ! ----- IC3H7OOH -----
       D%A(tag_IC_IC3H7OOH,1) =   &
        + F%A(tag_IC_IC3H7OOH,1) * flow(IC3H7OOH_sink)  &
        + F%A(tag_IC_IC3H7O2,1) * flow(IC3H7O2_IC3H7OOH)

      ! ----- LHOC3H6O2 -----
       D%A(tag_IC_LHOC3H6O2,1) =   &
        + F%A(tag_IC_LHOC3H6O2,1) * flow(LHOC3H6O2_sink)  &
        + F%A(tag_IC_C2H4,1) * flow(C2H4_LHOC3H6O2)  &
        + F%A(tag_IC_C3H6,1) * flow(C3H6_LHOC3H6O2)  &
        + F%A(tag_IC_LHOC3H6OOH,1) * flow(LHOC3H6OOH_LHOC3H6O2)

      ! ----- LHOC3H6OOH -----
       D%A(tag_IC_LHOC3H6OOH,1) =   &
        + F%A(tag_IC_LHOC3H6OOH,1) * flow(LHOC3H6OOH_sink)  &
        + F%A(tag_IC_LHOC3H6O2,1) * flow(LHOC3H6O2_LHOC3H6OOH)

      ! ----- CH3COCH3 -----
       D%A(tag_IC_CH3COCH3,1) =   &
        + F%A(tag_IC_CH3COCH3,1) * flow(CH3COCH3_sink)  &
        + F%A(tag_IC_IC3H7O2,1) * flow(IC3H7O2_CH3COCH3)  &
        + F%A(tag_IC_IC3H7OOH,1) * flow(IC3H7OOH_CH3COCH3)  &
        + F%A(tag_IC_IC3H7NO3,1) * flow(IC3H7NO3_CH3COCH3)

      ! ----- CH3COCH2O2 -----
       D%A(tag_IC_CH3COCH2O2,1) =   &
        + F%A(tag_IC_CH3COCH2O2,1) * flow(CH3COCH2O2_sink)  &
        + F%A(tag_IC_CH3COCH3,1) * flow(CH3COCH3_CH3COCH2O2)  &
        + F%A(tag_IC_HYPERACET,1) * flow(HYPERACET_CH3COCH2O2)

      ! ----- HYPERACET -----
       D%A(tag_IC_HYPERACET,1) =   &
        + F%A(tag_IC_HYPERACET,1) * flow(HYPERACET_sink)  &
        + F%A(tag_IC_CH3COCH2O2,1) * flow(CH3COCH2O2_HYPERACET)

      ! ----- ACETOL -----
       D%A(tag_IC_ACETOL,1) =   &
        + F%A(tag_IC_ACETOL,1) * flow(ACETOL_sink)  &
        + F%A(tag_IC_LHOC3H6OOH,1) * flow(LHOC3H6OOH_ACETOL)  &
        + F%A(tag_IC_CH3COCH2O2,1) * flow(CH3COCH2O2_ACETOL)  &
        + F%A(tag_IC_MPAN,1) * flow(MPAN_ACETOL)  &
        + F%A(tag_IC_MVKO2,1) * flow(MVKO2_ACETOL)  &
        + F%A(tag_IC_ISO2,1) * flow(ISO2_ACETOL)  &
        + F%A(tag_IC_CH3O2,1) * flow(CH3O2_ACETOL)  &
        + F%A(tag_IC_ISON,1) * flow(ISON_ACETOL)  &
        + F%A(tag_IC_MVKOOH,1) * flow(MVKOOH_ACETOL)

      ! ----- MGLYOX -----
       D%A(tag_IC_MGLYOX,1) =   &
        + F%A(tag_IC_MGLYOX,1) * flow(MGLYOX_sink)  &
        + F%A(tag_IC_C3H6,1) * flow(C3H6_MGLYOX)  &
        + F%A(tag_IC_CH3COCH2O2,1) * flow(CH3COCH2O2_MGLYOX)  &
        + F%A(tag_IC_HYPERACET,1) * flow(HYPERACET_MGLYOX)  &
        + F%A(tag_IC_ACETOL,1) * flow(ACETOL_MGLYOX)  &
        + F%A(tag_IC_MVK,1) * flow(MVK_MGLYOX)  &
        + F%A(tag_IC_MVKO2,1) * flow(MVKO2_MGLYOX)  &
        + F%A(tag_IC_ISO2,1) * flow(ISO2_MGLYOX)  &
        + F%A(tag_IC_CH3O2,1) * flow(CH3O2_MGLYOX)  &
        + F%A(tag_IC_MVKOOH,1) * flow(MVKOOH_MGLYOX)

      ! ----- MPAN -----
       D%A(tag_IC_MPAN,1) =   &
        + F%A(tag_IC_MPAN,1) * flow(MPAN_sink)  &
        + F%A(tag_IC_MVKO2,1) * flow(MVKO2_MPAN)

      ! ----- IC3H7NO3 -----
       D%A(tag_IC_IC3H7NO3,1) =   &
        + F%A(tag_IC_IC3H7NO3,1) * flow(IC3H7NO3_sink)  &
        + F%A(tag_IC_IC3H7O2,1) * flow(IC3H7O2_IC3H7NO3)

      ! ----- NC4H10 -----
       D%A(tag_IC_NC4H10,1) =   &
        + F%A(tag_IC_NC4H10,1) * flow(NC4H10_sink)

      ! ----- LC4H9O2 -----
       D%A(tag_IC_LC4H9O2,1) =   &
        + F%A(tag_IC_LC4H9O2,1) * flow(LC4H9O2_sink)  &
        + F%A(tag_IC_NC4H10,1) * flow(NC4H10_LC4H9O2)  &
        + F%A(tag_IC_LC4H9OOH,1) * flow(LC4H9OOH_LC4H9O2)

      ! ----- LC4H9OOH -----
       D%A(tag_IC_LC4H9OOH,1) =   &
        + F%A(tag_IC_LC4H9OOH,1) * flow(LC4H9OOH_sink)  &
        + F%A(tag_IC_LC4H9O2,1) * flow(LC4H9O2_LC4H9OOH)

      ! ----- MVK -----
       D%A(tag_IC_MVK,1) =   &
        + F%A(tag_IC_MVK,1) * flow(MVK_sink)  &
        + F%A(tag_IC_C5H8,1) * flow(C5H8_MVK)  &
        + F%A(tag_IC_ISO2,1) * flow(ISO2_MVK)  &
        + F%A(tag_IC_CH3O2,1) * flow(CH3O2_MVK)  &
        + F%A(tag_IC_ISOOH,1) * flow(ISOOH_MVK)  &
        + F%A(tag_IC_ISON,1) * flow(ISON_MVK)

      ! ----- MVKO2 -----
       D%A(tag_IC_MVKO2,1) =   &
        + F%A(tag_IC_MVKO2,1) * flow(MVKO2_sink)  &
        + F%A(tag_IC_MPAN,1) * flow(MPAN_MVKO2)  &
        + F%A(tag_IC_MVK,1) * flow(MVK_MVKO2)  &
        + F%A(tag_IC_MVKOOH,1) * flow(MVKOOH_MVKO2)  &
        + F%A(tag_IC_C5H8,1) * flow(C5H8_MVKO2)

      ! ----- MVKOOH -----
       D%A(tag_IC_MVKOOH,1) =   &
        + F%A(tag_IC_MVKOOH,1) * flow(MVKOOH_sink)  &
        + F%A(tag_IC_MVKO2,1) * flow(MVKO2_MVKOOH)

      ! ----- MEK -----
       D%A(tag_IC_MEK,1) =   &
        + F%A(tag_IC_MEK,1) * flow(MEK_sink)  &
        + F%A(tag_IC_LC4H9O2,1) * flow(LC4H9O2_MEK)  &
        + F%A(tag_IC_LC4H9OOH,1) * flow(LC4H9OOH_MEK)  &
        + F%A(tag_IC_LC4H9NO3,1) * flow(LC4H9NO3_MEK)

      ! ----- LMEKO2 -----
       D%A(tag_IC_LMEKO2,1) =   &
        + F%A(tag_IC_LMEKO2,1) * flow(LMEKO2_sink)  &
        + F%A(tag_IC_MEK,1) * flow(MEK_LMEKO2)  &
        + F%A(tag_IC_LMEKOOH,1) * flow(LMEKOOH_LMEKO2)

      ! ----- LMEKOOH -----
       D%A(tag_IC_LMEKOOH,1) =   &
        + F%A(tag_IC_LMEKOOH,1) * flow(LMEKOOH_sink)  &
        + F%A(tag_IC_LMEKO2,1) * flow(LMEKO2_LMEKOOH)

      ! ----- BIACET -----
       D%A(tag_IC_BIACET,1) =   &
        + F%A(tag_IC_BIACET,1) * flow(BIACET_sink)  &
        + F%A(tag_IC_LMEKOOH,1) * flow(LMEKOOH_BIACET)

      ! ----- LC4H9NO3 -----
       D%A(tag_IC_LC4H9NO3,1) =   &
        + F%A(tag_IC_LC4H9NO3,1) * flow(LC4H9NO3_sink)  &
        + F%A(tag_IC_C3H6,1) * flow(C3H6_LC4H9NO3)  &
        + F%A(tag_IC_LHOC3H6O2,1) * flow(LHOC3H6O2_LC4H9NO3)  &
        + F%A(tag_IC_LC4H9O2,1) * flow(LC4H9O2_LC4H9NO3)  &
        + F%A(tag_IC_LMEKO2,1) * flow(LMEKO2_LC4H9NO3)

      ! ----- C5H8 -----
       D%A(tag_IC_C5H8,1) =   &
        + F%A(tag_IC_C5H8,1) * flow(C5H8_sink)

      ! ----- ISO2 -----
       D%A(tag_IC_ISO2,1) =   &
        + F%A(tag_IC_ISO2,1) * flow(ISO2_sink)  &
        + F%A(tag_IC_C5H8,1) * flow(C5H8_ISO2)

      ! ----- ISOOH -----
       D%A(tag_IC_ISOOH,1) =   &
        + F%A(tag_IC_ISOOH,1) * flow(ISOOH_sink)  &
        + F%A(tag_IC_ISO2,1) * flow(ISO2_ISOOH)

      ! ----- ISON -----
       D%A(tag_IC_ISON,1) =   &
        + F%A(tag_IC_ISON,1) * flow(ISON_sink)  &
        + F%A(tag_IC_C5H8,1) * flow(C5H8_ISON)  &
        + F%A(tag_IC_ISO2,1) * flow(ISO2_ISON)

      ! ----- CCl4 -----
       D%A(tag_IC_CCl4,1) =   &
        + F%A(tag_IC_CCl4,1) * flow(CCl4_sink)

      ! ----- CH3Cl -----
       D%A(tag_IC_CH3Cl,1) =   &
        + F%A(tag_IC_CH3Cl,1) * flow(CH3Cl_sink)

      ! ----- CH3CCl3 -----
       D%A(tag_IC_CH3CCl3,1) =   &
        + F%A(tag_IC_CH3CCl3,1) * flow(CH3CCl3_sink)

      ! ----- CF2Cl2 -----
       D%A(tag_IC_CF2Cl2,1) =   &
        + F%A(tag_IC_CF2Cl2,1) * flow(CF2Cl2_sink)

      ! ----- CFCl3 -----
       D%A(tag_IC_CFCl3,1) =   &
        + F%A(tag_IC_CFCl3,1) * flow(CFCl3_sink)

      ! ----- CH3Br -----
       D%A(tag_IC_CH3Br,1) =   &
        + F%A(tag_IC_CH3Br,1) * flow(CH3Br_sink)

      ! ----- CF3Br -----
       D%A(tag_IC_CF3Br,1) =   &
        + F%A(tag_IC_CF3Br,1) * flow(CF3Br_sink)

      ! ----- CF2ClBr -----
       D%A(tag_IC_CF2ClBr,1) =   &
        + F%A(tag_IC_CF2ClBr,1) * flow(CF2ClBr_sink)

      ! ----- CH3SO3H -----
       D%A(tag_IC_CH3SO3H,1) =   &
        + F%A(tag_IC_DMSO,1) * flow(DMSO_CH3SO3H)  &
        + F%A(tag_IC_CH3SO3,1) * flow(CH3SO3_CH3SO3H)

      ! ----- DMS -----
       D%A(tag_IC_DMS,1) =   &
        + F%A(tag_IC_DMS,1) * flow(DMS_sink)

      ! ----- DMSO -----
       D%A(tag_IC_DMSO,1) =   &
        + F%A(tag_IC_DMSO,1) * flow(DMSO_sink)  &
        + F%A(tag_IC_DMS,1) * flow(DMS_DMSO)

      ! ----- CH3SO2 -----
       D%A(tag_IC_CH3SO2,1) =   &
        + F%A(tag_IC_CH3SO2,1) * flow(CH3SO2_sink)  &
        + F%A(tag_IC_DMS,1) * flow(DMS_CH3SO2)

      ! ----- CH3SO3 -----
       D%A(tag_IC_CH3SO3,1) =   &
        + F%A(tag_IC_CH3SO3,1) * flow(CH3SO3_sink)  &
        + F%A(tag_IC_CH3SO2,1) * flow(CH3SO2_CH3SO3)

    ! minor isotopologues: rare atom transfer

    ! ===== tag_IC:        D%R(tag_IC_#,2) <- F%R(tag_IC_$,2) * ~ + ... ) =====

      ! ----- CH4 -----  WARN: indicated as fixed species
       D%R(tag_IC_CH4,2) =   &
        + F%R(tag_IC_CH4,2) * ( ( flow(CH4_sink) + flow(KIE_G4100_I13CH4) ) + &
                                 flow(KIE_G4101_I13CH4) )  &
        + F%R(tag_IC_C3H6,2) * flow(C3H6_CH4)

      ! ----- CH3OH -----
       D%R(tag_IC_CH3OH,2) =   &
        + F%R(tag_IC_CH3OH,2) * flow(CH3OH_sink)  &
        + F%R(tag_IC_CH3O2,2) * flow(CH3O2_CH3OH)  &
        + F%R(tag_IC_C3H6,2) * flow(C3H6_CH3OH)  &
        + F%R(tag_IC_ISO2,2) * flow(ISO2_CH3OH)

      ! ----- CH3O2 -----
       D%R(tag_IC_CH3O2,2) =   &
        + F%R(tag_IC_CH3O2,2) * flow(CH3O2_sink)  &
        + F%R(tag_IC_CH4, &
                                 2) * ( ( flow(CH4_CH3O2) - 0.75 * flow(KIE_G4100_I13CH4) ) - flow(KIE_G4101_I13CH4) )  &
        + F%R(tag_IC_CH3OOH,2) * flow(CH3OOH_CH3O2)  &
        + F%R(tag_IC_CH3CO2H,2) * flow(CH3CO2H_CH3O2)  &
        + F%R(tag_IC_CH3CO3,2) * flow(CH3CO3_CH3O2)  &
        + F%R(tag_IC_C2H2,2) * flow(C2H2_CH3O2)  &
        + F%R(tag_IC_C3H6,2) * flow(C3H6_CH3O2)  &
        + F%R(tag_IC_C5H8,2) * flow(C5H8_CH3O2)  &
        + F%R(tag_IC_DMSO,2) * flow(DMSO_CH3O2)  &
        + F%R(tag_IC_CH3SO2,2) * flow(CH3SO2_CH3O2)  &
        + F%R(tag_IC_CH3CHO,2) * flow(CH3CHO_CH3O2)  &
        + F%R(tag_IC_CH3CO3H,2) * flow(CH3CO3H_CH3O2)  &
        + F%R(tag_IC_PAN,2) * flow(PAN_CH3O2)  &
        + F%R(tag_IC_CH3COCH3,2) * flow(CH3COCH3_CH3O2)  &
        + F%R(tag_IC_CH3Cl,2) * flow(CH3Cl_CH3O2)  &
        + F%R(tag_IC_CH3Br,2) * flow(CH3Br_CH3O2)

      ! ----- CH3OOH -----
       D%R(tag_IC_CH3OOH,2) =   &
        + F%R(tag_IC_CH3OOH,2) * flow(CH3OOH_sink)  &
        + F%R(tag_IC_CH3O2,2) * flow(CH3O2_CH3OOH)

      ! ----- HCHO -----
       D%R(tag_IC_HCHO,2) =   &
        + F%R(tag_IC_HCHO,2) * flow(HCHO_sink)  &
        + F%R(tag_IC_CH4, &
                                 2) * ( flow(CH4_HCHO) - 0.25 * flow(KIE_G4100_I13CH4) )  &
        + F%R(tag_IC_CH3OH,2) * flow(CH3OH_HCHO)  &
        + F%R(tag_IC_CH3O2,2) * flow(CH3O2_HCHO)  &
        + F%R(tag_IC_CH3OOH,2) * flow(CH3OOH_HCHO)  &
        + F%R(tag_IC_C2H4,2) * flow(C2H4_HCHO)  &
        + F%R(tag_IC_NACA,2) * flow(NACA_HCHO)  &
        + F%R(tag_IC_PAN,2) * flow(PAN_HCHO)  &
        + F%R(tag_IC_C3H6,2) * flow(C3H6_HCHO)  &
        + F%R(tag_IC_LHOC3H6O2,2) * flow(LHOC3H6O2_HCHO)  &
        + F%R(tag_IC_CH3COCH2O2,2) * flow(CH3COCH2O2_HCHO)  &
        + F%R(tag_IC_MVKO2,2) * flow(MVKO2_HCHO)  &
        + F%R(tag_IC_C5H8,2) * flow(C5H8_HCHO)  &
        + F%R(tag_IC_ISO2,2) * flow(ISO2_HCHO)  &
        + F%R(tag_IC_DMS,2) * flow(DMS_HCHO)  &
        + F%R(tag_IC_DMSO,2) * flow(DMSO_HCHO)  &
        + F%R(tag_IC_ACETOL,2) * flow(ACETOL_HCHO)  &
        + F%R(tag_IC_MVK,2) * flow(MVK_HCHO)  &
        + F%R(tag_IC_MVKOOH,2) * flow(MVKOOH_HCHO)  &
        + F%R(tag_IC_ISOOH,2) * flow(ISOOH_HCHO)  &
        + F%R(tag_IC_ISON,2) * flow(ISON_HCHO)

      ! ----- CO -----
       D%R(tag_IC_CO,2) =   &
        + F%R(tag_IC_CO,2) * ( flow(CO_sink) + flow(KIE_G4110_I13CO) )  &
        + F%R(tag_IC_HCHO,2) * flow(HCHO_CO)  &
        + F%R(tag_IC_C2H4,2) * flow(C2H4_CO)  &
        + F%R(tag_IC_NACA,2) * flow(NACA_CO)  &
        + F%R(tag_IC_C3H6,2) * flow(C3H6_CO)  &
        + F%R(tag_IC_MGLYOX,2) * flow(MGLYOX_CO)  &
        + F%R(tag_IC_MVK,2) * flow(MVK_CO)  &
        + F%R(tag_IC_MVKO2,2) * flow(MVKO2_CO)  &
        + F%R(tag_IC_C5H8,2) * flow(C5H8_CO)  &
        + F%R(tag_IC_CO2,2) * flow(CO2_CO)  &
        + F%R(tag_IC_CH4,2) * flow(CH4_CO)  &
        + F%R(tag_IC_CH3CHO,2) * flow(CH3CHO_CO)  &
        + F%R(tag_IC_MVKOOH,2) * flow(MVKOOH_CO)

      ! ----- HCOOH -----
       D%R(tag_IC_HCOOH,2) =   &
        + F%R(tag_IC_HCOOH,2) * flow(HCOOH_sink)  &
        + F%R(tag_IC_C2H4,2) * flow(C2H4_HCOOH)  &
        + F%R(tag_IC_C3H6,2) * flow(C3H6_HCOOH)  &
        + F%R(tag_IC_MVK,2) * flow(MVK_HCOOH)  &
        + F%R(tag_IC_C5H8,2) * flow(C5H8_HCOOH)

      ! ----- CO2 -----
       D%R(tag_IC_CO2,2) =   &
        + F%R(tag_IC_CO2,2) * flow(CO2_sink)  &
        + F%R(tag_IC_CO,2) * ( flow(CO_CO2) - flow(KIE_G4110_I13CO) )  &
        + F%R(tag_IC_CH3CO2H,2) * flow(CH3CO2H_CO2)  &
        + F%R(tag_IC_CH3CO3,2) * flow(CH3CO3_CO2)  &
        + F%R(tag_IC_PAN,2) * flow(PAN_CO2)

      ! ----- C2H6 -----
       D%R(tag_IC_C2H6,2) =   &
        + F%R(tag_IC_C2H6,2) * flow(C2H6_sink)

      ! ----- C2H4 -----
       D%R(tag_IC_C2H4,2) =   &
        + F%R(tag_IC_C2H4,2) * flow(C2H4_sink)

      ! ----- C2H2 -----
       D%R(tag_IC_C2H2,2) =   &
        + F%R(tag_IC_C2H2,2) * flow(C2H2_sink)

      ! ----- C2H5O2 -----
       D%R(tag_IC_C2H5O2,2) =   &
        + F%R(tag_IC_C2H5O2,2) * flow(C2H5O2_sink)  &
        + F%R(tag_IC_C2H6,2) * flow(C2H6_C2H5O2)  &
        + F%R(tag_IC_C2H5OOH,2) * flow(C2H5OOH_C2H5O2)  &
        + F%R(tag_IC_C3H8,2) * flow(C3H8_C2H5O2)  &
        + F%R(tag_IC_C3H6,2) * flow(C3H6_C2H5O2)  &
        + F%R(tag_IC_LC4H9O2,2) * flow(LC4H9O2_C2H5O2)  &
        + F%R(tag_IC_LC4H9OOH,2) * flow(LC4H9OOH_C2H5O2)  &
        + F%R(tag_IC_MEK,2) * flow(MEK_C2H5O2)  &
        + F%R(tag_IC_LC4H9NO3,2) * flow(LC4H9NO3_C2H5O2)

      ! ----- C2H5OOH -----
       D%R(tag_IC_C2H5OOH,2) =   &
        + F%R(tag_IC_C2H5OOH,2) * flow(C2H5OOH_sink)  &
        + F%R(tag_IC_C2H5O2,2) * flow(C2H5O2_C2H5OOH)

      ! ----- CH3CHO -----
       D%R(tag_IC_CH3CHO,2) =   &
        + F%R(tag_IC_CH3CHO,2) * flow(CH3CHO_sink)  &
        + F%R(tag_IC_C2H5O2,2) * flow(C2H5O2_CH3CHO)  &
        + F%R(tag_IC_C2H5OOH,2) * flow(C2H5OOH_CH3CHO)  &
        + F%R(tag_IC_C3H6,2) * flow(C3H6_CH3CHO)  &
        + F%R(tag_IC_LHOC3H6O2,2) * flow(LHOC3H6O2_CH3CHO)  &
        + F%R(tag_IC_LC4H9O2,2) * flow(LC4H9O2_CH3CHO)  &
        + F%R(tag_IC_LMEKO2,2) * flow(LMEKO2_CH3CHO)  &
        + F%R(tag_IC_LC4H9OOH,2) * flow(LC4H9OOH_CH3CHO)  &
        + F%R(tag_IC_LMEKOOH,2) * flow(LMEKOOH_CH3CHO)  &
        + F%R(tag_IC_LC4H9NO3,2) * flow(LC4H9NO3_CH3CHO)

      ! ----- CH3CO2H -----
       D%R(tag_IC_CH3CO2H,2) =   &
        + F%R(tag_IC_CH3CO2H,2) * flow(CH3CO2H_sink)  &
        + F%R(tag_IC_CH3CO3,2) * flow(CH3CO3_CH3CO2H)

      ! ----- CH3CO3 -----
       D%R(tag_IC_CH3CO3,2) =   &
        + F%R(tag_IC_CH3CO3,2) * flow(CH3CO3_sink)  &
        + F%R(tag_IC_CH3CHO,2) * flow(CH3CHO_CH3CO3)  &
        + F%R(tag_IC_CH3CO3H,2) * flow(CH3CO3H_CH3CO3)  &
        + F%R(tag_IC_PAN,2) * flow(PAN_CH3CO3)  &
        + F%R(tag_IC_C3H6,2) * flow(C3H6_CH3CO3)  &
        + F%R(tag_IC_CH3COCH2O2,2) * flow(CH3COCH2O2_CH3CO3)  &
        + F%R(tag_IC_MGLYOX,2) * flow(MGLYOX_CH3CO3)  &
        + F%R(tag_IC_MVK,2) * flow(MVK_CH3CO3)  &
        + F%R(tag_IC_MVKO2,2) * flow(MVKO2_CH3CO3)  &
        + F%R(tag_IC_LMEKO2,2) * flow(LMEKO2_CH3CO3)  &
        + F%R(tag_IC_C5H8,2) * flow(C5H8_CH3CO3)  &
        + F%R(tag_IC_CH3COCH3,2) * flow(CH3COCH3_CH3CO3)  &
        + F%R(tag_IC_ACETOL,2) * flow(ACETOL_CH3CO3)  &
        + F%R(tag_IC_HYPERACET,2) * flow(HYPERACET_CH3CO3)  &
        + F%R(tag_IC_MVKOOH,2) * flow(MVKOOH_CH3CO3)  &
        + F%R(tag_IC_MEK,2) * flow(MEK_CH3CO3)  &
        + F%R(tag_IC_LMEKOOH,2) * flow(LMEKOOH_CH3CO3)  &
        + F%R(tag_IC_BIACET,2) * flow(BIACET_CH3CO3)

      ! ----- CH3CO3H -----
       D%R(tag_IC_CH3CO3H,2) =   &
        + F%R(tag_IC_CH3CO3H,2) * flow(CH3CO3H_sink)  &
        + F%R(tag_IC_CH3CO3,2) * flow(CH3CO3_CH3CO3H)

      ! ----- NACA -----
       D%R(tag_IC_NACA,2) =   &
        + F%R(tag_IC_NACA,2) * flow(NACA_sink)  &
        + F%R(tag_IC_ISON,2) * flow(ISON_NACA)

      ! ----- PAN -----
       D%R(tag_IC_PAN,2) =   &
        + F%R(tag_IC_PAN,2) * flow(PAN_sink)  &
        + F%R(tag_IC_CH3CO3,2) * flow(CH3CO3_PAN)

      ! ----- C3H8 -----
       D%R(tag_IC_C3H8,2) =   &
        + F%R(tag_IC_C3H8,2) * flow(C3H8_sink)

      ! ----- C3H6 -----
       D%R(tag_IC_C3H6,2) =   &
        + F%R(tag_IC_C3H6,2) * flow(C3H6_sink)

      ! ----- IC3H7O2 -----
       D%R(tag_IC_IC3H7O2,2) =   &
        + F%R(tag_IC_IC3H7O2,2) * flow(IC3H7O2_sink)  &
        + F%R(tag_IC_C3H8,2) * flow(C3H8_IC3H7O2)  &
        + F%R(tag_IC_IC3H7OOH,2) * flow(IC3H7OOH_IC3H7O2)

      ! ----- IC3H7OOH -----
       D%R(tag_IC_IC3H7OOH,2) =   &
        + F%R(tag_IC_IC3H7OOH,2) * flow(IC3H7OOH_sink)  &
        + F%R(tag_IC_IC3H7O2,2) * flow(IC3H7O2_IC3H7OOH)

      ! ----- LHOC3H6O2 -----
       D%R(tag_IC_LHOC3H6O2,2) =   &
        + F%R(tag_IC_LHOC3H6O2,2) * flow(LHOC3H6O2_sink)  &
        + F%R(tag_IC_C2H4,2) * flow(C2H4_LHOC3H6O2)  &
        + F%R(tag_IC_C3H6,2) * flow(C3H6_LHOC3H6O2)  &
        + F%R(tag_IC_LHOC3H6OOH,2) * flow(LHOC3H6OOH_LHOC3H6O2)

      ! ----- LHOC3H6OOH -----
       D%R(tag_IC_LHOC3H6OOH,2) =   &
        + F%R(tag_IC_LHOC3H6OOH,2) * flow(LHOC3H6OOH_sink)  &
        + F%R(tag_IC_LHOC3H6O2,2) * flow(LHOC3H6O2_LHOC3H6OOH)

      ! ----- CH3COCH3 -----
       D%R(tag_IC_CH3COCH3,2) =   &
        + F%R(tag_IC_CH3COCH3,2) * flow(CH3COCH3_sink)  &
        + F%R(tag_IC_IC3H7O2,2) * flow(IC3H7O2_CH3COCH3)  &
        + F%R(tag_IC_IC3H7OOH,2) * flow(IC3H7OOH_CH3COCH3)  &
        + F%R(tag_IC_IC3H7NO3,2) * flow(IC3H7NO3_CH3COCH3)

      ! ----- CH3COCH2O2 -----
       D%R(tag_IC_CH3COCH2O2,2) =   &
        + F%R(tag_IC_CH3COCH2O2,2) * flow(CH3COCH2O2_sink)  &
        + F%R(tag_IC_CH3COCH3,2) * flow(CH3COCH3_CH3COCH2O2)  &
        + F%R(tag_IC_HYPERACET,2) * flow(HYPERACET_CH3COCH2O2)

      ! ----- HYPERACET -----
       D%R(tag_IC_HYPERACET,2) =   &
        + F%R(tag_IC_HYPERACET,2) * flow(HYPERACET_sink)  &
        + F%R(tag_IC_CH3COCH2O2,2) * flow(CH3COCH2O2_HYPERACET)

      ! ----- ACETOL -----
       D%R(tag_IC_ACETOL,2) =   &
        + F%R(tag_IC_ACETOL,2) * flow(ACETOL_sink)  &
        + F%R(tag_IC_LHOC3H6OOH,2) * flow(LHOC3H6OOH_ACETOL)  &
        + F%R(tag_IC_CH3COCH2O2,2) * flow(CH3COCH2O2_ACETOL)  &
        + F%R(tag_IC_MPAN,2) * flow(MPAN_ACETOL)  &
        + F%R(tag_IC_MVKO2,2) * flow(MVKO2_ACETOL)  &
        + F%R(tag_IC_ISO2,2) * flow(ISO2_ACETOL)  &
        + F%R(tag_IC_CH3O2,2) * flow(CH3O2_ACETOL)  &
        + F%R(tag_IC_ISON,2) * flow(ISON_ACETOL)  &
        + F%R(tag_IC_MVKOOH,2) * flow(MVKOOH_ACETOL)

      ! ----- MGLYOX -----
       D%R(tag_IC_MGLYOX,2) =   &
        + F%R(tag_IC_MGLYOX,2) * flow(MGLYOX_sink)  &
        + F%R(tag_IC_C3H6,2) * flow(C3H6_MGLYOX)  &
        + F%R(tag_IC_CH3COCH2O2,2) * flow(CH3COCH2O2_MGLYOX)  &
        + F%R(tag_IC_HYPERACET,2) * flow(HYPERACET_MGLYOX)  &
        + F%R(tag_IC_ACETOL,2) * flow(ACETOL_MGLYOX)  &
        + F%R(tag_IC_MVK,2) * flow(MVK_MGLYOX)  &
        + F%R(tag_IC_MVKO2,2) * flow(MVKO2_MGLYOX)  &
        + F%R(tag_IC_ISO2,2) * flow(ISO2_MGLYOX)  &
        + F%R(tag_IC_CH3O2,2) * flow(CH3O2_MGLYOX)  &
        + F%R(tag_IC_MVKOOH,2) * flow(MVKOOH_MGLYOX)

      ! ----- MPAN -----
       D%R(tag_IC_MPAN,2) =   &
        + F%R(tag_IC_MPAN,2) * flow(MPAN_sink)  &
        + F%R(tag_IC_MVKO2,2) * flow(MVKO2_MPAN)

      ! ----- IC3H7NO3 -----
       D%R(tag_IC_IC3H7NO3,2) =   &
        + F%R(tag_IC_IC3H7NO3,2) * flow(IC3H7NO3_sink)  &
        + F%R(tag_IC_IC3H7O2,2) * flow(IC3H7O2_IC3H7NO3)

      ! ----- NC4H10 -----
       D%R(tag_IC_NC4H10,2) =   &
        + F%R(tag_IC_NC4H10,2) * flow(NC4H10_sink)

      ! ----- LC4H9O2 -----
       D%R(tag_IC_LC4H9O2,2) =   &
        + F%R(tag_IC_LC4H9O2,2) * flow(LC4H9O2_sink)  &
        + F%R(tag_IC_NC4H10,2) * flow(NC4H10_LC4H9O2)  &
        + F%R(tag_IC_LC4H9OOH,2) * flow(LC4H9OOH_LC4H9O2)

      ! ----- LC4H9OOH -----
       D%R(tag_IC_LC4H9OOH,2) =   &
        + F%R(tag_IC_LC4H9OOH,2) * flow(LC4H9OOH_sink)  &
        + F%R(tag_IC_LC4H9O2,2) * flow(LC4H9O2_LC4H9OOH)

      ! ----- MVK -----
       D%R(tag_IC_MVK,2) =   &
        + F%R(tag_IC_MVK,2) * flow(MVK_sink)  &
        + F%R(tag_IC_C5H8,2) * flow(C5H8_MVK)  &
        + F%R(tag_IC_ISO2,2) * flow(ISO2_MVK)  &
        + F%R(tag_IC_CH3O2,2) * flow(CH3O2_MVK)  &
        + F%R(tag_IC_ISOOH,2) * flow(ISOOH_MVK)  &
        + F%R(tag_IC_ISON,2) * flow(ISON_MVK)

      ! ----- MVKO2 -----
       D%R(tag_IC_MVKO2,2) =   &
        + F%R(tag_IC_MVKO2,2) * flow(MVKO2_sink)  &
        + F%R(tag_IC_MPAN,2) * flow(MPAN_MVKO2)  &
        + F%R(tag_IC_MVK,2) * flow(MVK_MVKO2)  &
        + F%R(tag_IC_MVKOOH,2) * flow(MVKOOH_MVKO2)  &
        + F%R(tag_IC_C5H8,2) * flow(C5H8_MVKO2)

      ! ----- MVKOOH -----
       D%R(tag_IC_MVKOOH,2) =   &
        + F%R(tag_IC_MVKOOH,2) * flow(MVKOOH_sink)  &
        + F%R(tag_IC_MVKO2,2) * flow(MVKO2_MVKOOH)

      ! ----- MEK -----
       D%R(tag_IC_MEK,2) =   &
        + F%R(tag_IC_MEK,2) * flow(MEK_sink)  &
        + F%R(tag_IC_LC4H9O2,2) * flow(LC4H9O2_MEK)  &
        + F%R(tag_IC_LC4H9OOH,2) * flow(LC4H9OOH_MEK)  &
        + F%R(tag_IC_LC4H9NO3,2) * flow(LC4H9NO3_MEK)

      ! ----- LMEKO2 -----
       D%R(tag_IC_LMEKO2,2) =   &
        + F%R(tag_IC_LMEKO2,2) * flow(LMEKO2_sink)  &
        + F%R(tag_IC_MEK,2) * flow(MEK_LMEKO2)  &
        + F%R(tag_IC_LMEKOOH,2) * flow(LMEKOOH_LMEKO2)

      ! ----- LMEKOOH -----
       D%R(tag_IC_LMEKOOH,2) =   &
        + F%R(tag_IC_LMEKOOH,2) * flow(LMEKOOH_sink)  &
        + F%R(tag_IC_LMEKO2,2) * flow(LMEKO2_LMEKOOH)

      ! ----- BIACET -----
       D%R(tag_IC_BIACET,2) =   &
        + F%R(tag_IC_BIACET,2) * flow(BIACET_sink)  &
        + F%R(tag_IC_LMEKOOH,2) * flow(LMEKOOH_BIACET)

      ! ----- LC4H9NO3 -----
       D%R(tag_IC_LC4H9NO3,2) =   &
        + F%R(tag_IC_LC4H9NO3,2) * flow(LC4H9NO3_sink)  &
        + F%R(tag_IC_C3H6,2) * flow(C3H6_LC4H9NO3)  &
        + F%R(tag_IC_LHOC3H6O2,2) * flow(LHOC3H6O2_LC4H9NO3)  &
        + F%R(tag_IC_LC4H9O2,2) * flow(LC4H9O2_LC4H9NO3)  &
        + F%R(tag_IC_LMEKO2,2) * flow(LMEKO2_LC4H9NO3)

      ! ----- C5H8 -----
       D%R(tag_IC_C5H8,2) =   &
        + F%R(tag_IC_C5H8,2) * flow(C5H8_sink)

      ! ----- ISO2 -----
       D%R(tag_IC_ISO2,2) =   &
        + F%R(tag_IC_ISO2,2) * flow(ISO2_sink)  &
        + F%R(tag_IC_C5H8,2) * flow(C5H8_ISO2)

      ! ----- ISOOH -----
       D%R(tag_IC_ISOOH,2) =   &
        + F%R(tag_IC_ISOOH,2) * flow(ISOOH_sink)  &
        + F%R(tag_IC_ISO2,2) * flow(ISO2_ISOOH)

      ! ----- ISON -----
       D%R(tag_IC_ISON,2) =   &
        + F%R(tag_IC_ISON,2) * flow(ISON_sink)  &
        + F%R(tag_IC_C5H8,2) * flow(C5H8_ISON)  &
        + F%R(tag_IC_ISO2,2) * flow(ISO2_ISON)

      ! ----- CCl4 -----
       D%R(tag_IC_CCl4,2) =   &
        + F%R(tag_IC_CCl4,2) * flow(CCl4_sink)

      ! ----- CH3Cl -----
       D%R(tag_IC_CH3Cl,2) =   &
        + F%R(tag_IC_CH3Cl,2) * flow(CH3Cl_sink)

      ! ----- CH3CCl3 -----
       D%R(tag_IC_CH3CCl3,2) =   &
        + F%R(tag_IC_CH3CCl3,2) * flow(CH3CCl3_sink)

      ! ----- CF2Cl2 -----
       D%R(tag_IC_CF2Cl2,2) =   &
        + F%R(tag_IC_CF2Cl2,2) * flow(CF2Cl2_sink)

      ! ----- CFCl3 -----
       D%R(tag_IC_CFCl3,2) =   &
        + F%R(tag_IC_CFCl3,2) * flow(CFCl3_sink)

      ! ----- CH3Br -----
       D%R(tag_IC_CH3Br,2) =   &
        + F%R(tag_IC_CH3Br,2) * flow(CH3Br_sink)

      ! ----- CF3Br -----
       D%R(tag_IC_CF3Br,2) =   &
        + F%R(tag_IC_CF3Br,2) * flow(CF3Br_sink)

      ! ----- CF2ClBr -----
       D%R(tag_IC_CF2ClBr,2) =   &
        + F%R(tag_IC_CF2ClBr,2) * flow(CF2ClBr_sink)

      ! ----- CH3SO3H -----
       D%R(tag_IC_CH3SO3H,2) =   &
        + F%R(tag_IC_DMSO,2) * flow(DMSO_CH3SO3H)  &
        + F%R(tag_IC_CH3SO3,2) * flow(CH3SO3_CH3SO3H)

      ! ----- DMS -----
       D%R(tag_IC_DMS,2) =   &
        + F%R(tag_IC_DMS,2) * flow(DMS_sink)

      ! ----- DMSO -----
       D%R(tag_IC_DMSO,2) =   &
        + F%R(tag_IC_DMSO,2) * flow(DMSO_sink)  &
        + F%R(tag_IC_DMS,2) * flow(DMS_DMSO)

      ! ----- CH3SO2 -----
       D%R(tag_IC_CH3SO2,2) =   &
        + F%R(tag_IC_CH3SO2,2) * flow(CH3SO2_sink)  &
        + F%R(tag_IC_DMS,2) * flow(DMS_CH3SO2)

      ! ----- CH3SO3 -----
       D%R(tag_IC_CH3SO3,2) =   &
        + F%R(tag_IC_CH3SO3,2) * flow(CH3SO3_sink)  &
        + F%R(tag_IC_CH3SO2,2) * flow(CH3SO2_CH3SO3)

    ! minor isotopologues: abundant atom transfer

    ! ===== tag_IC:        D%A(tag_IC_#,2) <- F%A(tag_IC_$,2) * ~ + ... ) =====

      ! ----- CH4 -----  WARN: indicated as fixed species
       D%A(tag_IC_CH4,2) =   &
        + F%A(tag_IC_CH4,2) * ( ( flow(CH4_sink) + flow(KIE_G4100_I13CH4) ) + &
                                 flow(KIE_G4101_I13CH4) )  &
        + F%A(tag_IC_C3H6,2) * flow(C3H6_CH4)

      ! ----- CH3OH -----
       D%A(tag_IC_CH3OH,2) =   &
        + F%A(tag_IC_CH3OH,2) * flow(CH3OH_sink)  &
        + F%A(tag_IC_C3H6,2) * flow(C3H6_CH3OH)  &
        + F%A(tag_IC_ISO2,2) * flow(ISO2_CH3OH)
      ! skipped [abu in min]: CH3O2(1) 

      ! ----- CH3O2 -----
       D%A(tag_IC_CH3O2,2) =   &
        + F%A(tag_IC_CH3O2,2) * flow(CH3O2_sink)  &
        + F%A(tag_IC_CH3CO2H,2) * flow(CH3CO2H_CH3O2)  &
        + F%A(tag_IC_CH3CO3,2) * flow(CH3CO3_CH3O2)  &
        + F%A(tag_IC_C2H2,2) * flow(C2H2_CH3O2)  &
        + F%A(tag_IC_C3H6,2) * flow(C3H6_CH3O2)  &
        + F%A(tag_IC_C5H8,2) * flow(C5H8_CH3O2)  &
        + F%A(tag_IC_CH3CHO,2) * flow(CH3CHO_CH3O2)  &
        + F%A(tag_IC_CH3CO3H,2) * flow(CH3CO3H_CH3O2)  &
        + F%A(tag_IC_PAN,2) * flow(PAN_CH3O2)  &
        + F%A(tag_IC_CH3COCH3,2) * flow(CH3COCH3_CH3O2)
      ! skipped [abu in min]: CH4(1) CH3OOH(1) DMSO(1) CH3SO2(1) CH3Cl(1) CH3Br(1) 

      ! ----- CH3OOH -----
       D%A(tag_IC_CH3OOH,2) =   &
        + F%A(tag_IC_CH3OOH,2) * flow(CH3OOH_sink)
      ! skipped [abu in min]: CH3O2(1) 

      ! ----- HCHO -----
       D%A(tag_IC_HCHO,2) =   &
        + F%A(tag_IC_HCHO,2) * flow(HCHO_sink)  &
        + F%A(tag_IC_C2H4,2) * flow(C2H4_HCHO)  &
        + F%A(tag_IC_NACA,2) * flow(NACA_HCHO)  &
        + F%A(tag_IC_PAN,2) * flow(PAN_HCHO)  &
        + F%A(tag_IC_C3H6,2) * flow(C3H6_HCHO)  &
        + F%A(tag_IC_LHOC3H6O2,2) * flow(LHOC3H6O2_HCHO)  &
        + F%A(tag_IC_CH3COCH2O2,2) * flow(CH3COCH2O2_HCHO)  &
        + F%A(tag_IC_MVKO2,2) * flow(MVKO2_HCHO)  &
        + F%A(tag_IC_C5H8,2) * flow(C5H8_HCHO)  &
        + F%A(tag_IC_ISO2,2) * flow(ISO2_HCHO)  &
        + F%A(tag_IC_DMS,2) * flow(DMS_HCHO)  &
        + F%A(tag_IC_ACETOL,2) * flow(ACETOL_HCHO)  &
        + F%A(tag_IC_MVK,2) * flow(MVK_HCHO)  &
        + F%A(tag_IC_MVKOOH,2) * flow(MVKOOH_HCHO)  &
        + F%A(tag_IC_ISOOH,2) * flow(ISOOH_HCHO)  &
        + F%A(tag_IC_ISON,2) * flow(ISON_HCHO)
      ! skipped [abu in min]: CH4(1) CH3OH(1) CH3O2(1) CH3OOH(1) DMSO(1) 

      ! ----- CO -----
       D%A(tag_IC_CO,2) =   &
        + F%A(tag_IC_CO,2) * ( flow(CO_sink) + flow(KIE_G4110_I13CO) )  &
        + F%A(tag_IC_C2H4,2) * flow(C2H4_CO)  &
        + F%A(tag_IC_NACA,2) * flow(NACA_CO)  &
        + F%A(tag_IC_C3H6,2) * flow(C3H6_CO)  &
        + F%A(tag_IC_MGLYOX,2) * flow(MGLYOX_CO)  &
        + F%A(tag_IC_MVK,2) * flow(MVK_CO)  &
        + F%A(tag_IC_MVKO2,2) * flow(MVKO2_CO)  &
        + F%A(tag_IC_C5H8,2) * flow(C5H8_CO)  &
        + F%A(tag_IC_CH3CHO,2) * flow(CH3CHO_CO)  &
        + F%A(tag_IC_MVKOOH,2) * flow(MVKOOH_CO)
      ! skipped [abu in min]: HCHO(1) CO2(1) CH4(1) 

      ! ----- HCOOH -----
       D%A(tag_IC_HCOOH,2) =   &
        + F%A(tag_IC_HCOOH,2) * flow(HCOOH_sink)  &
        + F%A(tag_IC_C2H4,2) * flow(C2H4_HCOOH)  &
        + F%A(tag_IC_C3H6,2) * flow(C3H6_HCOOH)  &
        + F%A(tag_IC_MVK,2) * flow(MVK_HCOOH)  &
        + F%A(tag_IC_C5H8,2) * flow(C5H8_HCOOH)

      ! ----- CO2 -----
       D%A(tag_IC_CO2,2) =   &
        + F%A(tag_IC_CO2,2) * flow(CO2_sink)  &
        + F%A(tag_IC_CH3CO2H,2) * flow(CH3CO2H_CO2)  &
        + F%A(tag_IC_CH3CO3,2) * flow(CH3CO3_CO2)  &
        + F%A(tag_IC_PAN,2) * flow(PAN_CO2)
      ! skipped [abu in min]: CO(1) 

      ! ----- C2H6 -----
       D%A(tag_IC_C2H6,2) =   &
        + F%A(tag_IC_C2H6,2) * flow(C2H6_sink)

      ! ----- C2H4 -----
       D%A(tag_IC_C2H4,2) =   &
        + F%A(tag_IC_C2H4,2) * flow(C2H4_sink)

      ! ----- C2H2 -----
       D%A(tag_IC_C2H2,2) =   &
        + F%A(tag_IC_C2H2,2) * flow(C2H2_sink)

      ! ----- C2H5O2 -----
       D%A(tag_IC_C2H5O2,2) =   &
        + F%A(tag_IC_C2H5O2,2) * flow(C2H5O2_sink)  &
        + F%A(tag_IC_C2H6,2) * flow(C2H6_C2H5O2)  &
        + F%A(tag_IC_C2H5OOH,2) * flow(C2H5OOH_C2H5O2)  &
        + F%A(tag_IC_C3H8,2) * flow(C3H8_C2H5O2)  &
        + F%A(tag_IC_C3H6,2) * flow(C3H6_C2H5O2)  &
        + F%A(tag_IC_LC4H9O2,2) * flow(LC4H9O2_C2H5O2)  &
        + F%A(tag_IC_LC4H9OOH,2) * flow(LC4H9OOH_C2H5O2)  &
        + F%A(tag_IC_MEK,2) * flow(MEK_C2H5O2)  &
        + F%A(tag_IC_LC4H9NO3,2) * flow(LC4H9NO3_C2H5O2)

      ! ----- C2H5OOH -----
       D%A(tag_IC_C2H5OOH,2) =   &
        + F%A(tag_IC_C2H5OOH,2) * flow(C2H5OOH_sink)  &
        + F%A(tag_IC_C2H5O2,2) * flow(C2H5O2_C2H5OOH)

      ! ----- CH3CHO -----
       D%A(tag_IC_CH3CHO,2) =   &
        + F%A(tag_IC_CH3CHO,2) * flow(CH3CHO_sink)  &
        + F%A(tag_IC_C2H5O2,2) * flow(C2H5O2_CH3CHO)  &
        + F%A(tag_IC_C2H5OOH,2) * flow(C2H5OOH_CH3CHO)  &
        + F%A(tag_IC_C3H6,2) * flow(C3H6_CH3CHO)  &
        + F%A(tag_IC_LHOC3H6O2,2) * flow(LHOC3H6O2_CH3CHO)  &
        + F%A(tag_IC_LC4H9O2,2) * flow(LC4H9O2_CH3CHO)  &
        + F%A(tag_IC_LMEKO2,2) * flow(LMEKO2_CH3CHO)  &
        + F%A(tag_IC_LC4H9OOH,2) * flow(LC4H9OOH_CH3CHO)  &
        + F%A(tag_IC_LMEKOOH,2) * flow(LMEKOOH_CH3CHO)  &
        + F%A(tag_IC_LC4H9NO3,2) * flow(LC4H9NO3_CH3CHO)

      ! ----- CH3CO2H -----
       D%A(tag_IC_CH3CO2H,2) =   &
        + F%A(tag_IC_CH3CO2H,2) * flow(CH3CO2H_sink)  &
        + F%A(tag_IC_CH3CO3,2) * flow(CH3CO3_CH3CO2H)

      ! ----- CH3CO3 -----
       D%A(tag_IC_CH3CO3,2) =   &
        + F%A(tag_IC_CH3CO3,2) * flow(CH3CO3_sink)  &
        + F%A(tag_IC_CH3CHO,2) * flow(CH3CHO_CH3CO3)  &
        + F%A(tag_IC_CH3CO3H,2) * flow(CH3CO3H_CH3CO3)  &
        + F%A(tag_IC_PAN,2) * flow(PAN_CH3CO3)  &
        + F%A(tag_IC_C3H6,2) * flow(C3H6_CH3CO3)  &
        + F%A(tag_IC_CH3COCH2O2,2) * flow(CH3COCH2O2_CH3CO3)  &
        + F%A(tag_IC_MGLYOX,2) * flow(MGLYOX_CH3CO3)  &
        + F%A(tag_IC_MVK,2) * flow(MVK_CH3CO3)  &
        + F%A(tag_IC_MVKO2,2) * flow(MVKO2_CH3CO3)  &
        + F%A(tag_IC_LMEKO2,2) * flow(LMEKO2_CH3CO3)  &
        + F%A(tag_IC_C5H8,2) * flow(C5H8_CH3CO3)  &
        + F%A(tag_IC_CH3COCH3,2) * flow(CH3COCH3_CH3CO3)  &
        + F%A(tag_IC_ACETOL,2) * flow(ACETOL_CH3CO3)  &
        + F%A(tag_IC_HYPERACET,2) * flow(HYPERACET_CH3CO3)  &
        + F%A(tag_IC_MVKOOH,2) * flow(MVKOOH_CH3CO3)  &
        + F%A(tag_IC_MEK,2) * flow(MEK_CH3CO3)  &
        + F%A(tag_IC_LMEKOOH,2) * flow(LMEKOOH_CH3CO3)  &
        + F%A(tag_IC_BIACET,2) * flow(BIACET_CH3CO3)

      ! ----- CH3CO3H -----
       D%A(tag_IC_CH3CO3H,2) =   &
        + F%A(tag_IC_CH3CO3H,2) * flow(CH3CO3H_sink)  &
        + F%A(tag_IC_CH3CO3,2) * flow(CH3CO3_CH3CO3H)

      ! ----- NACA -----
       D%A(tag_IC_NACA,2) =   &
        + F%A(tag_IC_NACA,2) * flow(NACA_sink)  &
        + F%A(tag_IC_ISON,2) * flow(ISON_NACA)

      ! ----- PAN -----
       D%A(tag_IC_PAN,2) =   &
        + F%A(tag_IC_PAN,2) * flow(PAN_sink)  &
        + F%A(tag_IC_CH3CO3,2) * flow(CH3CO3_PAN)

      ! ----- C3H8 -----
       D%A(tag_IC_C3H8,2) =   &
        + F%A(tag_IC_C3H8,2) * flow(C3H8_sink)

      ! ----- C3H6 -----
       D%A(tag_IC_C3H6,2) =   &
        + F%A(tag_IC_C3H6,2) * flow(C3H6_sink)

      ! ----- IC3H7O2 -----
       D%A(tag_IC_IC3H7O2,2) =   &
        + F%A(tag_IC_IC3H7O2,2) * flow(IC3H7O2_sink)  &
        + F%A(tag_IC_C3H8,2) * flow(C3H8_IC3H7O2)  &
        + F%A(tag_IC_IC3H7OOH,2) * flow(IC3H7OOH_IC3H7O2)

      ! ----- IC3H7OOH -----
       D%A(tag_IC_IC3H7OOH,2) =   &
        + F%A(tag_IC_IC3H7OOH,2) * flow(IC3H7OOH_sink)  &
        + F%A(tag_IC_IC3H7O2,2) * flow(IC3H7O2_IC3H7OOH)

      ! ----- LHOC3H6O2 -----
       D%A(tag_IC_LHOC3H6O2,2) =   &
        + F%A(tag_IC_LHOC3H6O2,2) * flow(LHOC3H6O2_sink)  &
        + F%A(tag_IC_C2H4,2) * flow(C2H4_LHOC3H6O2)  &
        + F%A(tag_IC_C3H6,2) * flow(C3H6_LHOC3H6O2)  &
        + F%A(tag_IC_LHOC3H6OOH,2) * flow(LHOC3H6OOH_LHOC3H6O2)

      ! ----- LHOC3H6OOH -----
       D%A(tag_IC_LHOC3H6OOH,2) =   &
        + F%A(tag_IC_LHOC3H6OOH,2) * flow(LHOC3H6OOH_sink)  &
        + F%A(tag_IC_LHOC3H6O2,2) * flow(LHOC3H6O2_LHOC3H6OOH)

      ! ----- CH3COCH3 -----
       D%A(tag_IC_CH3COCH3,2) =   &
        + F%A(tag_IC_CH3COCH3,2) * flow(CH3COCH3_sink)  &
        + F%A(tag_IC_IC3H7O2,2) * flow(IC3H7O2_CH3COCH3)  &
        + F%A(tag_IC_IC3H7OOH,2) * flow(IC3H7OOH_CH3COCH3)  &
        + F%A(tag_IC_IC3H7NO3,2) * flow(IC3H7NO3_CH3COCH3)

      ! ----- CH3COCH2O2 -----
       D%A(tag_IC_CH3COCH2O2,2) =   &
        + F%A(tag_IC_CH3COCH2O2,2) * flow(CH3COCH2O2_sink)  &
        + F%A(tag_IC_CH3COCH3,2) * flow(CH3COCH3_CH3COCH2O2)  &
        + F%A(tag_IC_HYPERACET,2) * flow(HYPERACET_CH3COCH2O2)

      ! ----- HYPERACET -----
       D%A(tag_IC_HYPERACET,2) =   &
        + F%A(tag_IC_HYPERACET,2) * flow(HYPERACET_sink)  &
        + F%A(tag_IC_CH3COCH2O2,2) * flow(CH3COCH2O2_HYPERACET)

      ! ----- ACETOL -----
       D%A(tag_IC_ACETOL,2) =   &
        + F%A(tag_IC_ACETOL,2) * flow(ACETOL_sink)  &
        + F%A(tag_IC_LHOC3H6OOH,2) * flow(LHOC3H6OOH_ACETOL)  &
        + F%A(tag_IC_CH3COCH2O2,2) * flow(CH3COCH2O2_ACETOL)  &
        + F%A(tag_IC_MPAN,2) * flow(MPAN_ACETOL)  &
        + F%A(tag_IC_MVKO2,2) * flow(MVKO2_ACETOL)  &
        + F%A(tag_IC_ISO2,2) * flow(ISO2_ACETOL)  &
        + F%A(tag_IC_ISON,2) * flow(ISON_ACETOL)  &
        + F%A(tag_IC_MVKOOH,2) * flow(MVKOOH_ACETOL)
      ! skipped [abu in min]: CH3O2(1) 

      ! ----- MGLYOX -----
       D%A(tag_IC_MGLYOX,2) =   &
        + F%A(tag_IC_MGLYOX,2) * flow(MGLYOX_sink)  &
        + F%A(tag_IC_C3H6,2) * flow(C3H6_MGLYOX)  &
        + F%A(tag_IC_CH3COCH2O2,2) * flow(CH3COCH2O2_MGLYOX)  &
        + F%A(tag_IC_HYPERACET,2) * flow(HYPERACET_MGLYOX)  &
        + F%A(tag_IC_ACETOL,2) * flow(ACETOL_MGLYOX)  &
        + F%A(tag_IC_MVK,2) * flow(MVK_MGLYOX)  &
        + F%A(tag_IC_MVKO2,2) * flow(MVKO2_MGLYOX)  &
        + F%A(tag_IC_ISO2,2) * flow(ISO2_MGLYOX)  &
        + F%A(tag_IC_MVKOOH,2) * flow(MVKOOH_MGLYOX)
      ! skipped [abu in min]: CH3O2(1) 

      ! ----- MPAN -----
       D%A(tag_IC_MPAN,2) =   &
        + F%A(tag_IC_MPAN,2) * flow(MPAN_sink)  &
        + F%A(tag_IC_MVKO2,2) * flow(MVKO2_MPAN)

      ! ----- IC3H7NO3 -----
       D%A(tag_IC_IC3H7NO3,2) =   &
        + F%A(tag_IC_IC3H7NO3,2) * flow(IC3H7NO3_sink)  &
        + F%A(tag_IC_IC3H7O2,2) * flow(IC3H7O2_IC3H7NO3)

      ! ----- NC4H10 -----
       D%A(tag_IC_NC4H10,2) =   &
        + F%A(tag_IC_NC4H10,2) * flow(NC4H10_sink)

      ! ----- LC4H9O2 -----
       D%A(tag_IC_LC4H9O2,2) =   &
        + F%A(tag_IC_LC4H9O2,2) * flow(LC4H9O2_sink)  &
        + F%A(tag_IC_NC4H10,2) * flow(NC4H10_LC4H9O2)  &
        + F%A(tag_IC_LC4H9OOH,2) * flow(LC4H9OOH_LC4H9O2)

      ! ----- LC4H9OOH -----
       D%A(tag_IC_LC4H9OOH,2) =   &
        + F%A(tag_IC_LC4H9OOH,2) * flow(LC4H9OOH_sink)  &
        + F%A(tag_IC_LC4H9O2,2) * flow(LC4H9O2_LC4H9OOH)

      ! ----- MVK -----
       D%A(tag_IC_MVK,2) =   &
        + F%A(tag_IC_MVK,2) * flow(MVK_sink)  &
        + F%A(tag_IC_C5H8,2) * flow(C5H8_MVK)  &
        + F%A(tag_IC_ISO2,2) * flow(ISO2_MVK)  &
        + F%A(tag_IC_ISOOH,2) * flow(ISOOH_MVK)  &
        + F%A(tag_IC_ISON,2) * flow(ISON_MVK)
      ! skipped [abu in min]: CH3O2(1) 

      ! ----- MVKO2 -----
       D%A(tag_IC_MVKO2,2) =   &
        + F%A(tag_IC_MVKO2,2) * flow(MVKO2_sink)  &
        + F%A(tag_IC_MPAN,2) * flow(MPAN_MVKO2)  &
        + F%A(tag_IC_MVK,2) * flow(MVK_MVKO2)  &
        + F%A(tag_IC_MVKOOH,2) * flow(MVKOOH_MVKO2)  &
        + F%A(tag_IC_C5H8,2) * flow(C5H8_MVKO2)

      ! ----- MVKOOH -----
       D%A(tag_IC_MVKOOH,2) =   &
        + F%A(tag_IC_MVKOOH,2) * flow(MVKOOH_sink)  &
        + F%A(tag_IC_MVKO2,2) * flow(MVKO2_MVKOOH)

      ! ----- MEK -----
       D%A(tag_IC_MEK,2) =   &
        + F%A(tag_IC_MEK,2) * flow(MEK_sink)  &
        + F%A(tag_IC_LC4H9O2,2) * flow(LC4H9O2_MEK)  &
        + F%A(tag_IC_LC4H9OOH,2) * flow(LC4H9OOH_MEK)  &
        + F%A(tag_IC_LC4H9NO3,2) * flow(LC4H9NO3_MEK)

      ! ----- LMEKO2 -----
       D%A(tag_IC_LMEKO2,2) =   &
        + F%A(tag_IC_LMEKO2,2) * flow(LMEKO2_sink)  &
        + F%A(tag_IC_MEK,2) * flow(MEK_LMEKO2)  &
        + F%A(tag_IC_LMEKOOH,2) * flow(LMEKOOH_LMEKO2)

      ! ----- LMEKOOH -----
       D%A(tag_IC_LMEKOOH,2) =   &
        + F%A(tag_IC_LMEKOOH,2) * flow(LMEKOOH_sink)  &
        + F%A(tag_IC_LMEKO2,2) * flow(LMEKO2_LMEKOOH)

      ! ----- BIACET -----
       D%A(tag_IC_BIACET,2) =   &
        + F%A(tag_IC_BIACET,2) * flow(BIACET_sink)  &
        + F%A(tag_IC_LMEKOOH,2) * flow(LMEKOOH_BIACET)

      ! ----- LC4H9NO3 -----
       D%A(tag_IC_LC4H9NO3,2) =   &
        + F%A(tag_IC_LC4H9NO3,2) * flow(LC4H9NO3_sink)  &
        + F%A(tag_IC_C3H6,2) * flow(C3H6_LC4H9NO3)  &
        + F%A(tag_IC_LHOC3H6O2,2) * flow(LHOC3H6O2_LC4H9NO3)  &
        + F%A(tag_IC_LC4H9O2,2) * flow(LC4H9O2_LC4H9NO3)  &
        + F%A(tag_IC_LMEKO2,2) * flow(LMEKO2_LC4H9NO3)

      ! ----- C5H8 -----
       D%A(tag_IC_C5H8,2) =   &
        + F%A(tag_IC_C5H8,2) * flow(C5H8_sink)

      ! ----- ISO2 -----
       D%A(tag_IC_ISO2,2) =   &
        + F%A(tag_IC_ISO2,2) * flow(ISO2_sink)  &
        + F%A(tag_IC_C5H8,2) * flow(C5H8_ISO2)

      ! ----- ISOOH -----
       D%A(tag_IC_ISOOH,2) =   &
        + F%A(tag_IC_ISOOH,2) * flow(ISOOH_sink)  &
        + F%A(tag_IC_ISO2,2) * flow(ISO2_ISOOH)

      ! ----- ISON -----
       D%A(tag_IC_ISON,2) =   &
        + F%A(tag_IC_ISON,2) * flow(ISON_sink)  &
        + F%A(tag_IC_C5H8,2) * flow(C5H8_ISON)  &
        + F%A(tag_IC_ISO2,2) * flow(ISO2_ISON)

      ! ----- CCl4 -----
       D%A(tag_IC_CCl4,2) =   &
        + F%A(tag_IC_CCl4,2) * flow(CCl4_sink)

      ! ----- CH3Cl -----
       D%A(tag_IC_CH3Cl,2) =   &
        + F%A(tag_IC_CH3Cl,2) * flow(CH3Cl_sink)

      ! ----- CH3CCl3 -----
       D%A(tag_IC_CH3CCl3,2) =   &
        + F%A(tag_IC_CH3CCl3,2) * flow(CH3CCl3_sink)

      ! ----- CF2Cl2 -----
       D%A(tag_IC_CF2Cl2,2) =   &
        + F%A(tag_IC_CF2Cl2,2) * flow(CF2Cl2_sink)

      ! ----- CFCl3 -----
       D%A(tag_IC_CFCl3,2) =   &
        + F%A(tag_IC_CFCl3,2) * flow(CFCl3_sink)

      ! ----- CH3Br -----
       D%A(tag_IC_CH3Br,2) =   &
        + F%A(tag_IC_CH3Br,2) * flow(CH3Br_sink)

      ! ----- CF3Br -----
       D%A(tag_IC_CF3Br,2) =   &
        + F%A(tag_IC_CF3Br,2) * flow(CF3Br_sink)

      ! ----- CF2ClBr -----
       D%A(tag_IC_CF2ClBr,2) =   &
        + F%A(tag_IC_CF2ClBr,2) * flow(CF2ClBr_sink)

      ! ----- CH3SO3H -----
      ! no active sink/production
      ! skipped [abu in min]: DMSO(1) CH3SO3(1) 

      ! ----- DMS -----
       D%A(tag_IC_DMS,2) =   &
        + F%A(tag_IC_DMS,2) * flow(DMS_sink)

      ! ----- DMSO -----
       D%A(tag_IC_DMSO,2) =   &
        + F%A(tag_IC_DMSO,2) * flow(DMSO_sink)  &
        + F%A(tag_IC_DMS,2) * flow(DMS_DMSO)

      ! ----- CH3SO2 -----
       D%A(tag_IC_CH3SO2,2) =   &
        + F%A(tag_IC_CH3SO2,2) * flow(CH3SO2_sink)  &
        + F%A(tag_IC_DMS,2) * flow(DMS_CH3SO2)

      ! ----- CH3SO3 -----
       D%A(tag_IC_CH3SO3,2) =   &
        + F%A(tag_IC_CH3SO3,2) * flow(CH3SO3_sink)
      ! skipped [abu in min]: CH3SO2(1) 

#endif

    ! calculating isotope exchange derivative
#ifdef IEX



    ! accounting in total derivative
      DO k = 2, NTCISO
         DO n = 1, NIXSPEC
         ! rare in minor
           D%R(IXSIND(n),k) = D%R(IXSIND(n),k) + DIEX(IXSIND(n),k)
         ! abundant in minor
           D%A(IXSIND(n),k) = D%A(IXSIND(n),k) - DIEX(IXSIND(n),k)
         ENDDO
      ENDDO
#endif

    ! redirection of the abundant atom excess
      D%A(:,1) = D%A(:,1) + SUM(D%A(:,2:NTCISO),DIM=2)

    ! abundant atom in minor isotopologues
      DO k = 2, NTCISO
        D%A(:,k) = D%R(:,k) * (QTCATOM(:)-1)
      ENDDO

    ! redirecting abundand atom to construct valid minor isotopologues
      D%A(:,1) = D%A(:,1) - SUM(D%A(:,2:NTCISO),DIM=2)
      
    ! performance: counting derivative calculations #
      tag_IC_NDEREV = tag_IC_NDEREV + 1

    END SUBROUTINE iderivs_atom

  ! ----------------------------------------------------------------------------

    SUBROUTINE iratios_atom(AC,AF)

    ! returns isotopic ratios from the atomic content

      IMPLICIT NONE

    ! in: atomic content
      TYPE (TCOMP), INTENT(INOUT) :: AC
    ! out: atomic fractions
      TYPE (TCOMP), INTENT(INOUT) :: AF

    ! getting the fractions of isotopologues
      DO n = 1, NTCSPEC
        tot = SUM(AC%A(n,:))           ! total abundant
#ifdef OPT_LOW_FILTER
        IF (tot .LT. THRES_LOW) THEN
#else
        IF (tot .EQ. 0.0_dp) THEN
#endif
          AF%A(n,:) = 0.0_dp
          AF%R(n,:) = 0.0_dp
          tag_IC_NREJCT = tag_IC_NREJCT + 1
        ELSE
          AF%R(n,:) = AC%R(n,:) / tot  ! isotopic ratio
        ENDIF
      ENDDO

    END SUBROUTINE iratios_atom

  ! ----------------------------------------------------------------------------

    SUBROUTINE iderivs_ratio(C,D,F)

    ! returns atomic content derivative 
    ! ratio approximation solution
    ! using sparse equivalent

      IMPLICIT NONE

    ! in: atomic content
      TYPE (TCOMP), INTENT(INOUT) :: C

    ! out: atomic content derivative
      TYPE (TCOMP), INTENT(INOUT) :: D

    ! fractions calculated on the way
      TYPE (TCOMP), INTENT(INOUT) :: F

    ! ratios for the approximation
      TYPE (TCOMP)                :: R

    ! getting atomic ractios   [F in the head of integrate]
      CALL iratios_atom(C,R)

    ! calculating 12C 13C isotopologues derivatives

    ! calculating regular transfer derivative
    
    ! ===== tag_IC:        R%A(tag_IC_#,1) <- ~ + ... ) =====

      ! ----- CH4 -----  WARN: indicated as fixed species
       R%A(tag_IC_CH4,1) =   &
        + flow(CH4_sink)  &
        + flow(C3H6_CH4)

      ! ----- CH3OH -----
       R%A(tag_IC_CH3OH,1) =   &
        + flow(CH3OH_sink)  &
        + flow(CH3O2_CH3OH)  &
        + flow(C3H6_CH3OH)  &
        + flow(ISO2_CH3OH)

      ! ----- CH3O2 -----
       R%A(tag_IC_CH3O2,1) =   &
        + flow(CH3O2_sink)  &
        + flow(CH4_CH3O2)  &
        + flow(CH3OOH_CH3O2)  &
        + flow(CH3CO2H_CH3O2)  &
        + flow(CH3CO3_CH3O2)  &
        + flow(C2H2_CH3O2)  &
        + flow(C3H6_CH3O2)  &
        + flow(C5H8_CH3O2)  &
        + flow(DMSO_CH3O2)  &
        + flow(CH3SO2_CH3O2)  &
        + flow(CH3CHO_CH3O2)  &
        + flow(CH3CO3H_CH3O2)  &
        + flow(PAN_CH3O2)  &
        + flow(CH3COCH3_CH3O2)  &
        + flow(CH3Cl_CH3O2)  &
        + flow(CH3Br_CH3O2)

      ! ----- CH3OOH -----
       R%A(tag_IC_CH3OOH,1) =   &
        + flow(CH3OOH_sink)  &
        + flow(CH3O2_CH3OOH)

      ! ----- HCHO -----
       R%A(tag_IC_HCHO,1) =   &
        + flow(HCHO_sink)  &
        + flow(CH4_HCHO)  &
        + flow(CH3OH_HCHO)  &
        + flow(CH3O2_HCHO)  &
        + flow(CH3OOH_HCHO)  &
        + flow(C2H4_HCHO)  &
        + flow(NACA_HCHO)  &
        + flow(PAN_HCHO)  &
        + flow(C3H6_HCHO)  &
        + flow(LHOC3H6O2_HCHO)  &
        + flow(CH3COCH2O2_HCHO)  &
        + flow(MVKO2_HCHO)  &
        + flow(C5H8_HCHO)  &
        + flow(ISO2_HCHO)  &
        + flow(DMS_HCHO)  &
        + flow(DMSO_HCHO)  &
        + flow(ACETOL_HCHO)  &
        + flow(MVK_HCHO)  &
        + flow(MVKOOH_HCHO)  &
        + flow(ISOOH_HCHO)  &
        + flow(ISON_HCHO)

      ! ----- CO -----
       R%A(tag_IC_CO,1) =   &
        + flow(CO_sink)  &
        + flow(HCHO_CO)  &
        + flow(C2H4_CO)  &
        + flow(NACA_CO)  &
        + flow(C3H6_CO)  &
        + flow(MGLYOX_CO)  &
        + flow(MVK_CO)  &
        + flow(MVKO2_CO)  &
        + flow(C5H8_CO)  &
        + flow(CO2_CO)  &
        + flow(CH4_CO)  &
        + flow(CH3CHO_CO)  &
        + flow(MVKOOH_CO)

      ! ----- HCOOH -----
       R%A(tag_IC_HCOOH,1) =   &
        + flow(HCOOH_sink)  &
        + flow(C2H4_HCOOH)  &
        + flow(C3H6_HCOOH)  &
        + flow(MVK_HCOOH)  &
        + flow(C5H8_HCOOH)

      ! ----- CO2 -----
       R%A(tag_IC_CO2,1) =   &
        + flow(CO2_sink)  &
        + flow(CO_CO2)  &
        + flow(CH3CO2H_CO2)  &
        + flow(CH3CO3_CO2)  &
        + flow(PAN_CO2)

      ! ----- C2H6 -----
       R%A(tag_IC_C2H6,1) =   &
        + flow(C2H6_sink)

      ! ----- C2H4 -----
       R%A(tag_IC_C2H4,1) =   &
        + flow(C2H4_sink)

      ! ----- C2H2 -----
       R%A(tag_IC_C2H2,1) =   &
        + flow(C2H2_sink)

      ! ----- C2H5O2 -----
       R%A(tag_IC_C2H5O2,1) =   &
        + flow(C2H5O2_sink)  &
        + flow(C2H6_C2H5O2)  &
        + flow(C2H5OOH_C2H5O2)  &
        + flow(C3H8_C2H5O2)  &
        + flow(C3H6_C2H5O2)  &
        + flow(LC4H9O2_C2H5O2)  &
        + flow(LC4H9OOH_C2H5O2)  &
        + flow(MEK_C2H5O2)  &
        + flow(LC4H9NO3_C2H5O2)

      ! ----- C2H5OOH -----
       R%A(tag_IC_C2H5OOH,1) =   &
        + flow(C2H5OOH_sink)  &
        + flow(C2H5O2_C2H5OOH)

      ! ----- CH3CHO -----
       R%A(tag_IC_CH3CHO,1) =   &
        + flow(CH3CHO_sink)  &
        + flow(C2H5O2_CH3CHO)  &
        + flow(C2H5OOH_CH3CHO)  &
        + flow(C3H6_CH3CHO)  &
        + flow(LHOC3H6O2_CH3CHO)  &
        + flow(LC4H9O2_CH3CHO)  &
        + flow(LMEKO2_CH3CHO)  &
        + flow(LC4H9OOH_CH3CHO)  &
        + flow(LMEKOOH_CH3CHO)  &
        + flow(LC4H9NO3_CH3CHO)

      ! ----- CH3CO2H -----
       R%A(tag_IC_CH3CO2H,1) =   &
        + flow(CH3CO2H_sink)  &
        + flow(CH3CO3_CH3CO2H)

      ! ----- CH3CO3 -----
       R%A(tag_IC_CH3CO3,1) =   &
        + flow(CH3CO3_sink)  &
        + flow(CH3CHO_CH3CO3)  &
        + flow(CH3CO3H_CH3CO3)  &
        + flow(PAN_CH3CO3)  &
        + flow(C3H6_CH3CO3)  &
        + flow(CH3COCH2O2_CH3CO3)  &
        + flow(MGLYOX_CH3CO3)  &
        + flow(MVK_CH3CO3)  &
        + flow(MVKO2_CH3CO3)  &
        + flow(LMEKO2_CH3CO3)  &
        + flow(C5H8_CH3CO3)  &
        + flow(CH3COCH3_CH3CO3)  &
        + flow(ACETOL_CH3CO3)  &
        + flow(HYPERACET_CH3CO3)  &
        + flow(MVKOOH_CH3CO3)  &
        + flow(MEK_CH3CO3)  &
        + flow(LMEKOOH_CH3CO3)  &
        + flow(BIACET_CH3CO3)

      ! ----- CH3CO3H -----
       R%A(tag_IC_CH3CO3H,1) =   &
        + flow(CH3CO3H_sink)  &
        + flow(CH3CO3_CH3CO3H)

      ! ----- NACA -----
       R%A(tag_IC_NACA,1) =   &
        + flow(NACA_sink)  &
        + flow(ISON_NACA)

      ! ----- PAN -----
       R%A(tag_IC_PAN,1) =   &
        + flow(PAN_sink)  &
        + flow(CH3CO3_PAN)

      ! ----- C3H8 -----
       R%A(tag_IC_C3H8,1) =   &
        + flow(C3H8_sink)

      ! ----- C3H6 -----
       R%A(tag_IC_C3H6,1) =   &
        + flow(C3H6_sink)

      ! ----- IC3H7O2 -----
       R%A(tag_IC_IC3H7O2,1) =   &
        + flow(IC3H7O2_sink)  &
        + flow(C3H8_IC3H7O2)  &
        + flow(IC3H7OOH_IC3H7O2)

      ! ----- IC3H7OOH -----
       R%A(tag_IC_IC3H7OOH,1) =   &
        + flow(IC3H7OOH_sink)  &
        + flow(IC3H7O2_IC3H7OOH)

      ! ----- LHOC3H6O2 -----
       R%A(tag_IC_LHOC3H6O2,1) =   &
        + flow(LHOC3H6O2_sink)  &
        + flow(C2H4_LHOC3H6O2)  &
        + flow(C3H6_LHOC3H6O2)  &
        + flow(LHOC3H6OOH_LHOC3H6O2)

      ! ----- LHOC3H6OOH -----
       R%A(tag_IC_LHOC3H6OOH,1) =   &
        + flow(LHOC3H6OOH_sink)  &
        + flow(LHOC3H6O2_LHOC3H6OOH)

      ! ----- CH3COCH3 -----
       R%A(tag_IC_CH3COCH3,1) =   &
        + flow(CH3COCH3_sink)  &
        + flow(IC3H7O2_CH3COCH3)  &
        + flow(IC3H7OOH_CH3COCH3)  &
        + flow(IC3H7NO3_CH3COCH3)

      ! ----- CH3COCH2O2 -----
       R%A(tag_IC_CH3COCH2O2,1) =   &
        + flow(CH3COCH2O2_sink)  &
        + flow(CH3COCH3_CH3COCH2O2)  &
        + flow(HYPERACET_CH3COCH2O2)

      ! ----- HYPERACET -----
       R%A(tag_IC_HYPERACET,1) =   &
        + flow(HYPERACET_sink)  &
        + flow(CH3COCH2O2_HYPERACET)

      ! ----- ACETOL -----
       R%A(tag_IC_ACETOL,1) =   &
        + flow(ACETOL_sink)  &
        + flow(LHOC3H6OOH_ACETOL)  &
        + flow(CH3COCH2O2_ACETOL)  &
        + flow(MPAN_ACETOL)  &
        + flow(MVKO2_ACETOL)  &
        + flow(ISO2_ACETOL)  &
        + flow(CH3O2_ACETOL)  &
        + flow(ISON_ACETOL)  &
        + flow(MVKOOH_ACETOL)

      ! ----- MGLYOX -----
       R%A(tag_IC_MGLYOX,1) =   &
        + flow(MGLYOX_sink)  &
        + flow(C3H6_MGLYOX)  &
        + flow(CH3COCH2O2_MGLYOX)  &
        + flow(HYPERACET_MGLYOX)  &
        + flow(ACETOL_MGLYOX)  &
        + flow(MVK_MGLYOX)  &
        + flow(MVKO2_MGLYOX)  &
        + flow(ISO2_MGLYOX)  &
        + flow(CH3O2_MGLYOX)  &
        + flow(MVKOOH_MGLYOX)

      ! ----- MPAN -----
       R%A(tag_IC_MPAN,1) =   &
        + flow(MPAN_sink)  &
        + flow(MVKO2_MPAN)

      ! ----- IC3H7NO3 -----
       R%A(tag_IC_IC3H7NO3,1) =   &
        + flow(IC3H7NO3_sink)  &
        + flow(IC3H7O2_IC3H7NO3)

      ! ----- NC4H10 -----
       R%A(tag_IC_NC4H10,1) =   &
        + flow(NC4H10_sink)

      ! ----- LC4H9O2 -----
       R%A(tag_IC_LC4H9O2,1) =   &
        + flow(LC4H9O2_sink)  &
        + flow(NC4H10_LC4H9O2)  &
        + flow(LC4H9OOH_LC4H9O2)

      ! ----- LC4H9OOH -----
       R%A(tag_IC_LC4H9OOH,1) =   &
        + flow(LC4H9OOH_sink)  &
        + flow(LC4H9O2_LC4H9OOH)

      ! ----- MVK -----
       R%A(tag_IC_MVK,1) =   &
        + flow(MVK_sink)  &
        + flow(C5H8_MVK)  &
        + flow(ISO2_MVK)  &
        + flow(CH3O2_MVK)  &
        + flow(ISOOH_MVK)  &
        + flow(ISON_MVK)

      ! ----- MVKO2 -----
       R%A(tag_IC_MVKO2,1) =   &
        + flow(MVKO2_sink)  &
        + flow(MPAN_MVKO2)  &
        + flow(MVK_MVKO2)  &
        + flow(MVKOOH_MVKO2)  &
        + flow(C5H8_MVKO2)

      ! ----- MVKOOH -----
       R%A(tag_IC_MVKOOH,1) =   &
        + flow(MVKOOH_sink)  &
        + flow(MVKO2_MVKOOH)

      ! ----- MEK -----
       R%A(tag_IC_MEK,1) =   &
        + flow(MEK_sink)  &
        + flow(LC4H9O2_MEK)  &
        + flow(LC4H9OOH_MEK)  &
        + flow(LC4H9NO3_MEK)

      ! ----- LMEKO2 -----
       R%A(tag_IC_LMEKO2,1) =   &
        + flow(LMEKO2_sink)  &
        + flow(MEK_LMEKO2)  &
        + flow(LMEKOOH_LMEKO2)

      ! ----- LMEKOOH -----
       R%A(tag_IC_LMEKOOH,1) =   &
        + flow(LMEKOOH_sink)  &
        + flow(LMEKO2_LMEKOOH)

      ! ----- BIACET -----
       R%A(tag_IC_BIACET,1) =   &
        + flow(BIACET_sink)  &
        + flow(LMEKOOH_BIACET)

      ! ----- LC4H9NO3 -----
       R%A(tag_IC_LC4H9NO3,1) =   &
        + flow(LC4H9NO3_sink)  &
        + flow(C3H6_LC4H9NO3)  &
        + flow(LHOC3H6O2_LC4H9NO3)  &
        + flow(LC4H9O2_LC4H9NO3)  &
        + flow(LMEKO2_LC4H9NO3)

      ! ----- C5H8 -----
       R%A(tag_IC_C5H8,1) =   &
        + flow(C5H8_sink)

      ! ----- ISO2 -----
       R%A(tag_IC_ISO2,1) =   &
        + flow(ISO2_sink)  &
        + flow(C5H8_ISO2)

      ! ----- ISOOH -----
       R%A(tag_IC_ISOOH,1) =   &
        + flow(ISOOH_sink)  &
        + flow(ISO2_ISOOH)

      ! ----- ISON -----
       R%A(tag_IC_ISON,1) =   &
        + flow(ISON_sink)  &
        + flow(C5H8_ISON)  &
        + flow(ISO2_ISON)

      ! ----- CCl4 -----
       R%A(tag_IC_CCl4,1) =   &
        + flow(CCl4_sink)

      ! ----- CH3Cl -----
       R%A(tag_IC_CH3Cl,1) =   &
        + flow(CH3Cl_sink)

      ! ----- CH3CCl3 -----
       R%A(tag_IC_CH3CCl3,1) =   &
        + flow(CH3CCl3_sink)

      ! ----- CF2Cl2 -----
       R%A(tag_IC_CF2Cl2,1) =   &
        + flow(CF2Cl2_sink)

      ! ----- CFCl3 -----
       R%A(tag_IC_CFCl3,1) =   &
        + flow(CFCl3_sink)

      ! ----- CH3Br -----
       R%A(tag_IC_CH3Br,1) =   &
        + flow(CH3Br_sink)

      ! ----- CF3Br -----
       R%A(tag_IC_CF3Br,1) =   &
        + flow(CF3Br_sink)

      ! ----- CF2ClBr -----
       R%A(tag_IC_CF2ClBr,1) =   &
        + flow(CF2ClBr_sink)

      ! ----- CH3SO3H -----
       R%A(tag_IC_CH3SO3H,1) =   &
        + flow(DMSO_CH3SO3H)  &
        + flow(CH3SO3_CH3SO3H)

      ! ----- DMS -----
       R%A(tag_IC_DMS,1) =   &
        + flow(DMS_sink)

      ! ----- DMSO -----
       R%A(tag_IC_DMSO,1) =   &
        + flow(DMSO_sink)  &
        + flow(DMS_DMSO)

      ! ----- CH3SO2 -----
       R%A(tag_IC_CH3SO2,1) =   &
        + flow(CH3SO2_sink)  &
        + flow(DMS_CH3SO2)

      ! ----- CH3SO3 -----
       R%A(tag_IC_CH3SO3,1) =   &
        + flow(CH3SO3_sink)  &
        + flow(CH3SO2_CH3SO3)

    ! new ratios

    ! ===== tag_IC:        D%R(tag_IC_#,2) <- R%R(tag_IC_$,2) * D%A(tag_IC_$,1) + ... ) =====

      ! ----- CH4 -----  WARN: indicated as fixed species
       D%R(tag_IC_CH4,2) =   &
        + R%R(tag_IC_CH4,2) * D%A(tag_IC_CH4,1)  &
        + R%R(tag_IC_C3H6,2) * D%A(tag_IC_C3H6,1)

      ! ----- CH3OH -----
       D%R(tag_IC_CH3OH,2) =   &
        + R%R(tag_IC_CH3OH,2) * D%A(tag_IC_CH3OH,1)  &
        + R%R(tag_IC_CH3O2,2) * D%A(tag_IC_CH3O2,1)  &
        + R%R(tag_IC_C3H6,2) * D%A(tag_IC_C3H6,1)  &
        + R%R(tag_IC_ISO2,2) * D%A(tag_IC_ISO2,1)

      ! ----- CH3O2 -----
       D%R(tag_IC_CH3O2,2) =   &
        + R%R(tag_IC_CH3O2,2) * D%A(tag_IC_CH3O2,1)  &
        + R%R(tag_IC_CH4,2) * D%A(tag_IC_CH4,1)  &
        + R%R(tag_IC_CH3OOH,2) * D%A(tag_IC_CH3OOH,1)  &
        + R%R(tag_IC_CH3CO2H,2) * D%A(tag_IC_CH3CO2H,1)  &
        + R%R(tag_IC_CH3CO3,2) * D%A(tag_IC_CH3CO3,1)  &
        + R%R(tag_IC_C2H2,2) * D%A(tag_IC_C2H2,1)  &
        + R%R(tag_IC_C3H6,2) * D%A(tag_IC_C3H6,1)  &
        + R%R(tag_IC_C5H8,2) * D%A(tag_IC_C5H8,1)  &
        + R%R(tag_IC_DMSO,2) * D%A(tag_IC_DMSO,1)  &
        + R%R(tag_IC_CH3SO2,2) * D%A(tag_IC_CH3SO2,1)  &
        + R%R(tag_IC_CH3CHO,2) * D%A(tag_IC_CH3CHO,1)  &
        + R%R(tag_IC_CH3CO3H,2) * D%A(tag_IC_CH3CO3H,1)  &
        + R%R(tag_IC_PAN,2) * D%A(tag_IC_PAN,1)  &
        + R%R(tag_IC_CH3COCH3,2) * D%A(tag_IC_CH3COCH3,1)  &
        + R%R(tag_IC_CH3Cl,2) * D%A(tag_IC_CH3Cl,1)  &
        + R%R(tag_IC_CH3Br,2) * D%A(tag_IC_CH3Br,1)

      ! ----- CH3OOH -----
       D%R(tag_IC_CH3OOH,2) =   &
        + R%R(tag_IC_CH3OOH,2) * D%A(tag_IC_CH3OOH,1)  &
        + R%R(tag_IC_CH3O2,2) * D%A(tag_IC_CH3O2,1)

      ! ----- HCHO -----
       D%R(tag_IC_HCHO,2) =   &
        + R%R(tag_IC_HCHO,2) * D%A(tag_IC_HCHO,1)  &
        + R%R(tag_IC_CH4,2) * D%A(tag_IC_CH4,1)  &
        + R%R(tag_IC_CH3OH,2) * D%A(tag_IC_CH3OH,1)  &
        + R%R(tag_IC_CH3O2,2) * D%A(tag_IC_CH3O2,1)  &
        + R%R(tag_IC_CH3OOH,2) * D%A(tag_IC_CH3OOH,1)  &
        + R%R(tag_IC_C2H4,2) * D%A(tag_IC_C2H4,1)  &
        + R%R(tag_IC_NACA,2) * D%A(tag_IC_NACA,1)  &
        + R%R(tag_IC_PAN,2) * D%A(tag_IC_PAN,1)  &
        + R%R(tag_IC_C3H6,2) * D%A(tag_IC_C3H6,1)  &
        + R%R(tag_IC_LHOC3H6O2,2) * D%A(tag_IC_LHOC3H6O2,1)  &
        + R%R(tag_IC_CH3COCH2O2,2) * D%A(tag_IC_CH3COCH2O2,1)  &
        + R%R(tag_IC_MVKO2,2) * D%A(tag_IC_MVKO2,1)  &
        + R%R(tag_IC_C5H8,2) * D%A(tag_IC_C5H8,1)  &
        + R%R(tag_IC_ISO2,2) * D%A(tag_IC_ISO2,1)  &
        + R%R(tag_IC_DMS,2) * D%A(tag_IC_DMS,1)  &
        + R%R(tag_IC_DMSO,2) * D%A(tag_IC_DMSO,1)  &
        + R%R(tag_IC_ACETOL,2) * D%A(tag_IC_ACETOL,1)  &
        + R%R(tag_IC_MVK,2) * D%A(tag_IC_MVK,1)  &
        + R%R(tag_IC_MVKOOH,2) * D%A(tag_IC_MVKOOH,1)  &
        + R%R(tag_IC_ISOOH,2) * D%A(tag_IC_ISOOH,1)  &
        + R%R(tag_IC_ISON,2) * D%A(tag_IC_ISON,1)

      ! ----- CO -----
       D%R(tag_IC_CO,2) =   &
        + R%R(tag_IC_CO,2) * D%A(tag_IC_CO,1)  &
        + R%R(tag_IC_HCHO,2) * D%A(tag_IC_HCHO,1)  &
        + R%R(tag_IC_C2H4,2) * D%A(tag_IC_C2H4,1)  &
        + R%R(tag_IC_NACA,2) * D%A(tag_IC_NACA,1)  &
        + R%R(tag_IC_C3H6,2) * D%A(tag_IC_C3H6,1)  &
        + R%R(tag_IC_MGLYOX,2) * D%A(tag_IC_MGLYOX,1)  &
        + R%R(tag_IC_MVK,2) * D%A(tag_IC_MVK,1)  &
        + R%R(tag_IC_MVKO2,2) * D%A(tag_IC_MVKO2,1)  &
        + R%R(tag_IC_C5H8,2) * D%A(tag_IC_C5H8,1)  &
        + R%R(tag_IC_CO2,2) * D%A(tag_IC_CO2,1)  &
        + R%R(tag_IC_CH4,2) * D%A(tag_IC_CH4,1)  &
        + R%R(tag_IC_CH3CHO,2) * D%A(tag_IC_CH3CHO,1)  &
        + R%R(tag_IC_MVKOOH,2) * D%A(tag_IC_MVKOOH,1)

      ! ----- HCOOH -----
       D%R(tag_IC_HCOOH,2) =   &
        + R%R(tag_IC_HCOOH,2) * D%A(tag_IC_HCOOH,1)  &
        + R%R(tag_IC_C2H4,2) * D%A(tag_IC_C2H4,1)  &
        + R%R(tag_IC_C3H6,2) * D%A(tag_IC_C3H6,1)  &
        + R%R(tag_IC_MVK,2) * D%A(tag_IC_MVK,1)  &
        + R%R(tag_IC_C5H8,2) * D%A(tag_IC_C5H8,1)

      ! ----- CO2 -----
       D%R(tag_IC_CO2,2) =   &
        + R%R(tag_IC_CO2,2) * D%A(tag_IC_CO2,1)  &
        + R%R(tag_IC_CO,2) * D%A(tag_IC_CO,1)  &
        + R%R(tag_IC_CH3CO2H,2) * D%A(tag_IC_CH3CO2H,1)  &
        + R%R(tag_IC_CH3CO3,2) * D%A(tag_IC_CH3CO3,1)  &
        + R%R(tag_IC_PAN,2) * D%A(tag_IC_PAN,1)

      ! ----- C2H6 -----
       D%R(tag_IC_C2H6,2) =   &
        + R%R(tag_IC_C2H6,2) * D%A(tag_IC_C2H6,1)

      ! ----- C2H4 -----
       D%R(tag_IC_C2H4,2) =   &
        + R%R(tag_IC_C2H4,2) * D%A(tag_IC_C2H4,1)

      ! ----- C2H2 -----
       D%R(tag_IC_C2H2,2) =   &
        + R%R(tag_IC_C2H2,2) * D%A(tag_IC_C2H2,1)

      ! ----- C2H5O2 -----
       D%R(tag_IC_C2H5O2,2) =   &
        + R%R(tag_IC_C2H5O2,2) * D%A(tag_IC_C2H5O2,1)  &
        + R%R(tag_IC_C2H6,2) * D%A(tag_IC_C2H6,1)  &
        + R%R(tag_IC_C2H5OOH,2) * D%A(tag_IC_C2H5OOH,1)  &
        + R%R(tag_IC_C3H8,2) * D%A(tag_IC_C3H8,1)  &
        + R%R(tag_IC_C3H6,2) * D%A(tag_IC_C3H6,1)  &
        + R%R(tag_IC_LC4H9O2,2) * D%A(tag_IC_LC4H9O2,1)  &
        + R%R(tag_IC_LC4H9OOH,2) * D%A(tag_IC_LC4H9OOH,1)  &
        + R%R(tag_IC_MEK,2) * D%A(tag_IC_MEK,1)  &
        + R%R(tag_IC_LC4H9NO3,2) * D%A(tag_IC_LC4H9NO3,1)

      ! ----- C2H5OOH -----
       D%R(tag_IC_C2H5OOH,2) =   &
        + R%R(tag_IC_C2H5OOH,2) * D%A(tag_IC_C2H5OOH,1)  &
        + R%R(tag_IC_C2H5O2,2) * D%A(tag_IC_C2H5O2,1)

      ! ----- CH3CHO -----
       D%R(tag_IC_CH3CHO,2) =   &
        + R%R(tag_IC_CH3CHO,2) * D%A(tag_IC_CH3CHO,1)  &
        + R%R(tag_IC_C2H5O2,2) * D%A(tag_IC_C2H5O2,1)  &
        + R%R(tag_IC_C2H5OOH,2) * D%A(tag_IC_C2H5OOH,1)  &
        + R%R(tag_IC_C3H6,2) * D%A(tag_IC_C3H6,1)  &
        + R%R(tag_IC_LHOC3H6O2,2) * D%A(tag_IC_LHOC3H6O2,1)  &
        + R%R(tag_IC_LC4H9O2,2) * D%A(tag_IC_LC4H9O2,1)  &
        + R%R(tag_IC_LMEKO2,2) * D%A(tag_IC_LMEKO2,1)  &
        + R%R(tag_IC_LC4H9OOH,2) * D%A(tag_IC_LC4H9OOH,1)  &
        + R%R(tag_IC_LMEKOOH,2) * D%A(tag_IC_LMEKOOH,1)  &
        + R%R(tag_IC_LC4H9NO3,2) * D%A(tag_IC_LC4H9NO3,1)

      ! ----- CH3CO2H -----
       D%R(tag_IC_CH3CO2H,2) =   &
        + R%R(tag_IC_CH3CO2H,2) * D%A(tag_IC_CH3CO2H,1)  &
        + R%R(tag_IC_CH3CO3,2) * D%A(tag_IC_CH3CO3,1)

      ! ----- CH3CO3 -----
       D%R(tag_IC_CH3CO3,2) =   &
        + R%R(tag_IC_CH3CO3,2) * D%A(tag_IC_CH3CO3,1)  &
        + R%R(tag_IC_CH3CHO,2) * D%A(tag_IC_CH3CHO,1)  &
        + R%R(tag_IC_CH3CO3H,2) * D%A(tag_IC_CH3CO3H,1)  &
        + R%R(tag_IC_PAN,2) * D%A(tag_IC_PAN,1)  &
        + R%R(tag_IC_C3H6,2) * D%A(tag_IC_C3H6,1)  &
        + R%R(tag_IC_CH3COCH2O2,2) * D%A(tag_IC_CH3COCH2O2,1)  &
        + R%R(tag_IC_MGLYOX,2) * D%A(tag_IC_MGLYOX,1)  &
        + R%R(tag_IC_MVK,2) * D%A(tag_IC_MVK,1)  &
        + R%R(tag_IC_MVKO2,2) * D%A(tag_IC_MVKO2,1)  &
        + R%R(tag_IC_LMEKO2,2) * D%A(tag_IC_LMEKO2,1)  &
        + R%R(tag_IC_C5H8,2) * D%A(tag_IC_C5H8,1)  &
        + R%R(tag_IC_CH3COCH3,2) * D%A(tag_IC_CH3COCH3,1)  &
        + R%R(tag_IC_ACETOL,2) * D%A(tag_IC_ACETOL,1)  &
        + R%R(tag_IC_HYPERACET,2) * D%A(tag_IC_HYPERACET,1)  &
        + R%R(tag_IC_MVKOOH,2) * D%A(tag_IC_MVKOOH,1)  &
        + R%R(tag_IC_MEK,2) * D%A(tag_IC_MEK,1)  &
        + R%R(tag_IC_LMEKOOH,2) * D%A(tag_IC_LMEKOOH,1)  &
        + R%R(tag_IC_BIACET,2) * D%A(tag_IC_BIACET,1)

      ! ----- CH3CO3H -----
       D%R(tag_IC_CH3CO3H,2) =   &
        + R%R(tag_IC_CH3CO3H,2) * D%A(tag_IC_CH3CO3H,1)  &
        + R%R(tag_IC_CH3CO3,2) * D%A(tag_IC_CH3CO3,1)

      ! ----- NACA -----
       D%R(tag_IC_NACA,2) =   &
        + R%R(tag_IC_NACA,2) * D%A(tag_IC_NACA,1)  &
        + R%R(tag_IC_ISON,2) * D%A(tag_IC_ISON,1)

      ! ----- PAN -----
       D%R(tag_IC_PAN,2) =   &
        + R%R(tag_IC_PAN,2) * D%A(tag_IC_PAN,1)  &
        + R%R(tag_IC_CH3CO3,2) * D%A(tag_IC_CH3CO3,1)

      ! ----- C3H8 -----
       D%R(tag_IC_C3H8,2) =   &
        + R%R(tag_IC_C3H8,2) * D%A(tag_IC_C3H8,1)

      ! ----- C3H6 -----
       D%R(tag_IC_C3H6,2) =   &
        + R%R(tag_IC_C3H6,2) * D%A(tag_IC_C3H6,1)

      ! ----- IC3H7O2 -----
       D%R(tag_IC_IC3H7O2,2) =   &
        + R%R(tag_IC_IC3H7O2,2) * D%A(tag_IC_IC3H7O2,1)  &
        + R%R(tag_IC_C3H8,2) * D%A(tag_IC_C3H8,1)  &
        + R%R(tag_IC_IC3H7OOH,2) * D%A(tag_IC_IC3H7OOH,1)

      ! ----- IC3H7OOH -----
       D%R(tag_IC_IC3H7OOH,2) =   &
        + R%R(tag_IC_IC3H7OOH,2) * D%A(tag_IC_IC3H7OOH,1)  &
        + R%R(tag_IC_IC3H7O2,2) * D%A(tag_IC_IC3H7O2,1)

      ! ----- LHOC3H6O2 -----
       D%R(tag_IC_LHOC3H6O2,2) =   &
        + R%R(tag_IC_LHOC3H6O2,2) * D%A(tag_IC_LHOC3H6O2,1)  &
        + R%R(tag_IC_C2H4,2) * D%A(tag_IC_C2H4,1)  &
        + R%R(tag_IC_C3H6,2) * D%A(tag_IC_C3H6,1)  &
        + R%R(tag_IC_LHOC3H6OOH,2) * D%A(tag_IC_LHOC3H6OOH,1)

      ! ----- LHOC3H6OOH -----
       D%R(tag_IC_LHOC3H6OOH,2) =   &
        + R%R(tag_IC_LHOC3H6OOH,2) * D%A(tag_IC_LHOC3H6OOH,1)  &
        + R%R(tag_IC_LHOC3H6O2,2) * D%A(tag_IC_LHOC3H6O2,1)

      ! ----- CH3COCH3 -----
       D%R(tag_IC_CH3COCH3,2) =   &
        + R%R(tag_IC_CH3COCH3,2) * D%A(tag_IC_CH3COCH3,1)  &
        + R%R(tag_IC_IC3H7O2,2) * D%A(tag_IC_IC3H7O2,1)  &
        + R%R(tag_IC_IC3H7OOH,2) * D%A(tag_IC_IC3H7OOH,1)  &
        + R%R(tag_IC_IC3H7NO3,2) * D%A(tag_IC_IC3H7NO3,1)

      ! ----- CH3COCH2O2 -----
       D%R(tag_IC_CH3COCH2O2,2) =   &
        + R%R(tag_IC_CH3COCH2O2,2) * D%A(tag_IC_CH3COCH2O2,1)  &
        + R%R(tag_IC_CH3COCH3,2) * D%A(tag_IC_CH3COCH3,1)  &
        + R%R(tag_IC_HYPERACET,2) * D%A(tag_IC_HYPERACET,1)

      ! ----- HYPERACET -----
       D%R(tag_IC_HYPERACET,2) =   &
        + R%R(tag_IC_HYPERACET,2) * D%A(tag_IC_HYPERACET,1)  &
        + R%R(tag_IC_CH3COCH2O2,2) * D%A(tag_IC_CH3COCH2O2,1)

      ! ----- ACETOL -----
       D%R(tag_IC_ACETOL,2) =   &
        + R%R(tag_IC_ACETOL,2) * D%A(tag_IC_ACETOL,1)  &
        + R%R(tag_IC_LHOC3H6OOH,2) * D%A(tag_IC_LHOC3H6OOH,1)  &
        + R%R(tag_IC_CH3COCH2O2,2) * D%A(tag_IC_CH3COCH2O2,1)  &
        + R%R(tag_IC_MPAN,2) * D%A(tag_IC_MPAN,1)  &
        + R%R(tag_IC_MVKO2,2) * D%A(tag_IC_MVKO2,1)  &
        + R%R(tag_IC_ISO2,2) * D%A(tag_IC_ISO2,1)  &
        + R%R(tag_IC_CH3O2,2) * D%A(tag_IC_CH3O2,1)  &
        + R%R(tag_IC_ISON,2) * D%A(tag_IC_ISON,1)  &
        + R%R(tag_IC_MVKOOH,2) * D%A(tag_IC_MVKOOH,1)

      ! ----- MGLYOX -----
       D%R(tag_IC_MGLYOX,2) =   &
        + R%R(tag_IC_MGLYOX,2) * D%A(tag_IC_MGLYOX,1)  &
        + R%R(tag_IC_C3H6,2) * D%A(tag_IC_C3H6,1)  &
        + R%R(tag_IC_CH3COCH2O2,2) * D%A(tag_IC_CH3COCH2O2,1)  &
        + R%R(tag_IC_HYPERACET,2) * D%A(tag_IC_HYPERACET,1)  &
        + R%R(tag_IC_ACETOL,2) * D%A(tag_IC_ACETOL,1)  &
        + R%R(tag_IC_MVK,2) * D%A(tag_IC_MVK,1)  &
        + R%R(tag_IC_MVKO2,2) * D%A(tag_IC_MVKO2,1)  &
        + R%R(tag_IC_ISO2,2) * D%A(tag_IC_ISO2,1)  &
        + R%R(tag_IC_CH3O2,2) * D%A(tag_IC_CH3O2,1)  &
        + R%R(tag_IC_MVKOOH,2) * D%A(tag_IC_MVKOOH,1)

      ! ----- MPAN -----
       D%R(tag_IC_MPAN,2) =   &
        + R%R(tag_IC_MPAN,2) * D%A(tag_IC_MPAN,1)  &
        + R%R(tag_IC_MVKO2,2) * D%A(tag_IC_MVKO2,1)

      ! ----- IC3H7NO3 -----
       D%R(tag_IC_IC3H7NO3,2) =   &
        + R%R(tag_IC_IC3H7NO3,2) * D%A(tag_IC_IC3H7NO3,1)  &
        + R%R(tag_IC_IC3H7O2,2) * D%A(tag_IC_IC3H7O2,1)

      ! ----- NC4H10 -----
       D%R(tag_IC_NC4H10,2) =   &
        + R%R(tag_IC_NC4H10,2) * D%A(tag_IC_NC4H10,1)

      ! ----- LC4H9O2 -----
       D%R(tag_IC_LC4H9O2,2) =   &
        + R%R(tag_IC_LC4H9O2,2) * D%A(tag_IC_LC4H9O2,1)  &
        + R%R(tag_IC_NC4H10,2) * D%A(tag_IC_NC4H10,1)  &
        + R%R(tag_IC_LC4H9OOH,2) * D%A(tag_IC_LC4H9OOH,1)

      ! ----- LC4H9OOH -----
       D%R(tag_IC_LC4H9OOH,2) =   &
        + R%R(tag_IC_LC4H9OOH,2) * D%A(tag_IC_LC4H9OOH,1)  &
        + R%R(tag_IC_LC4H9O2,2) * D%A(tag_IC_LC4H9O2,1)

      ! ----- MVK -----
       D%R(tag_IC_MVK,2) =   &
        + R%R(tag_IC_MVK,2) * D%A(tag_IC_MVK,1)  &
        + R%R(tag_IC_C5H8,2) * D%A(tag_IC_C5H8,1)  &
        + R%R(tag_IC_ISO2,2) * D%A(tag_IC_ISO2,1)  &
        + R%R(tag_IC_CH3O2,2) * D%A(tag_IC_CH3O2,1)  &
        + R%R(tag_IC_ISOOH,2) * D%A(tag_IC_ISOOH,1)  &
        + R%R(tag_IC_ISON,2) * D%A(tag_IC_ISON,1)

      ! ----- MVKO2 -----
       D%R(tag_IC_MVKO2,2) =   &
        + R%R(tag_IC_MVKO2,2) * D%A(tag_IC_MVKO2,1)  &
        + R%R(tag_IC_MPAN,2) * D%A(tag_IC_MPAN,1)  &
        + R%R(tag_IC_MVK,2) * D%A(tag_IC_MVK,1)  &
        + R%R(tag_IC_MVKOOH,2) * D%A(tag_IC_MVKOOH,1)  &
        + R%R(tag_IC_C5H8,2) * D%A(tag_IC_C5H8,1)

      ! ----- MVKOOH -----
       D%R(tag_IC_MVKOOH,2) =   &
        + R%R(tag_IC_MVKOOH,2) * D%A(tag_IC_MVKOOH,1)  &
        + R%R(tag_IC_MVKO2,2) * D%A(tag_IC_MVKO2,1)

      ! ----- MEK -----
       D%R(tag_IC_MEK,2) =   &
        + R%R(tag_IC_MEK,2) * D%A(tag_IC_MEK,1)  &
        + R%R(tag_IC_LC4H9O2,2) * D%A(tag_IC_LC4H9O2,1)  &
        + R%R(tag_IC_LC4H9OOH,2) * D%A(tag_IC_LC4H9OOH,1)  &
        + R%R(tag_IC_LC4H9NO3,2) * D%A(tag_IC_LC4H9NO3,1)

      ! ----- LMEKO2 -----
       D%R(tag_IC_LMEKO2,2) =   &
        + R%R(tag_IC_LMEKO2,2) * D%A(tag_IC_LMEKO2,1)  &
        + R%R(tag_IC_MEK,2) * D%A(tag_IC_MEK,1)  &
        + R%R(tag_IC_LMEKOOH,2) * D%A(tag_IC_LMEKOOH,1)

      ! ----- LMEKOOH -----
       D%R(tag_IC_LMEKOOH,2) =   &
        + R%R(tag_IC_LMEKOOH,2) * D%A(tag_IC_LMEKOOH,1)  &
        + R%R(tag_IC_LMEKO2,2) * D%A(tag_IC_LMEKO2,1)

      ! ----- BIACET -----
       D%R(tag_IC_BIACET,2) =   &
        + R%R(tag_IC_BIACET,2) * D%A(tag_IC_BIACET,1)  &
        + R%R(tag_IC_LMEKOOH,2) * D%A(tag_IC_LMEKOOH,1)

      ! ----- LC4H9NO3 -----
       D%R(tag_IC_LC4H9NO3,2) =   &
        + R%R(tag_IC_LC4H9NO3,2) * D%A(tag_IC_LC4H9NO3,1)  &
        + R%R(tag_IC_C3H6,2) * D%A(tag_IC_C3H6,1)  &
        + R%R(tag_IC_LHOC3H6O2,2) * D%A(tag_IC_LHOC3H6O2,1)  &
        + R%R(tag_IC_LC4H9O2,2) * D%A(tag_IC_LC4H9O2,1)  &
        + R%R(tag_IC_LMEKO2,2) * D%A(tag_IC_LMEKO2,1)

      ! ----- C5H8 -----
       D%R(tag_IC_C5H8,2) =   &
        + R%R(tag_IC_C5H8,2) * D%A(tag_IC_C5H8,1)

      ! ----- ISO2 -----
       D%R(tag_IC_ISO2,2) =   &
        + R%R(tag_IC_ISO2,2) * D%A(tag_IC_ISO2,1)  &
        + R%R(tag_IC_C5H8,2) * D%A(tag_IC_C5H8,1)

      ! ----- ISOOH -----
       D%R(tag_IC_ISOOH,2) =   &
        + R%R(tag_IC_ISOOH,2) * D%A(tag_IC_ISOOH,1)  &
        + R%R(tag_IC_ISO2,2) * D%A(tag_IC_ISO2,1)

      ! ----- ISON -----
       D%R(tag_IC_ISON,2) =   &
        + R%R(tag_IC_ISON,2) * D%A(tag_IC_ISON,1)  &
        + R%R(tag_IC_C5H8,2) * D%A(tag_IC_C5H8,1)  &
        + R%R(tag_IC_ISO2,2) * D%A(tag_IC_ISO2,1)

      ! ----- CCl4 -----
       D%R(tag_IC_CCl4,2) =   &
        + R%R(tag_IC_CCl4,2) * D%A(tag_IC_CCl4,1)

      ! ----- CH3Cl -----
       D%R(tag_IC_CH3Cl,2) =   &
        + R%R(tag_IC_CH3Cl,2) * D%A(tag_IC_CH3Cl,1)

      ! ----- CH3CCl3 -----
       D%R(tag_IC_CH3CCl3,2) =   &
        + R%R(tag_IC_CH3CCl3,2) * D%A(tag_IC_CH3CCl3,1)

      ! ----- CF2Cl2 -----
       D%R(tag_IC_CF2Cl2,2) =   &
        + R%R(tag_IC_CF2Cl2,2) * D%A(tag_IC_CF2Cl2,1)

      ! ----- CFCl3 -----
       D%R(tag_IC_CFCl3,2) =   &
        + R%R(tag_IC_CFCl3,2) * D%A(tag_IC_CFCl3,1)

      ! ----- CH3Br -----
       D%R(tag_IC_CH3Br,2) =   &
        + R%R(tag_IC_CH3Br,2) * D%A(tag_IC_CH3Br,1)

      ! ----- CF3Br -----
       D%R(tag_IC_CF3Br,2) =   &
        + R%R(tag_IC_CF3Br,2) * D%A(tag_IC_CF3Br,1)

      ! ----- CF2ClBr -----
       D%R(tag_IC_CF2ClBr,2) =   &
        + R%R(tag_IC_CF2ClBr,2) * D%A(tag_IC_CF2ClBr,1)

      ! ----- CH3SO3H -----
       D%R(tag_IC_CH3SO3H,2) =   &
        + R%R(tag_IC_DMSO,2) * D%A(tag_IC_DMSO,1)  &
        + R%R(tag_IC_CH3SO3,2) * D%A(tag_IC_CH3SO3,1)

      ! ----- DMS -----
       D%R(tag_IC_DMS,2) =   &
        + R%R(tag_IC_DMS,2) * D%A(tag_IC_DMS,1)

      ! ----- DMSO -----
       D%R(tag_IC_DMSO,2) =   &
        + R%R(tag_IC_DMSO,2) * D%A(tag_IC_DMSO,1)  &
        + R%R(tag_IC_DMS,2) * D%A(tag_IC_DMS,1)

      ! ----- CH3SO2 -----
       D%R(tag_IC_CH3SO2,2) =   &
        + R%R(tag_IC_CH3SO2,2) * D%A(tag_IC_CH3SO2,1)  &
        + R%R(tag_IC_DMS,2) * D%A(tag_IC_DMS,1)

      ! ----- CH3SO3 -----
       D%R(tag_IC_CH3SO3,2) =   &
        + R%R(tag_IC_CH3SO3,2) * D%A(tag_IC_CH3SO3,1)  &
        + R%R(tag_IC_CH3SO2,2) * D%A(tag_IC_CH3SO2,1)

    ! converting ratios to the atoms

      DO k = 2, NTCISO
        WHERE ( D%A(:,1) .NE. 0.0_dp )
        ! rare atom in minor isotopologues
          D%R(:,k) = 1.0_dp / ( 1.0_dp / D%R(:,k) + 1.0_dp / R%A(:,1) )
        ELSEWHERE
          D%R(:,k) = 0.0_dp
        ENDWHERE
      ! abundant atom in minor isotopologues
        D%A(:,k) = D%R(:,k) * (QTCATOM(:)-1)
      ENDDO

    ! major isotopologue
      D%A(:,1) = D%R(:,2) / R%A(:,1)

    ! redirecting abundand atom to construct valid minor isotopologues
      D%A(:,1) = D%A(:,1) - SUM(D%A(:,2:NTCSPEC),DIM=2)
      
    ! performance: counting derivative calculations #
      tag_IC_NDEREV = tag_IC_NDEREV + 1

    ! redirecting abundand atom to construct valid minor isotopologues
      D%A(:,1) = D%A(:,1) - SUM(D%A(:,2:NTCISO),DIM=2)
      
    ! performance: counting derivative calculations #
      tag_IC_NDEREV = tag_IC_NDEREV + 1

    END SUBROUTINE iderivs_ratio

  ! ----------------------------------------------------------------------------

#ifdef INT_CG1

    SUBROUTINE step_CG1(u0,delta,un)
    
      IMPLICIT NONE
      
    ! in: atomic content
      TYPE (TCOMP), INTENT(INOUT) :: u0
    ! step
      REAL(dp), INTENT(IN)        :: delta
    ! out: CG1 step solution
      TYPE (TCOMP), INTENT(INOUT) :: un
      
    ! internal: resudials
      REAL(dp)                    :: r0, r1

    ! internal: temporary
      TYPE (TCOMP)                :: us

      niter = 1
      
    ! largest eigenvalue
      lev = 1

    ! damping
      damp = .FALSE.
    
    ! getting first discrete resudial(u0,u0,delta)
      CALL iderivs_atom(u0,us,F)
      r0 = MAX( MAXVAL( -us%A ), MAXVAL( -us%R ) )
      
    ! remove (niter .EQ. 1) to have make solve i little more intelligent

      us = u0

      DO WHILE ((r0 .GT. TOL) .OR. (niter .EQ. 1))
      
      ! making iteration
        CALL iderivs_atom(u0,us,F)
        
        un%A = u0%A + delta * us%A
        un%R = u0%R + delta * us%R
        
      ! computing discrete resudial
        us%A = 0.5_dp * (u0%A + un%A)
        us%R = 0.5_dp * (u0%R + un%R)
        r1 = MAX( MAXVAL( (un%A-u0%A)/delta - us%A ), &
                  MAXVAL( (un%R-u0%R)/delta - us%R ) )

      ! largest eigenvalue
        IF (r0 .GT. 0) THEN
          lev = 2.0_dp * ( r1/r0 ) / delta
        ELSE
          lev = 1.0_dp
        ENDIF
        
      ! do not continue if iterations do not converge
        IF ( ((r1 .GT. r0) .AND. (r1 .GT. TOL)) .OR. (niter .GT. 10) ) THEN
          damp = .TRUE.
          EXIT
        ENDIF

      ! updating iterations count and new resudial        
        niter = niter + 1
        r0 = r1
        
      ENDDO

    END SUBROUTINE step_CG1
#endif

  ! ---------------------------------------------------------------------------

#ifdef INT_USEJAC
    SUBROUTINE prepare_Z(Z,akind,stepping)

      IMPLICIT NONE
      
      INTRINSIC SUM
      
      REAL(dp), INTENT(INOUT) :: Z(NTCSPEC)

      INTEGER, INTENT(in) :: akind           ! "weighting": fractions of current & already calculated budgets
      REAL(dp), INTENT(in) :: stepping       ! # of steps

      ! coefficients are chosen empirically, need to understand
      SELECT CASE (akind)
      CASE (0)
        Z(:) = 1.0_dp
      CASE (1)
        Z(:) = SUM(ISOC(:,:),DIM=2)
      CASE (2)
        Z(:) = 0.75_dp * SUM(ISOC(:,:),DIM=2) + 0.25_dp * C(RTCIND(:))
      CASE DEFAULT     ! or 3
        Z(:) = 0.5_dp * (SUM(ISOC(:,:),DIM=2) + C(RTCIND(:)))
      CASE (4)
        Z(:) = 0.25_dp * SUM(ISOC(:,:),DIM=2) + 0.75_dp * C(RTCIND(:))
      CASE (5)
        Z(:) = C(RTCIND(:))
      END SELECT
      
      Z(:) = Z(:) * stepping

    END SUBROUTINE prepare_Z
    
  ! ---------------------------------------------------------------------------

    SUBROUTINE prepare_J(J,pre_inv)

      IMPLICIT NONE
      
      REAL(dp), INTENT(INOUT) :: J(NTCSPEC,NTCSPEC,NTCISO)
      
      LOGICAL, INTENT(in) :: pre_inv         ! do a preparation for a further J inversion? 
                                             !   i.e. J = (I - J/stepping)    -> ^(-1)
      INTEGER :: n

      J(:,:,1) = 0.0_dp

      ! weights (Z) should be defined by this moment

      J(tag_IC_CH4,tag_IC_CH4,1) = flow(CH4_sink)
      J(tag_IC_CH3O2,tag_IC_CH4,1) = flow(CH4_CH3O2)
      J(tag_IC_HCHO,tag_IC_CH4,1) = flow(CH4_HCHO)
      J(tag_IC_CO,tag_IC_CH4,1) = flow(CH4_CO)
      J(tag_IC_CH3OH,tag_IC_CH3OH,1) = flow(CH3OH_sink)
      J(tag_IC_HCHO,tag_IC_CH3OH,1) = flow(CH3OH_HCHO)
      J(tag_IC_CH3OH,tag_IC_CH3O2,1) = flow(CH3O2_CH3OH)
      J(tag_IC_CH3O2,tag_IC_CH3O2,1) = flow(CH3O2_sink)
      J(tag_IC_CH3OOH,tag_IC_CH3O2,1) = flow(CH3O2_CH3OOH)
      J(tag_IC_HCHO,tag_IC_CH3O2,1) = flow(CH3O2_HCHO)
      J(tag_IC_ACETOL,tag_IC_CH3O2,1) = flow(CH3O2_ACETOL)
      J(tag_IC_MGLYOX,tag_IC_CH3O2,1) = flow(CH3O2_MGLYOX)
      J(tag_IC_MVK,tag_IC_CH3O2,1) = flow(CH3O2_MVK)
      J(tag_IC_CH3O2,tag_IC_CH3OOH,1) = flow(CH3OOH_CH3O2)
      J(tag_IC_CH3OOH,tag_IC_CH3OOH,1) = flow(CH3OOH_sink)
      J(tag_IC_HCHO,tag_IC_CH3OOH,1) = flow(CH3OOH_HCHO)
      J(tag_IC_HCHO,tag_IC_HCHO,1) = flow(HCHO_sink)
      J(tag_IC_CO,tag_IC_HCHO,1) = flow(HCHO_CO)
      J(tag_IC_CO,tag_IC_CO,1) = flow(CO_sink)
      J(tag_IC_CO2,tag_IC_CO,1) = flow(CO_CO2)
      J(tag_IC_HCOOH,tag_IC_HCOOH,1) = flow(HCOOH_sink)
      J(tag_IC_CO,tag_IC_CO2,1) = flow(CO2_CO)
      J(tag_IC_CO2,tag_IC_CO2,1) = flow(CO2_sink)
      J(tag_IC_C2H6,tag_IC_C2H6,1) = flow(C2H6_sink)
      J(tag_IC_C2H5O2,tag_IC_C2H6,1) = flow(C2H6_C2H5O2)
      J(tag_IC_HCHO,tag_IC_C2H4,1) = flow(C2H4_HCHO)
      J(tag_IC_CO,tag_IC_C2H4,1) = flow(C2H4_CO)
      J(tag_IC_HCOOH,tag_IC_C2H4,1) = flow(C2H4_HCOOH)
      J(tag_IC_C2H4,tag_IC_C2H4,1) = flow(C2H4_sink)
      J(tag_IC_LHOC3H6O2,tag_IC_C2H4,1) = flow(C2H4_LHOC3H6O2)
      J(tag_IC_CH3O2,tag_IC_C2H2,1) = flow(C2H2_CH3O2)
      J(tag_IC_C2H2,tag_IC_C2H2,1) = flow(C2H2_sink)
      J(tag_IC_C2H5O2,tag_IC_C2H5O2,1) = flow(C2H5O2_sink)
      J(tag_IC_C2H5OOH,tag_IC_C2H5O2,1) = flow(C2H5O2_C2H5OOH)
      J(tag_IC_CH3CHO,tag_IC_C2H5O2,1) = flow(C2H5O2_CH3CHO)
      J(tag_IC_C2H5O2,tag_IC_C2H5OOH,1) = flow(C2H5OOH_C2H5O2)
      J(tag_IC_C2H5OOH,tag_IC_C2H5OOH,1) = flow(C2H5OOH_sink)
      J(tag_IC_CH3CHO,tag_IC_C2H5OOH,1) = flow(C2H5OOH_CH3CHO)
      J(tag_IC_CH3O2,tag_IC_CH3CHO,1) = flow(CH3CHO_CH3O2)
      J(tag_IC_CO,tag_IC_CH3CHO,1) = flow(CH3CHO_CO)
      J(tag_IC_CH3CHO,tag_IC_CH3CHO,1) = flow(CH3CHO_sink)
      J(tag_IC_CH3CO3,tag_IC_CH3CHO,1) = flow(CH3CHO_CH3CO3)
      J(tag_IC_CH3O2,tag_IC_CH3CO2H,1) = flow(CH3CO2H_CH3O2)
      J(tag_IC_CO2,tag_IC_CH3CO2H,1) = flow(CH3CO2H_CO2)
      J(tag_IC_CH3CO2H,tag_IC_CH3CO2H,1) = flow(CH3CO2H_sink)
      J(tag_IC_CH3O2,tag_IC_CH3CO3,1) = flow(CH3CO3_CH3O2)
      J(tag_IC_CO2,tag_IC_CH3CO3,1) = flow(CH3CO3_CO2)
      J(tag_IC_CH3CO2H,tag_IC_CH3CO3,1) = flow(CH3CO3_CH3CO2H)
      J(tag_IC_CH3CO3,tag_IC_CH3CO3,1) = flow(CH3CO3_sink)
      J(tag_IC_CH3CO3H,tag_IC_CH3CO3,1) = flow(CH3CO3_CH3CO3H)
      J(tag_IC_PAN,tag_IC_CH3CO3,1) = flow(CH3CO3_PAN)
      J(tag_IC_CH3O2,tag_IC_CH3CO3H,1) = flow(CH3CO3H_CH3O2)
      J(tag_IC_CH3CO3,tag_IC_CH3CO3H,1) = flow(CH3CO3H_CH3CO3)
      J(tag_IC_CH3CO3H,tag_IC_CH3CO3H,1) = flow(CH3CO3H_sink)
      J(tag_IC_HCHO,tag_IC_NACA,1) = flow(NACA_HCHO)
      J(tag_IC_CO,tag_IC_NACA,1) = flow(NACA_CO)
      J(tag_IC_NACA,tag_IC_NACA,1) = flow(NACA_sink)
      J(tag_IC_CH3O2,tag_IC_PAN,1) = flow(PAN_CH3O2)
      J(tag_IC_HCHO,tag_IC_PAN,1) = flow(PAN_HCHO)
      J(tag_IC_CO2,tag_IC_PAN,1) = flow(PAN_CO2)
      J(tag_IC_CH3CO3,tag_IC_PAN,1) = flow(PAN_CH3CO3)
      J(tag_IC_PAN,tag_IC_PAN,1) = flow(PAN_sink)
      J(tag_IC_C2H5O2,tag_IC_C3H8,1) = flow(C3H8_C2H5O2)
      J(tag_IC_C3H8,tag_IC_C3H8,1) = flow(C3H8_sink)
      J(tag_IC_IC3H7O2,tag_IC_C3H8,1) = flow(C3H8_IC3H7O2)
      J(tag_IC_CH4,tag_IC_C3H6,1) = flow(C3H6_CH4)
      J(tag_IC_CH3OH,tag_IC_C3H6,1) = flow(C3H6_CH3OH)
      J(tag_IC_CH3O2,tag_IC_C3H6,1) = flow(C3H6_CH3O2)
      J(tag_IC_HCHO,tag_IC_C3H6,1) = flow(C3H6_HCHO)
      J(tag_IC_CO,tag_IC_C3H6,1) = flow(C3H6_CO)
      J(tag_IC_HCOOH,tag_IC_C3H6,1) = flow(C3H6_HCOOH)
      J(tag_IC_C2H5O2,tag_IC_C3H6,1) = flow(C3H6_C2H5O2)
      J(tag_IC_CH3CHO,tag_IC_C3H6,1) = flow(C3H6_CH3CHO)
      J(tag_IC_CH3CO3,tag_IC_C3H6,1) = flow(C3H6_CH3CO3)
      J(tag_IC_C3H6,tag_IC_C3H6,1) = flow(C3H6_sink)
      J(tag_IC_LHOC3H6O2,tag_IC_C3H6,1) = flow(C3H6_LHOC3H6O2)
      J(tag_IC_MGLYOX,tag_IC_C3H6,1) = flow(C3H6_MGLYOX)
      J(tag_IC_LC4H9NO3,tag_IC_C3H6,1) = flow(C3H6_LC4H9NO3)
      J(tag_IC_IC3H7O2,tag_IC_IC3H7O2,1) = flow(IC3H7O2_sink)
      J(tag_IC_IC3H7OOH,tag_IC_IC3H7O2,1) = flow(IC3H7O2_IC3H7OOH)
      J(tag_IC_CH3COCH3,tag_IC_IC3H7O2,1) = flow(IC3H7O2_CH3COCH3)
      J(tag_IC_IC3H7NO3,tag_IC_IC3H7O2,1) = flow(IC3H7O2_IC3H7NO3)
      J(tag_IC_IC3H7O2,tag_IC_IC3H7OOH,1) = flow(IC3H7OOH_IC3H7O2)
      J(tag_IC_IC3H7OOH,tag_IC_IC3H7OOH,1) = flow(IC3H7OOH_sink)
      J(tag_IC_CH3COCH3,tag_IC_IC3H7OOH,1) = flow(IC3H7OOH_CH3COCH3)
      J(tag_IC_HCHO,tag_IC_LHOC3H6O2,1) = flow(LHOC3H6O2_HCHO)
      J(tag_IC_CH3CHO,tag_IC_LHOC3H6O2,1) = flow(LHOC3H6O2_CH3CHO)
      J(tag_IC_LHOC3H6O2,tag_IC_LHOC3H6O2,1) = flow(LHOC3H6O2_sink)
      J(tag_IC_LHOC3H6OOH,tag_IC_LHOC3H6O2,1) = flow(LHOC3H6O2_LHOC3H6OOH)
      J(tag_IC_LC4H9NO3,tag_IC_LHOC3H6O2,1) = flow(LHOC3H6O2_LC4H9NO3)
      J(tag_IC_LHOC3H6O2,tag_IC_LHOC3H6OOH,1) = flow(LHOC3H6OOH_LHOC3H6O2)
      J(tag_IC_LHOC3H6OOH,tag_IC_LHOC3H6OOH,1) = flow(LHOC3H6OOH_sink)
      J(tag_IC_ACETOL,tag_IC_LHOC3H6OOH,1) = flow(LHOC3H6OOH_ACETOL)
      J(tag_IC_CH3O2,tag_IC_CH3COCH3,1) = flow(CH3COCH3_CH3O2)
      J(tag_IC_CH3CO3,tag_IC_CH3COCH3,1) = flow(CH3COCH3_CH3CO3)
      J(tag_IC_CH3COCH3,tag_IC_CH3COCH3,1) = flow(CH3COCH3_sink)
      J(tag_IC_CH3COCH2O2,tag_IC_CH3COCH3,1) = flow(CH3COCH3_CH3COCH2O2)
      J(tag_IC_HCHO,tag_IC_CH3COCH2O2,1) = flow(CH3COCH2O2_HCHO)
      J(tag_IC_CH3CO3,tag_IC_CH3COCH2O2,1) = flow(CH3COCH2O2_CH3CO3)
      J(tag_IC_CH3COCH2O2,tag_IC_CH3COCH2O2,1) = flow(CH3COCH2O2_sink)
      J(tag_IC_HYPERACET,tag_IC_CH3COCH2O2,1) = flow(CH3COCH2O2_HYPERACET)
      J(tag_IC_ACETOL,tag_IC_CH3COCH2O2,1) = flow(CH3COCH2O2_ACETOL)
      J(tag_IC_MGLYOX,tag_IC_CH3COCH2O2,1) = flow(CH3COCH2O2_MGLYOX)
      J(tag_IC_CH3CO3,tag_IC_HYPERACET,1) = flow(HYPERACET_CH3CO3)
      J(tag_IC_CH3COCH2O2,tag_IC_HYPERACET,1) = flow(HYPERACET_CH3COCH2O2)
      J(tag_IC_HYPERACET,tag_IC_HYPERACET,1) = flow(HYPERACET_sink)
      J(tag_IC_MGLYOX,tag_IC_HYPERACET,1) = flow(HYPERACET_MGLYOX)
      J(tag_IC_HCHO,tag_IC_ACETOL,1) = flow(ACETOL_HCHO)
      J(tag_IC_CH3CO3,tag_IC_ACETOL,1) = flow(ACETOL_CH3CO3)
      J(tag_IC_ACETOL,tag_IC_ACETOL,1) = flow(ACETOL_sink)
      J(tag_IC_MGLYOX,tag_IC_ACETOL,1) = flow(ACETOL_MGLYOX)
      J(tag_IC_CO,tag_IC_MGLYOX,1) = flow(MGLYOX_CO)
      J(tag_IC_CH3CO3,tag_IC_MGLYOX,1) = flow(MGLYOX_CH3CO3)
      J(tag_IC_MGLYOX,tag_IC_MGLYOX,1) = flow(MGLYOX_sink)
      J(tag_IC_ACETOL,tag_IC_MPAN,1) = flow(MPAN_ACETOL)
      J(tag_IC_MPAN,tag_IC_MPAN,1) = flow(MPAN_sink)
      J(tag_IC_MVKO2,tag_IC_MPAN,1) = flow(MPAN_MVKO2)
      J(tag_IC_CH3COCH3,tag_IC_IC3H7NO3,1) = flow(IC3H7NO3_CH3COCH3)
      J(tag_IC_IC3H7NO3,tag_IC_IC3H7NO3,1) = flow(IC3H7NO3_sink)
      J(tag_IC_NC4H10,tag_IC_NC4H10,1) = flow(NC4H10_sink)
      J(tag_IC_LC4H9O2,tag_IC_NC4H10,1) = flow(NC4H10_LC4H9O2)
      J(tag_IC_C2H5O2,tag_IC_LC4H9O2,1) = flow(LC4H9O2_C2H5O2)
      J(tag_IC_CH3CHO,tag_IC_LC4H9O2,1) = flow(LC4H9O2_CH3CHO)
      J(tag_IC_LC4H9O2,tag_IC_LC4H9O2,1) = flow(LC4H9O2_sink)
      J(tag_IC_LC4H9OOH,tag_IC_LC4H9O2,1) = flow(LC4H9O2_LC4H9OOH)
      J(tag_IC_MEK,tag_IC_LC4H9O2,1) = flow(LC4H9O2_MEK)
      J(tag_IC_LC4H9NO3,tag_IC_LC4H9O2,1) = flow(LC4H9O2_LC4H9NO3)
      J(tag_IC_C2H5O2,tag_IC_LC4H9OOH,1) = flow(LC4H9OOH_C2H5O2)
      J(tag_IC_CH3CHO,tag_IC_LC4H9OOH,1) = flow(LC4H9OOH_CH3CHO)
      J(tag_IC_LC4H9O2,tag_IC_LC4H9OOH,1) = flow(LC4H9OOH_LC4H9O2)
      J(tag_IC_LC4H9OOH,tag_IC_LC4H9OOH,1) = flow(LC4H9OOH_sink)
      J(tag_IC_MEK,tag_IC_LC4H9OOH,1) = flow(LC4H9OOH_MEK)
      J(tag_IC_HCHO,tag_IC_MVK,1) = flow(MVK_HCHO)
      J(tag_IC_CO,tag_IC_MVK,1) = flow(MVK_CO)
      J(tag_IC_HCOOH,tag_IC_MVK,1) = flow(MVK_HCOOH)
      J(tag_IC_CH3CO3,tag_IC_MVK,1) = flow(MVK_CH3CO3)
      J(tag_IC_MGLYOX,tag_IC_MVK,1) = flow(MVK_MGLYOX)
      J(tag_IC_MVK,tag_IC_MVK,1) = flow(MVK_sink)
      J(tag_IC_MVKO2,tag_IC_MVK,1) = flow(MVK_MVKO2)
      J(tag_IC_HCHO,tag_IC_MVKO2,1) = flow(MVKO2_HCHO)
      J(tag_IC_CO,tag_IC_MVKO2,1) = flow(MVKO2_CO)
      J(tag_IC_CH3CO3,tag_IC_MVKO2,1) = flow(MVKO2_CH3CO3)
      J(tag_IC_ACETOL,tag_IC_MVKO2,1) = flow(MVKO2_ACETOL)
      J(tag_IC_MGLYOX,tag_IC_MVKO2,1) = flow(MVKO2_MGLYOX)
      J(tag_IC_MPAN,tag_IC_MVKO2,1) = flow(MVKO2_MPAN)
      J(tag_IC_MVKO2,tag_IC_MVKO2,1) = flow(MVKO2_sink)
      J(tag_IC_MVKOOH,tag_IC_MVKO2,1) = flow(MVKO2_MVKOOH)
      J(tag_IC_HCHO,tag_IC_MVKOOH,1) = flow(MVKOOH_HCHO)
      J(tag_IC_CO,tag_IC_MVKOOH,1) = flow(MVKOOH_CO)
      J(tag_IC_CH3CO3,tag_IC_MVKOOH,1) = flow(MVKOOH_CH3CO3)
      J(tag_IC_ACETOL,tag_IC_MVKOOH,1) = flow(MVKOOH_ACETOL)
      J(tag_IC_MGLYOX,tag_IC_MVKOOH,1) = flow(MVKOOH_MGLYOX)
      J(tag_IC_MVKO2,tag_IC_MVKOOH,1) = flow(MVKOOH_MVKO2)
      J(tag_IC_MVKOOH,tag_IC_MVKOOH,1) = flow(MVKOOH_sink)
      J(tag_IC_C2H5O2,tag_IC_MEK,1) = flow(MEK_C2H5O2)
      J(tag_IC_CH3CO3,tag_IC_MEK,1) = flow(MEK_CH3CO3)
      J(tag_IC_MEK,tag_IC_MEK,1) = flow(MEK_sink)
      J(tag_IC_LMEKO2,tag_IC_MEK,1) = flow(MEK_LMEKO2)
      J(tag_IC_CH3CHO,tag_IC_LMEKO2,1) = flow(LMEKO2_CH3CHO)
      J(tag_IC_CH3CO3,tag_IC_LMEKO2,1) = flow(LMEKO2_CH3CO3)
      J(tag_IC_LMEKO2,tag_IC_LMEKO2,1) = flow(LMEKO2_sink)
      J(tag_IC_LMEKOOH,tag_IC_LMEKO2,1) = flow(LMEKO2_LMEKOOH)
      J(tag_IC_LC4H9NO3,tag_IC_LMEKO2,1) = flow(LMEKO2_LC4H9NO3)
      J(tag_IC_CH3CHO,tag_IC_LMEKOOH,1) = flow(LMEKOOH_CH3CHO)
      J(tag_IC_CH3CO3,tag_IC_LMEKOOH,1) = flow(LMEKOOH_CH3CO3)
      J(tag_IC_LMEKO2,tag_IC_LMEKOOH,1) = flow(LMEKOOH_LMEKO2)
      J(tag_IC_LMEKOOH,tag_IC_LMEKOOH,1) = flow(LMEKOOH_sink)
      J(tag_IC_BIACET,tag_IC_LMEKOOH,1) = flow(LMEKOOH_BIACET)
      J(tag_IC_CH3CO3,tag_IC_BIACET,1) = flow(BIACET_CH3CO3)
      J(tag_IC_BIACET,tag_IC_BIACET,1) = flow(BIACET_sink)
      J(tag_IC_C2H5O2,tag_IC_LC4H9NO3,1) = flow(LC4H9NO3_C2H5O2)
      J(tag_IC_CH3CHO,tag_IC_LC4H9NO3,1) = flow(LC4H9NO3_CH3CHO)
      J(tag_IC_MEK,tag_IC_LC4H9NO3,1) = flow(LC4H9NO3_MEK)
      J(tag_IC_LC4H9NO3,tag_IC_LC4H9NO3,1) = flow(LC4H9NO3_sink)
      J(tag_IC_CH3O2,tag_IC_C5H8,1) = flow(C5H8_CH3O2)
      J(tag_IC_HCHO,tag_IC_C5H8,1) = flow(C5H8_HCHO)
      J(tag_IC_CO,tag_IC_C5H8,1) = flow(C5H8_CO)
      J(tag_IC_HCOOH,tag_IC_C5H8,1) = flow(C5H8_HCOOH)
      J(tag_IC_CH3CO3,tag_IC_C5H8,1) = flow(C5H8_CH3CO3)
      J(tag_IC_MVK,tag_IC_C5H8,1) = flow(C5H8_MVK)
      J(tag_IC_MVKO2,tag_IC_C5H8,1) = flow(C5H8_MVKO2)
      J(tag_IC_C5H8,tag_IC_C5H8,1) = flow(C5H8_sink)
      J(tag_IC_ISO2,tag_IC_C5H8,1) = flow(C5H8_ISO2)
      J(tag_IC_ISON,tag_IC_C5H8,1) = flow(C5H8_ISON)
      J(tag_IC_CH3OH,tag_IC_ISO2,1) = flow(ISO2_CH3OH)
      J(tag_IC_HCHO,tag_IC_ISO2,1) = flow(ISO2_HCHO)
      J(tag_IC_ACETOL,tag_IC_ISO2,1) = flow(ISO2_ACETOL)
      J(tag_IC_MGLYOX,tag_IC_ISO2,1) = flow(ISO2_MGLYOX)
      J(tag_IC_MVK,tag_IC_ISO2,1) = flow(ISO2_MVK)
      J(tag_IC_ISO2,tag_IC_ISO2,1) = flow(ISO2_sink)
      J(tag_IC_ISOOH,tag_IC_ISO2,1) = flow(ISO2_ISOOH)
      J(tag_IC_ISON,tag_IC_ISO2,1) = flow(ISO2_ISON)
      J(tag_IC_HCHO,tag_IC_ISOOH,1) = flow(ISOOH_HCHO)
      J(tag_IC_MVK,tag_IC_ISOOH,1) = flow(ISOOH_MVK)
      J(tag_IC_ISOOH,tag_IC_ISOOH,1) = flow(ISOOH_sink)
      J(tag_IC_HCHO,tag_IC_ISON,1) = flow(ISON_HCHO)
      J(tag_IC_NACA,tag_IC_ISON,1) = flow(ISON_NACA)
      J(tag_IC_ACETOL,tag_IC_ISON,1) = flow(ISON_ACETOL)
      J(tag_IC_MVK,tag_IC_ISON,1) = flow(ISON_MVK)
      J(tag_IC_ISON,tag_IC_ISON,1) = flow(ISON_sink)
      J(tag_IC_CCl4,tag_IC_CCl4,1) = flow(CCl4_sink)
      J(tag_IC_CH3O2,tag_IC_CH3Cl,1) = flow(CH3Cl_CH3O2)
      J(tag_IC_CH3Cl,tag_IC_CH3Cl,1) = flow(CH3Cl_sink)
      J(tag_IC_CH3CCl3,tag_IC_CH3CCl3,1) = flow(CH3CCl3_sink)
      J(tag_IC_CF2Cl2,tag_IC_CF2Cl2,1) = flow(CF2Cl2_sink)
      J(tag_IC_CFCl3,tag_IC_CFCl3,1) = flow(CFCl3_sink)
      J(tag_IC_CH3O2,tag_IC_CH3Br,1) = flow(CH3Br_CH3O2)
      J(tag_IC_CH3Br,tag_IC_CH3Br,1) = flow(CH3Br_sink)
      J(tag_IC_CF3Br,tag_IC_CF3Br,1) = flow(CF3Br_sink)
      J(tag_IC_CF2ClBr,tag_IC_CF2ClBr,1) = flow(CF2ClBr_sink)
      J(tag_IC_HCHO,tag_IC_DMS,1) = flow(DMS_HCHO)
      J(tag_IC_DMS,tag_IC_DMS,1) = flow(DMS_sink)
      J(tag_IC_DMSO,tag_IC_DMS,1) = flow(DMS_DMSO)
      J(tag_IC_CH3SO2,tag_IC_DMS,1) = flow(DMS_CH3SO2)
      J(tag_IC_CH3O2,tag_IC_DMSO,1) = flow(DMSO_CH3O2)
      J(tag_IC_HCHO,tag_IC_DMSO,1) = flow(DMSO_HCHO)
      J(tag_IC_CH3SO3H,tag_IC_DMSO,1) = flow(DMSO_CH3SO3H)
      J(tag_IC_DMSO,tag_IC_DMSO,1) = flow(DMSO_sink)
      J(tag_IC_CH3O2,tag_IC_CH3SO2,1) = flow(CH3SO2_CH3O2)
      J(tag_IC_CH3SO2,tag_IC_CH3SO2,1) = flow(CH3SO2_sink)
      J(tag_IC_CH3SO3,tag_IC_CH3SO2,1) = flow(CH3SO2_CH3SO3)
      J(tag_IC_CH3SO3H,tag_IC_CH3SO3,1) = flow(CH3SO3_CH3SO3H)
      J(tag_IC_CH3SO3,tag_IC_CH3SO3,1) = flow(CH3SO3_sink)

      
      IF (pre_inv) THEN      ! (do_inv .EQ. .TRUE.) removed due to g95 problems
      ! inverting coeffs
        J(:,:,1) = -J(:,:,1)    
      ! adding E to J
        DO n = 1, NTCSPEC
          J(n,n,1) = J(n,n,1) + 1.0_dp
        ENDDO

      ENDIF

    END SUBROUTINE prepare_J
#endif

  ! ---------------------------------------------------------------------------

#ifdef INT_LINMAX
  ! - some linear algebra routines --------------------------------------------

    SUBROUTINE inverse(M,n)

      IMPLICIT NONE

      INTEGER, INTENT(IN) :: n
      REAL(dp), INTENT(INOUT) :: M(n,n)

      INTEGER  :: indx(n), i
      REAL(dp) :: E(n,n), d

      E(:,:)=0.0_dp
      DO i = 1, n                    ! setting up identity matrix
         E(i,i)=1.0_dp
      ENDDO

      CALL ludcmp(M,indx,d,n)        ! decomposing matrix just once
      DO i = 1, n                    ! finding inverse by columns
         CALL lubksb(M,indx,E(:,i),n)
!                           E(1,i)
      ENDDO

      M = E

    END SUBROUTINE inverse

  ! ---------------------------------------------------------------------------

    SUBROUTINE ludcmp(a,indx,d,n)
  
      IMPLICIT NONE
  
      INTEGER, INTENT(IN) :: n
      REAL(dp), INTENT(INOUT) :: a(n,n)
  
      REAL(dp), INTENT(OUT)   :: d
      INTEGER, INTENT(OUT)    :: indx(n)
  
      REAL(dp), PARAMETER :: TINY = 1.0E-20_dp      ! a small number.
  
    ! Given a matrix a(1:n,1:n), with physical dimension np by np, this routine replaces it by
    ! the LU decomposition of a rowwise permutation of itself. a and n are input. a is output,
    ! arranged as in equation (2.3.14) above; indx(1:n) is an output vector that records the
    ! row permutation effected by the partial pivoting; d is output as +-1 depending on whether
    ! the number of row interchanges was even or odd, respectively. This routine is used in
    ! combination with lubksb to solve linear equations or invert a matrix.
  
      INTEGER  :: i, imax, j, k
      REAL(dp) :: aamax, dum, sum, &
                  vv(n) ! vv stores the implicit scaling of each row.
  
      d=1.0_dp                 ! No row interchanges yet.
  
      DO i=1,n                 ! Loop over rows to get the implicit scaling information
        aamax=0.0_dp
        DO j=1,n
          IF (ABS(a(i,j)) .GT. aamax) aamax=ABS(a(i,j))
        ENDDO
      IF (aamax .EQ.0.0_dp ) pause 'singular matrix in ludcmp' ! No nonzero largest element.
      vv(i)=1.0_dp /aamax              ! Save the scaling.
      ENDDO
  
      DO j=1,n                 ! This is the loop over columns of Crout's method.
        DO i=1,j-1             ! This is equation (2.3.12) except for i = j.
          sum=a(i,j)
          DO k=1,i-1
            sum=sum-a(i,k)*a(k,j)
          ENDDO
          a(i,j)=sum
        ENDDO
        aamax=0.0_dp ! Initialize for the search for largest pivot element.
        DO i=j,n               ! This is i = j of equation (2.3.12) and i = j+1: ::N
          sum=a(i,j)              ! of equation (2.3.13).
          DO k=1,j-1
            sum=sum-a(i,k)*a(k,j)
          ENDDO
          a(i,j)=sum
          dum=vv(i)*ABS(sum)       ! Figure of merit for the pivot.
          IF (dum .GE. aamax) THEN ! Is it better than the best so far?
            imax=i
            aamax=dum
          ENDIF
        ENDDO
        IF (j .NE. imax) THEN     ! DO we need to interchange rows?
          DO k=1,n             ! Yes, DO so...
            dum=a(imax,k)
            a(imax,k)=a(j,k)
            a(j,k)=dum
          ENDDO
          d=-d                    ! ...and change the parity of d.
          vv(imax)=vv(j)          ! Also interchange the scale factor.
        ENDIF
        indx(j)=imax
        IF (a(j,j) .EQ.0.0_dp ) a(j,j)=TINY
    ! IF the pivot element is zero the matrix is singular 
    ! (at least to the precision of the algorithm).
    ! For some applications on singular matrices, 
    ! it is desirable to substitute TINY for zero.
        IF (j .NE. n) THEN        ! Now, finally, divide by the pivot element.
          dum=1.0_dp /a(j,j)
          DO i=j+1,n
            a(i,j)=a(i,j)*dum
          ENDDO
        ENDIF
      ENDDO                    ! Go back for the next column in the reduction.
      return
    END SUBROUTINE ludcmp
  
    ! --------------------------------------------------------------------------
  
    SUBROUTINE lubksb(a,indx,b,n)
    
      IMPLICIT NONE

      INTEGER, INTENT(IN) :: n
      REAL(dp), INTENT(IN) :: a(n,n)
      INTEGER,  INTENT(IN) :: indx(n)
      REAL(dp), INTENT(INOUT) :: b(n)
  
    ! Solves the set of n linear equations A * X = B. Here a is input, not as the matrix A but
    ! rather as its LU decomposition, determined by the routine ludcmp. indx is input as the
    ! permutation vector returned by ludcmp. b(1:n) is input as the right-hand side vector B,
    ! and returns with the solution vector X. a, n, np, and indx are not modifed by this routine
    ! and can be left in place for successive calls with different right-hand sides b. This 
    ! routine takes into account the possibility that b will begin with many zero elements, 
    ! so it is efficient for use in matrix inversion.
    
      INTEGER i,ii,j,ll
      REAL sum
      ii=0  ! When ii is set to a positive value, it will become the index
            ! of the first nonvanishing element of b. We now DO
            ! the forward substitution, equation (2.3.6). The only new
            ! wrinkle is to unscramble the permutation as we go.
      DO i=1, n
        ll=indx(i)
        sum=b(ll)
        b(ll)=b(i)
        IF (ii .NE. 0) THEN
          DO j = ii, i-1
            sum=sum-a(i,j)*b(j)
          ENDDO 
        ELSE IF (sum .NE.0.0_dp ) THEN
          ii=i ! A nonzero element was encountered, so from now on we will
               ! have to DO the sums in the loop above
        ENDIF
        b(i)=sum
      ENDDO
  
      DO i = n, 1, -1     ! Now we do the backsubstitution, equation (2.3.7).
        sum=b(i)
        DO j = i+1, n
          sum=sum-a(i,j)*b(j)
        ENDDO
        b(i)=sum/a(i,i)  ! Store a component of the solution vector X.
      ENDDO
    
      return             ! All done!
    
    END SUBROUTINE lubksb

  ! ----------------------------------------------------------------------------
#endif
    
#ifdef INT_CASHKARP
! >>>>> CASH-KARP RK integration scheme >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

    SUBROUTINE cashkarp(IVI,IDI,t,h,IVO,IER)   
    
      IMPLICIT NONE
    
      REAL(dp), INTENT(IN)  :: h, t           
      REAL(dp), INTENT(IN)  :: IVI(NTCSPEC,NTCISO), IDI(NTCSPEC,NTCISO)
      REAL(dp), INTENT(OUT) :: IVO(NTCSPEC,NTCISO), IER(NTCSPEC,NTCISO)
    
  ! using the 5th-order Cash-Karp Runge-Kutta method to advance the solution over an 
  ! interval h and return the incremented variables as IVO; also return an estimate 
  ! of the IVO local truncation error IER using the embedded fourth-order method
  ! 
  ! input: 
  ! :values for NTCSPEC variables IVI and their derivatives IDI known at t
  ! h: advance interval
  !
  ! output: 
  ! IVO and IER: vectors of new values and estimated error
  !
  ! iderivs returns the right-hand side derivatives using isotopologues concentrations 
  ! from IVT and PTs

      REAL(dp)            :: IVT(NTCSPEC,NTCISO)      ! temp

      REAL(dp), DIMENSION(NTCSPEC,NTCISO) :: AK2, AK3, AK4, AK5, AK6
      REAL(dp), PARAMETER ::  A2 = 0.2_dp, &
                              A3 = 0.3_dp, &
                              A4 = 0.6_dp, &
                              A5 = 1.0_dp, &
                              A6 = 0.875_dp, &
                             B21 = 0.2_dp, &
                             B31 = 3.0_dp/40.0_dp, &
                             B32 = 9.0_dp/40.0_dp, &
                             B41 = 0.3_dp, &
                             B42 = -0.9_dp, &
                             B43 = 1.2_dp, &
                             B51 = -11.0_dp/54.0_dp, &
                             B52 = 2.5_dp, &
                             B53 = -70.0_dp/27.0_dp, &
                             B54 = 35.0_dp/27.0_dp, &
                             B61 = 1631.0_dp/55296.0_dp, &
                             B62 = 175.0_dp/512.0_dp, &
                             B63 = 575.0_dp/13824.0_dp, &
                             B64 = 44275.0_dp/110592.0_dp, &
                             B65 = 253.0_dp/4096.0_dp, &
                              C1 = 37.0_dp/378.0_dp, &
                              C3 = 250.0_dp/621.0_dp, &
                              C4 = 125.0_dp/594.0_dp, &
                              C6 = 512.0_dp/1771.0_dp, &
                             DC1 = C1-2825.0_dp/27648.0_dp, &
                             DC3 = C3-18575.0_dp/48384.0_dp, &
                             DC4 = C4-13525.0_dp/55296.0_dp, &
                             DC5 = -277.0_dp/14336.0_dp, &
                             DC6 = C6-0.25

    ! First step.
      IVT(:,:) = IVI(:,:)+h*(B21*IDI(:,:))
      CALL iderivs(t+A2*h,IVT,AK2)        ! Second step.

      IVT(:,:) = IVI(:,:)+h*(B31*IDI(:,:)+B32*AK2(:,:))
      CALL iderivs(t+A3*h,IVT,AK3)        ! Third step.

      IVT(:,:) = IVI(:,:)+h*(B41*IDI(:,:)+B42*AK2(:,:)+B43*AK3(:,:))
      CALL iderivs(t+A4*h,IVT,AK4)        ! Fourth step.

      IVT(:,:) = IVI(:,:)+h*(B51*IDI(:,:)+B52*AK2(:,:)+B53*AK3(:,:)+B54*AK4(:,:))
      CALL iderivs(t+A5*h,IVT,AK5)        ! Fifth step.

      IVT(:,:) = IVI(:,:)+h*(B61*IDI(:,:)+B62*AK2(:,:)+B63*AK3(:,:)+B64*AK4(:,:)+B65*AK5(:,:))
      CALL iderivs(t+A6*h,IVT,AK6)        ! Sixth step.
    
    ! output:

    ! accumulating increments with proper weights
      IVO(:,:) = IVI(:,:)+h*(C1*IDI(:,:)+C3*AK3(:,:)+C4*AK4(:,:)+C6*AK6(:,:))    
    
    ! Estimate error as difference between fourth and fifth order methods.
      IER(:,:) = h*(DC1*IDI(:,:)+DC3*AK3(:,:)+DC4*AK4(:,:)+DC5*AK5(:,:)+DC6*AK6(:,:))
    
!     RETURN
    
    END SUBROUTINE cashkarp
    
  ! ---------------------------------------------------------------------------

  ! stepper calls the cashkarp to take a Cash-Karp Runge-Kutta step:

    SUBROUTINE stepper(IVIO,IDI,t,htry,eps,ESC,hdid,hnext) ! +n,derivs
  
      IMPLICIT NONE
  
      REAL(dp), INTENT(INOUT) :: t, IVIO(NTCSPEC,NTCISO)
      REAL(dp), INTENT(OUT)   :: hdid, hnext
      REAL(dp), INTENT(IN)    :: IDI(NTCSPEC,NTCISO), &
                                 ESC(NTCSPEC,NTCISO), &      ! error scale
                                 htry, eps
  
    ! fifth-order Runge-Kutta stepper with monitoring of local truncation error to 
    ! ensure accuracy and adjust stepsize
    !
    ! input: 
    ! :NTCSPECxNTCISO-size vectors of variables IVIO and its derivatives IDI at 
    ! the starting value of the independent variable t
    ! htry: the stepsize to be attempted htry
    ! eps: required accuracy eps
    ! ESC: vector against which the error is scaled
    !
    ! output: 
    ! :IVIO and t are replaced by their new values
    ! hdid: stepsize that was actually accomplished
    ! hnext: estimated next stepsize
  
      INTEGER             :: i, j
      REAL(dp)            :: errmax, h, htemp, tnew

      REAL(dp)            :: IVT(NTCSPEC,NTCISO)      ! temp
      REAL(dp)            :: IER(NTCSPEC,NTCISO)      ! error
      
      REAL(dp), PARAMETER :: SAFETY = 0.9_dp, &
                              PGROW = -0.2_dp, &
                             PSHRNK = -0.25_dp, &
                             ERRCON = (5.0_dp/SAFETY)**(1.0_dp/PGROW)  ! 1.89E-4_dp !
    
      ! The value ERRCON equals , see use below.
    
      h = htry           ! setting stepsize to the initial trial value
    
   77 CALL cashkarp(IVIO,IDI,t,h,IVT,IER)      ! taking a step
  
      errmax = 0.0_dp                          ! evaluating accuracy
      DO j = 1, NTCISO 
        DO i = 1, NTCSPEC 
          errmax = MAX(errmax,DABS(IER(i,j)/ESC(i,j)))
    ENDDO
      ENDDO
    
      errmax = errmax/eps                      ! scaling relative to required tolerance
    
      IF (errmax .GT. 1.0_dp) THEN             ! truncation error is too large, reduce stepsize
    
        htemp = SAFETY * h * (errmax**PSHRNK)
        h = SIGN(MAX(DABS(htemp),0.1_dp*DABS(h)),h)     ! Not more than a factor of 10
        tnew = t + h
    
        IF (tnew .EQ. t) pause 'stepper: stepsize underflow'
        GOTO 77                                ! For another try.
  
      ELSE                                     ! Step succeeded. Computing the size of next step.
  
        IF (errmax .GT. ERRCON) THEN
          hnext = SAFETY * h * (errmax**PGROW)
        ELSE                                   ! No more than a factor of 5 increase.
          hnext = 5.0_dp * h
        ENDIF
    
        hdid = h
        t = t + h
    
        IVIO = IVT                             ! IVT() is returned from cashkarp
    
        RETURN
  
      ENDIF
    
    END SUBROUTINE stepper
  
  ! ---------------------------------------------------------------------------

    SUBROUTINE rkckintegrate(IVIO,t1,t2,eps,h1,hmin,nok,nbad)
    
      REAL(dp), INTENT(INOUT) :: IVIO(NTCSPEC,NTCISO)  ! in-out values
      REAL(dp), INTENT(IN)    :: t1, t2, eps, h1, hmin
  
      INTEGER, INTENT(OUT)    :: nok, nbad
  
      REAL(dp)                :: IVT(NTCSPEC,NTCISO)      ! temp vars
      REAL(dp)                :: IDT(NTCSPEC,NTCISO)      ! temp der
      REAL(dp)                :: IER(NTCSPEC,NTCISO)      ! error
      REAL(dp)                :: ESC(NTCSPEC,NTCISO)      ! error scale
  
      INTEGER, PARAMETER :: MAXSTP = 10000, &
                            ATINY =  1.e-30 ! TINY(dp) !
  
    ! Runge-Kutta driver with adaptive stepsize control
    ! 
    ! input:
    ! integrating the starting values IVIO()
    ! from t1 to t2 with accuracy eps
    ! storing intermediate results in the common block /path/.
    ! h1 should be set as a guessed first stepsize
    ! hmin as the minimum allowed stepsize (can be zero). 
    !
    ! output:
    ! nok and nbad are the number of good and bad (but retried and fixed) steps taken
    ! and IVIO is replaced by values at the end of the integration interval
    
      INTEGER                 :: i, j, nstp, nact
      REAL(dp)                :: t, h, hdid, hnext
    
      t = t1
      h = DSIGN(h1,t2-t1)
      nok = 0
      nbad = 0
    
      IVT = IVIO                               ! IVT - operational vector

      DO nstp = 1, MAXSTP                      ! take at most MAXSTP steps
  
        CALL iderivs(t,IVT,IDT)
      
        ! scaling (used for monitoring accuracy)
        ! can be modifed if there is a need

        ESC(:,:) = DABS(IVT(:,:)) + DABS(h*IDT(:,:)) + ATINY
    
        ! if stepsize can overshoot, decreasing
        IF ((t+h-t2)*(t+h-t1) .GT. 0.0_dp) h = t2 - t  
        
        CALL stepper(IVT,IDT,t,h,eps,ESC,hdid,hnext)
  
        IF (hdid .EQ. h) THEN
          nok = nok+1
        ELSE
          nbad = nbad+1
        ENDIF
    
        IF ((t-t2)*(t2-t1) .GE. 0.) THEN      ! done?
          
          IVIO = IVT                          ! output values
          RETURN                              ! normal exit
  
        ENDIF
  
        IF (DABS(hnext) .LT. hmin) pause 'rkckintegrate: stepsize smaller than minimum'
        h = hnext
      
      ENDDO       ! nstp cycle
  
      pause 'rkckintegrate: too many steps'
  
      RETURN
  
    END SUBROUTINE rkckintegrate

! <<<<< CASH-KARP RK integration scheme <<<<<<<<<<<<<<<<<<<<<<<<<<<<<
#endif

  END SUBROUTINE tag_IC_integrate



! -----------------------------------------------------------------------------

  SUBROUTINE tag_IC_calctotals(C)

    IMPLICIT NONE

    ! I/O
    REAL(dp), INTENT(IN) :: C(:)

    INTEGER  :: i

  ! minor isotopologues contribute with 1 rare atom
    TC(2:NTCISO) = SUM(ISOC(:,2:NTCISO))
    
  ! abundant atoms quantity is the rest
    TC(1) = SUM(SUM(ISOC(:,:),DIM=2)*QTCATOM(:)) - SUM(TC(2:NTCISO))

  ! total C atoms quantity from the regular mechanism
    TC_R = SUM(C(RTCIND(:))*QTCATOM(:))

!***    T13C = SUM(I13C(:))
!    T12C = SUM(I12C(1:NTCSPEC)*QTCATOM(:))

#ifdef DEBUG
    print *,'tag_IC_calctotals: passed'
#endif 

  END SUBROUTINE tag_IC_calctotals



! -----------------------------------------------------------------------------
  
! correction of total isotopologues budget to "regular" species budget  

  SUBROUTINE tag_IC_correct2reg(C)

    USE messy_mecca_kpp, ONLY: SPC_NAMES

    IMPLICIT NONE

    ! I/O
    REAL(dp), INTENT(IN)  :: C(:)

    INTEGER        :: i, n, k
    CHARACTER(100) :: specs
    REAL(dp)       :: tot, corr
    
    specs = ""
    tag_IC_NCOR2R = 0

    DO n = 1, NTCSPEC
      tot = SUM(ISOC(n,:))
      IF (tot .EQ. 0.0_dp) THEN
        ISOC(n,:) = 0.0_dp
#ifdef DEBUG
        specs = TRIM(specs)//" "//TRIM(SPC_NAMES(RTCIND(i)))
#endif
      ELSE
        corr = C(RTCIND(n)) / tot
#ifdef OPT_C2R_FILTER
        IF ( corr .GT. THRES_C2R ) THEN
#endif
        ISOC(n,:) = ISOC(n,:) * corr
        tag_IC_NCOR2R = tag_IC_NCOR2R + 1
      ENDIF
    ENDDO

  ! getting a fraction of corrected specs?
  ! tag_IC_NCOR2R = tag_IC_NCOR2R / NTCSPEC

#ifdef DEBUG
    IF (LEN(TRIM(specs)) .GT. 0) THEN
      WRITE(*,'(A,A)') 'tag_IC_correct2reg: '//&
              'cannot correct isotopic C species due to zero-budget: ', &
               specs
    ELSE
      print *,'tag_IC_correct2reg: working'
    ENDIF
#endif 

  END SUBROUTINE tag_IC_correct2reg



! -----------------------------------------------------------------------------
  
! correction of "regular" species budget to the total isotopologues budget

  SUBROUTINE tag_IC_correct2iso(C)

    IMPLICIT NONE

    ! I/O
    REAL(dp), INTENT(INOUT)  :: C(:)

    INTEGER  :: i

    C(RTCIND(:)) = SUM(ISOC(:,:),DIM=2)

#ifdef DEBUG
    print *,'tag_IC_correct2iso: working'
#endif 

  END SUBROUTINE tag_IC_correct2iso



! - some cfg cheks ------------------------------------------------------------

#ifndef INT_SIMEULER
#ifndef INT_LINMAX
#ifndef INT_CASHKARP
#ifndef INT_CG1
 FATAL: no integration method choosed
#endif
#endif
#endif
#endif

! ---------------------------------------------------------------------------

END MODULE messy_mecca_tag_IC

! ***************************************************************************

