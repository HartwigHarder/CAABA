! ==============================================================================
! messy_mecca_tag_IC
! generated: 8-12-08 21:11:22
!
! this module is generated by imtag utility
!
! C isotopes tagging configuration: kinetics
! level: smcl
!
! source mech. equations: mecca.spc (594 reactions)
!    tagged species list: mecca.eqn (60 of 71 given species are tagged)
! #INLINE F90_GLOBAL
!
! [Gromov, MPIC, 2007-2008]
! ==============================================================================

! - general tagging parameters (as conditional defines) ------------------------

#include "messy_mecca_tag_parameters.inc"

! - configuration parameters ---------------------------------------------------

! configuration parameters

#define TAG
#define tag_IC

#define ABBR_I
#define ATOM_C
#define CLASSES_2
#define CLASS_12
#define CLASS_13

#define NO_KIE
#define SRC

#define INIUNIT_DELTAPM

#define USE_PT

! user configuration parameters

#define xUSE_KRSIND
#define C2R_FILTER

! replacements:
!
! {%TIMEDATE} is 8-12-08 21:11:22
! {%CASE} is tag
! {%CMODEL} is messy_mecca
! {%ABBR} is I
! {%ATOM} is C
! {%A} is C
! {%CONF} is IC
! {%C} is IC
! {%QSPEC} is 60
! {%NSPEC} is NTSPEC
! {%QCLASS} is 2
! {%NCLASS} is NTCCLASS
! {%QISO} is 2
! {%NISO} is NTCISO
! {%NQATOM} is QTCATOM
! {%PT} is PT#
! {%TAG} is tag_IC
! {%NTSPEC} is NTCSPEC
! {%RTIND} is RTCIND
! {%QCFLDIR} is 223
! {%QIFLDIR} is -1
! {%DBL} is tag_IC
! {%NDSPEC} is NDCSPEC
! {%RDIND} is RDCIND
! \t is 	
! \n is 


! - integration scheme ---------------------------------------------------------

#define I_LINMAX
#define xI_SIMEULER
#define xI_CASHKARP

! -----------------------------------------------------------------------------

MODULE messy_mecca_tag_IC

  USE messy_mecca_kpp ! dp, nreact, nspec, ind_*, ...

#ifdef INTERFLOW
! in case of inter-configuration molecules flow calculation (default) 
! using flow and its direction variables from messy_mecca_tag

  USE messy_mecca_tag_common
#endif


  IMPLICIT NONE

! here constants and tracers are to be defined
! data declaration

! number of tagged species, number of classes (isotopologues)
  INTEGER, PARAMETER :: NTCSPEC = 60, NTCCLASS = 2, NTCISO = 2

! isotopologues tracers indices
  INTEGER, PARAMETER :: tag_IC_CH4 = 1          ! indicated as fixed
  INTEGER, PARAMETER :: tag_IC_CH3OH = 2
  INTEGER, PARAMETER :: tag_IC_CH3O2 = 3
  INTEGER, PARAMETER :: tag_IC_CH3OOH = 4
  INTEGER, PARAMETER :: tag_IC_HCHO = 5
  INTEGER, PARAMETER :: tag_IC_CO = 6
  INTEGER, PARAMETER :: tag_IC_HCOOH = 7
  INTEGER, PARAMETER :: tag_IC_CO2 = 8
  INTEGER, PARAMETER :: tag_IC_C2H6 = 9
  INTEGER, PARAMETER :: tag_IC_C2H4 = 10
  INTEGER, PARAMETER :: tag_IC_C2H2 = 11
  INTEGER, PARAMETER :: tag_IC_C2H5O2 = 12
  INTEGER, PARAMETER :: tag_IC_C2H5OOH = 13
  INTEGER, PARAMETER :: tag_IC_CH3CHO = 14
  INTEGER, PARAMETER :: tag_IC_CH3CO2H = 15
  INTEGER, PARAMETER :: tag_IC_PA = 16
  INTEGER, PARAMETER :: tag_IC_CH3CO3H = 17
  INTEGER, PARAMETER :: tag_IC_NACA = 18
  INTEGER, PARAMETER :: tag_IC_PAN = 19
  INTEGER, PARAMETER :: tag_IC_C3H8 = 20
  INTEGER, PARAMETER :: tag_IC_C3H6 = 21
  INTEGER, PARAMETER :: tag_IC_IC3H7O2 = 22
  INTEGER, PARAMETER :: tag_IC_IC3H7OOH = 23
  INTEGER, PARAMETER :: tag_IC_LHOC3H6O2 = 24
  INTEGER, PARAMETER :: tag_IC_LHOC3H6OOH = 25
  INTEGER, PARAMETER :: tag_IC_CH3COCH3 = 26
  INTEGER, PARAMETER :: tag_IC_CH3COCH2O2 = 27
  INTEGER, PARAMETER :: tag_IC_HYPERACET = 28
  INTEGER, PARAMETER :: tag_IC_ACETOL = 29
  INTEGER, PARAMETER :: tag_IC_MGLYOX = 30
  INTEGER, PARAMETER :: tag_IC_MPAN = 31
  INTEGER, PARAMETER :: tag_IC_IC3H7NO3 = 32
  INTEGER, PARAMETER :: tag_IC_NC4H10 = 33
  INTEGER, PARAMETER :: tag_IC_LC4H9O2 = 34
  INTEGER, PARAMETER :: tag_IC_LC4H9OOH = 35
  INTEGER, PARAMETER :: tag_IC_MVK = 36
  INTEGER, PARAMETER :: tag_IC_MVKO2 = 37
  INTEGER, PARAMETER :: tag_IC_MVKOOH = 38
  INTEGER, PARAMETER :: tag_IC_MEK = 39
  INTEGER, PARAMETER :: tag_IC_LMEKO2 = 40
  INTEGER, PARAMETER :: tag_IC_LMEKOOH = 41
  INTEGER, PARAMETER :: tag_IC_BIACET = 42
  INTEGER, PARAMETER :: tag_IC_LC4H9NO3 = 43
  INTEGER, PARAMETER :: tag_IC_C5H8 = 44
  INTEGER, PARAMETER :: tag_IC_ISO2 = 45
  INTEGER, PARAMETER :: tag_IC_ISOOH = 46
  INTEGER, PARAMETER :: tag_IC_ISON = 47
  INTEGER, PARAMETER :: tag_IC_CCl4 = 48
  INTEGER, PARAMETER :: tag_IC_CH3Cl = 49
  INTEGER, PARAMETER :: tag_IC_CH3CCl3 = 50
  INTEGER, PARAMETER :: tag_IC_CF2Cl2 = 51
  INTEGER, PARAMETER :: tag_IC_CFCl3 = 52
  INTEGER, PARAMETER :: tag_IC_CH3Br = 53
  INTEGER, PARAMETER :: tag_IC_CF3Br = 54
  INTEGER, PARAMETER :: tag_IC_CF2ClBr = 55
  INTEGER, PARAMETER :: tag_IC_CH3SO3H = 56
  INTEGER, PARAMETER :: tag_IC_DMS = 57
  INTEGER, PARAMETER :: tag_IC_DMSO = 58
  INTEGER, PARAMETER :: tag_IC_CH3SO2 = 59
  INTEGER, PARAMETER :: tag_IC_CH3SO3 = 60

! dummy indices of species present TSL but not in the mechanism (resolves dependency problems)
  INTEGER, PARAMETER :: tag_IC_CHCl2Br = 0
  INTEGER, PARAMETER :: tag_IC_CHClBr2 = 0
  INTEGER, PARAMETER :: tag_IC_CH2ClBr = 0
  INTEGER, PARAMETER :: tag_IC_CH2Br2 = 0
  INTEGER, PARAMETER :: tag_IC_CHBr3 = 0
  INTEGER, PARAMETER :: tag_IC_CH3I = 0
  INTEGER, PARAMETER :: tag_IC_CH2I2 = 0
  INTEGER, PARAMETER :: tag_IC_C3H7I = 0
  INTEGER, PARAMETER :: tag_IC_CH2ClI = 0
  INTEGER, PARAMETER :: tag_IC_CX = 0
  INTEGER, PARAMETER :: tag_IC_CY = 0

! corresponding regular <-> tagged species indices 
  INTEGER, PARAMETER :: RTCIND(NTCSPEC) = &
    (/ ind_CH4, ind_CH3OH, ind_CH3O2, ind_CH3OOH, ind_HCHO, ind_CO, ind_HCOOH, &
       ind_CO2, ind_C2H6, ind_C2H4, ind_C2H2, ind_C2H5O2, ind_C2H5OOH, &
       ind_CH3CHO, ind_CH3CO2H, ind_PA, ind_CH3CO3H, ind_NACA, ind_PAN, &
       ind_C3H8, ind_C3H6, ind_IC3H7O2, ind_IC3H7OOH, ind_LHOC3H6O2, ind_LHOC3H6OOH, &
       ind_CH3COCH3, ind_CH3COCH2O2, ind_HYPERACET, ind_ACETOL, ind_MGLYOX, &
       ind_MPAN, ind_IC3H7NO3, ind_NC4H10, ind_LC4H9O2, ind_LC4H9OOH, ind_MVK, &
       ind_MVKO2, ind_MVKOOH, ind_MEK, ind_LMEKO2, ind_LMEKOOH, ind_BIACET, &
       ind_LC4H9NO3, ind_C5H8, ind_ISO2, ind_ISOOH, ind_ISON, ind_CCl4, &
       ind_CH3Cl, ind_CH3CCl3, ind_CF2Cl2, ind_CFCl3, ind_CH3Br, ind_CF3Br, &
       ind_CF2ClBr, ind_CH3SO3H, ind_DMS, ind_DMSO, ind_CH3SO2, ind_CH3SO3 /)

! quantity of C atoms in corresponding taggedspecies
  INTEGER, PARAMETER :: QTCATOM(NTCSPEC) = &
    (/ 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, &
    3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, &
    1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1 /)

! number of tagged reactions
  INTEGER, PARAMETER :: NTCREAC = 140
! added passive tracers indices
  INTEGER, PARAMETER :: TRPTCIND(NTCREAC) = &
    (/ ind_PTG4100, ind_PTG4101, ind_PTG4102, ind_PTG4103, ind_PTG4104, &
       ind_PTG4105, ind_PTG4106a, ind_PTG4106b, ind_PTG4107, ind_PTG4108, &
       ind_PTG4109, ind_PTG4110, ind_PTG4111, ind_PTG4200, ind_PTG4201, &
       ind_PTG4202, ind_PTG4203, ind_PTG4204, ind_PTG4205, ind_PTG4206, &
       ind_PTG4207, ind_PTG4208, ind_PTG4209, ind_PTG4210, ind_PTG4211a, &
       ind_PTG4211b, ind_PTG4212, ind_PTG4213, ind_PTG4214, ind_PTG4215a, &
       ind_PTG4215b, ind_PTG4216, ind_PTG4217, ind_PTG4218, ind_PTG4219, &
       ind_PTG4220, ind_PTG4221, ind_PTG4222, ind_PTG4300, ind_PTG4301, &
       ind_PTG4302, ind_PTG4303, ind_PTG4304, ind_PTG4305, ind_PTG4306, &
       ind_PTG4307, ind_PTG4308, ind_PTG4309, ind_PTG4310, ind_PTG4311, &
       ind_PTG4312, ind_PTG4313, ind_PTG4314, ind_PTG4315, ind_PTG4316, &
       ind_PTG4317, ind_PTG4318, ind_PTG4319, ind_PTG4320, ind_PTG4400, &
       ind_PTG4401, ind_PTG4402, ind_PTG4403, ind_PTG4404, ind_PTG4405, &
       ind_PTG4406, ind_PTG4407, ind_PTG4408, ind_PTG4409, ind_PTG4410, &
       ind_PTG4411, ind_PTG4412, ind_PTG4413, ind_PTG4414, ind_PTG4415, &
       ind_PTG4416, ind_PTG4417, ind_PTG4500, ind_PTG4501, ind_PTG4502, &
       ind_PTG4503, ind_PTG4504, ind_PTG4505, ind_PTG4506, ind_PTG4507, &
       ind_PTG4508, ind_PTG6400, ind_PTG6401, ind_PTG6402, ind_PTG6403, &
       ind_PTG6404, ind_PTG6405, ind_PTG6406, ind_PTG6407, ind_PTG6408, &
       ind_PTG6500, ind_PTG6501, ind_PTG7400, ind_PTG7403, ind_PTG9400a, &
       ind_PTG9400b, ind_PTG9401, ind_PTG9402, ind_PTG9403, ind_PTG9404, &
       ind_PTG9405, ind_PTJ4100, ind_PTJ4101a, ind_PTJ4101b, ind_PTJ4102, &
       ind_PTJ4103, ind_PTJ4200, ind_PTJ4201, ind_PTJ4202, ind_PTJ4203, &
       ind_PTJ4204, ind_PTJ4300, ind_PTJ4301, ind_PTJ4302, ind_PTJ4303, &
       ind_PTJ4304, ind_PTJ4305, ind_PTJ4306, ind_PTJ4400, ind_PTJ4401, &
       ind_PTJ4402, ind_PTJ4403, ind_PTJ4404, ind_PTJ4405, ind_PTJ4406, &
       ind_PTJ4500, ind_PTJ4501, ind_PTJ6400, ind_PTJ6401, ind_PTJ6402, &
       ind_PTJ6500, ind_PTJ6501, ind_PTJ7400, ind_PTJ7500, ind_PTJ7601 /)


! there are no KIE in selected system, empty arrays are for the compatibility
! array of indices of KIE-related species
  INTEGER, PARAMETER :: NKRSPEC = 0
  INTEGER, PARAMETER :: KRSIND(NKRSPEC+1) = (/ NKRSPEC /)



! index used for substitution of isotopic fraction of total C
  INTEGER, PARAMETER :: ind_tTC = NTCSPEC+1

! -----------------------------------------------------------------------------

#ifndef INTERFLOW
! C atoms flow control and directions indices
  INTEGER, PARAMETER :: NFLCDIR = 223
  REAL(dp)           :: flow(NFLCDIR)
  INTEGER, PARAMETER, PRIVATE :: &
    CH4_sink = 1, C3H6_CH4 = 2, CH3OH_sink = 3, CH3O2_CH3OH = 4, &
    C3H6_CH3OH = 5, ISO2_CH3OH = 6, CH3O2_sink = 7, CH4_CH3O2 = 8, &
    CH3OOH_CH3O2 = 9, CH3CO2H_CH3O2 = 10, PA_CH3O2 = 11, C2H2_CH3O2 = 12, &
    C3H6_CH3O2 = 13, C5H8_CH3O2 = 14, DMSO_CH3O2 = 15, CH3SO2_CH3O2 = 16, &
    CH3CHO_CH3O2 = 17, CH3CO3H_CH3O2 = 18, PAN_CH3O2 = 19, CH3COCH3_CH3O2 = 20, &
    CH3Cl_CH3O2 = 21, CH3Br_CH3O2 = 22, CH3OOH_sink = 23, &
    CH3O2_CH3OOH = 24, HCHO_sink = 25, CH4_HCHO = 26, CH3OH_HCHO = 27, &
    CH3O2_HCHO = 28, CH3OOH_HCHO = 29, C2H4_HCHO = 30, NACA_HCHO = 31, &
    PAN_HCHO = 32, C3H6_HCHO = 33, LHOC3H6O2_HCHO = 34, CH3COCH2O2_HCHO = 35, &
    MVKO2_HCHO = 36, C5H8_HCHO = 37, ISO2_HCHO = 38, DMS_HCHO = 39, &
    DMSO_HCHO = 40, ACETOL_HCHO = 41, MVK_HCHO = 42, MVKOOH_HCHO = 43, &
    ISOOH_HCHO = 44, ISON_HCHO = 45, CO_sink = 46, HCHO_CO = 47, &
    C2H4_CO = 48, NACA_CO = 49, C3H6_CO = 50, MGLYOX_CO = 51, &
    MVK_CO = 52, MVKO2_CO = 53, C5H8_CO = 54, CO2_CO = 55, CH4_CO = 56, &
    CH3CHO_CO = 57, MVKOOH_CO = 58, HCOOH_sink = 59, C2H4_HCOOH = 60, &
    C3H6_HCOOH = 61, MVK_HCOOH = 62, C5H8_HCOOH = 63, CO2_sink = 64, &
    CO_CO2 = 65, CH3CO2H_CO2 = 66, PA_CO2 = 67, PAN_CO2 = 68, &
    C2H6_sink = 69, C2H4_sink = 70, C2H2_sink = 71, C2H5O2_sink = 72, &
    C2H6_C2H5O2 = 73, C2H5OOH_C2H5O2 = 74, C3H8_C2H5O2 = 75, C3H6_C2H5O2 = 76, &
    LC4H9O2_C2H5O2 = 77, LC4H9OOH_C2H5O2 = 78, MEK_C2H5O2 = 79, LC4H9NO3_C2H5O2 = 80, &
    C2H5OOH_sink = 81, C2H5O2_C2H5OOH = 82, CH3CHO_sink = 83, C2H5O2_CH3CHO = 84, &
    C2H5OOH_CH3CHO = 85, C3H6_CH3CHO = 86, LHOC3H6O2_CH3CHO = 87, &
    LC4H9O2_CH3CHO = 88, LMEKO2_CH3CHO = 89, LC4H9OOH_CH3CHO = 90, &
    LMEKOOH_CH3CHO = 91, LC4H9NO3_CH3CHO = 92, CH3CO2H_sink = 93, &
    PA_CH3CO2H = 94, PA_sink = 95, CH3CHO_PA = 96, CH3CO3H_PA = 97, &
    PAN_PA = 98, C3H6_PA = 99, CH3COCH2O2_PA = 100, MGLYOX_PA = 101, &
    MVK_PA = 102, MVKO2_PA = 103, LMEKO2_PA = 104, C5H8_PA = 105, &
    CH3COCH3_PA = 106, ACETOL_PA = 107, HYPERACET_PA = 108, MVKOOH_PA = 109, &
    MEK_PA = 110, LMEKOOH_PA = 111, BIACET_PA = 112, CH3CO3H_sink = 113, &
    PA_CH3CO3H = 114, NACA_sink = 115, ISON_NACA = 116, PAN_sink = 117, &
    PA_PAN = 118, C3H8_sink = 119, C3H6_sink = 120, IC3H7O2_sink = 121, &
    C3H8_IC3H7O2 = 122, IC3H7OOH_IC3H7O2 = 123, IC3H7OOH_sink = 124, IC3H7O2_IC3H7OOH = 125, &
    LHOC3H6O2_sink = 126, C2H4_LHOC3H6O2 = 127, C3H6_LHOC3H6O2 = 128, &
    LHOC3H6OOH_LHOC3H6O2 = 129, LHOC3H6OOH_sink = 130, LHOC3H6O2_LHOC3H6OOH = 131, &
    CH3COCH3_sink = 132, IC3H7O2_CH3COCH3 = 133, IC3H7OOH_CH3COCH3 = 134, &
    IC3H7NO3_CH3COCH3 = 135, CH3COCH2O2_sink = 136, CH3COCH3_CH3COCH2O2 = 137, &
    HYPERACET_CH3COCH2O2 = 138, HYPERACET_sink = 139, CH3COCH2O2_HYPERACET = 140, &
    ACETOL_sink = 141, LHOC3H6OOH_ACETOL = 142, CH3COCH2O2_ACETOL = 143, &
    MPAN_ACETOL = 144, MVKO2_ACETOL = 145, ISO2_ACETOL = 146, &
    CH3O2_ACETOL = 147, ISON_ACETOL = 148, MVKOOH_ACETOL = 149, &
    MGLYOX_sink = 150, C3H6_MGLYOX = 151, CH3COCH2O2_MGLYOX = 152, &
    HYPERACET_MGLYOX = 153, ACETOL_MGLYOX = 154, MVK_MGLYOX = 155, &
    MVKO2_MGLYOX = 156, ISO2_MGLYOX = 157, CH3O2_MGLYOX = 158, &
    MVKOOH_MGLYOX = 159, MPAN_sink = 160, MVKO2_MPAN = 161, &
    IC3H7NO3_sink = 162, IC3H7O2_IC3H7NO3 = 163, NC4H10_sink = 164, &
    LC4H9O2_sink = 165, NC4H10_LC4H9O2 = 166, LC4H9OOH_LC4H9O2 = 167, &
    LC4H9OOH_sink = 168, LC4H9O2_LC4H9OOH = 169, MVK_sink = 170, &
    C5H8_MVK = 171, ISO2_MVK = 172, CH3O2_MVK = 173, ISOOH_MVK = 174, &
    ISON_MVK = 175, MVKO2_sink = 176, MPAN_MVKO2 = 177, MVK_MVKO2 = 178, &
    MVKOOH_MVKO2 = 179, C5H8_MVKO2 = 180, MVKOOH_sink = 181, &
    MVKO2_MVKOOH = 182, MEK_sink = 183, LC4H9O2_MEK = 184, &
    LC4H9OOH_MEK = 185, LC4H9NO3_MEK = 186, LMEKO2_sink = 187, MEK_LMEKO2 = 188, &
    LMEKOOH_LMEKO2 = 189, LMEKOOH_sink = 190, LMEKO2_LMEKOOH = 191, &
    BIACET_sink = 192, LMEKOOH_BIACET = 193, LC4H9NO3_sink = 194, &
    C3H6_LC4H9NO3 = 195, LHOC3H6O2_LC4H9NO3 = 196, LC4H9O2_LC4H9NO3 = 197, &
    LMEKO2_LC4H9NO3 = 198, C5H8_sink = 199, ISO2_sink = 200, C5H8_ISO2 = 201, &
    ISOOH_sink = 202, ISO2_ISOOH = 203, ISON_sink = 204, C5H8_ISON = 205, &
    ISO2_ISON = 206, CCl4_sink = 207, CH3Cl_sink = 208, CH3CCl3_sink = 209, &
    CF2Cl2_sink = 210, CFCl3_sink = 211, CH3Br_sink = 212, &
    CF3Br_sink = 213, CF2ClBr_sink = 214, DMSO_CH3SO3H = 215, &
    CH3SO3_CH3SO3H = 216, DMS_sink = 217, DMSO_sink = 218, DMS_DMSO = 219, &
    CH3SO2_sink = 220, DMS_CH3SO2 = 221, CH3SO3_sink = 222, &
    CH3SO2_CH3SO3 = 223
#else
! flow() is imported from messy_mecca_tag_common
#endif

! -----------------------------------------------------------------------------

! concentrations of isotopologues
  REAL(dp)           :: ISOC(NTCSPEC,NTCISO)

  REAL(dp)           :: TC(NTCISO)

! total C (atoms) of the regular composition
  REAL(dp)           :: TC_R

! 12C 13C tagged species arrays
  REAL(dp)           :: I12C(NTCSPEC)
  REAL(dp)           :: I13C(NTCSPEC)
    EQUIVALENCE( I12C(1),ISOC(1,1) )
    EQUIVALENCE( I13C(1),ISOC(1,2) )

! totals (atoms)
  REAL(dp)           :: T12C, T13C
    EQUIVALENCE( T12C, TC(1) )
    EQUIVALENCE( T13C, TC(2) )

! fractions (operative), +1 for TC
  REAL(dp)           :: F12C(NTCSPEC+1), &
                        F13C(NTCSPEC+1)

! -----------------------------------------------------------------------------

! runtime control parameters

! treshold value: below it species stops to sink to the others (but can receive)
!                                         x * mean cair
  REAL(dp), PARAMETER :: THRES = 1.0E-40_dp * 2.5047E+19_dp

! last "process" run steps count, requested steps count
  INTEGER             :: tag_IC_NSTEP, tag_IC_NSTEP_REQ

! # of "rejected" species (under threshold)
  INTEGER             :: tag_IC_NREJCT
  
! # of potential error due to PTs vs. A difference over 1 order of magnitude
  INTEGER             :: tag_IC_PEPTAD

! fraction of "corrected to regular" species (diagnostic) & filter threshold
  REAL(dp)            :: tag_IC_NCOR2R
  REAL(dp), PARAMETER :: THRES_C2R = 1.0E-3_dp ! (max. ratio tag/reg allowed)

! -----------------------------------------------------------------------------

  PUBLIC

  PRIVATE zerodiv

  PRIVATE THRES, THRES_C2R

#ifndef INTERFLOW
  PRIVATE flow
#endif

  PUBLIC tag_IC_update_kie
  PUBLIC tag_IC_flow_calc
  PUBLIC tag_IC_integrate
  PUBLIC tag_IC_calctotals
  PUBLIC tag_IC_correct2reg
  PUBLIC tag_IC_correct2iso

! =============================================================================

CONTAINS

! -----------------------------------------------------------------------------

  ELEMENTAL REAL(dp) FUNCTION zerodiv(what,by)
    ! safe division which gives zero when division by zero is performed
    REAL(dp), INTENT(IN) :: what, by   ! operands
    IF (by .EQ. 0.0_dp) THEN
      zerodiv = 0.0_dp
    ELSE
      zerodiv = what/by
    ENDIF
  END FUNCTION zerodiv



! -----------------------------------------------------------------------------

  SUBROUTINE tag_IC_update_kie(C, press, cair, temp)

    IMPLICIT NONE

    ! I/O
    REAL(dp), INTENT(IN) :: C(:)
    REAL(dp), INTENT(IN) :: press
    REAL(dp), INTENT(IN) :: cair
    REAL(dp), INTENT(IN) :: temp

  ! ===== KIE preparation section (coeff. update, etc.) =======================


  ! ===== calculation of KIE-correction for reac/isot =========================

  ! ----- tag_IC: flow(KIE_REAC_ISOT) corrections calculation -----


  
  END SUBROUTINE tag_IC_update_kie



! -----------------------------------------------------------------------------

  SUBROUTINE tag_IC_flow_calc(C)
    
  ! this subroutine calculates flow of C-containig molecules
  ! from one tagged species to another, plus sinks; from PTs
    
    IMPLICIT NONE

    ! I/O
    REAL(dp), INTENT(IN)  :: C(:)

#ifndef INTERFLOW
  ! ----- tag_IC: flow(FROM_TO[sink]) = SUM( PTs(FROM->TO[sink]) ) -----

  ! ----- IC: CH4 ----- WARN: indicated as fixed species
    flow(CH4_sink) = ( C(ind_PTG4100) + &
      C(ind_PTG4101) + C(ind_PTG6400) + &
      C(ind_PTJ4103) )
    flow(C3H6_CH4) = ( 0.06 * C(ind_PTG4301) )

  ! ----- IC: CH3OH -----
    flow(CH3OH_sink) = ( C(ind_PTG4102) )
    flow(CH3O2_CH3OH) = ( C(ind_PTG4106b) + &
      C(ind_PTG4206) + C(ind_PTG4306) + C(ind_PTG4314) + C(ind_PTG4401) + &
      C(ind_PTG4410) ) + &
      0.5_dp * ( 0.25 * C(ind_PTG4505) )
    flow(C3H6_CH3OH) = ( 0.03 * C(ind_PTG4301) )
    flow(ISO2_CH3OH) = 0.5_dp * ( 0.25 * C(ind_PTG4505) )

  ! ----- IC: CH3O2 -----
    flow(CH3O2_sink) = ( C(ind_PTG4103) + &
      C(ind_PTG4104) + C(ind_PTG4105) + 2.00_dp * C(ind_PTG4106a) + &
      2.00_dp * C(ind_PTG4106b) + C(ind_PTG4206) + C(ind_PTG4215a) + &
      C(ind_PTG4215b) + C(ind_PTG4306) + C(ind_PTG4314) + C(ind_PTG4401) + &
      C(ind_PTG4410) + C(ind_PTG4505) + &
      C(ind_PTG6403) )
    flow(CH4_CH3O2) = ( 0.75 * C(ind_PTG4100) + &
      C(ind_PTG4101) + &
      C(ind_PTG6400) )
    flow(CH3OOH_CH3O2) = ( 0.7 * C(ind_PTG4107) )
    flow(CH3CO2H_CH3O2) = ( C(ind_PTG4210) )
    flow(PA_CH3O2) = ( C(ind_PTG4212) + &
      C(ind_PTG4214) + C(ind_PTG4215a) + C(ind_PTG4216) + &
      2.0 * C(ind_PTG4217) )
    flow(C2H2_CH3O2) = ( C(ind_PTG4222) )
    flow(C3H6_CH3O2) = ( 0.07 * C(ind_PTG4301) )
    flow(C5H8_CH3O2) = ( 0.08 * C(ind_PTG4500) )
    flow(DMSO_CH3O2) = ( 0.6 * C(ind_PTG9402) )
    flow(CH3SO2_CH3O2) = ( C(ind_PTG9403) )
    flow(CH3CHO_CH3O2) = ( C(ind_PTJ4201) )
    flow(CH3CO3H_CH3O2) = ( C(ind_PTJ4202) )
    flow(PAN_CH3O2) = ( 0.4 * C(ind_PTJ4204) )
    flow(CH3COCH3_CH3O2) = ( C(ind_PTJ4301) )
    flow(CH3Cl_CH3O2) = ( C(ind_PTJ6400) )
    flow(CH3Br_CH3O2) = ( C(ind_PTJ7400) )

  ! ----- IC: CH3OOH -----
    flow(CH3OOH_sink) = ( C(ind_PTG4107) + &
      C(ind_PTG6402) + &
      C(ind_PTJ4100) )
    flow(CH3O2_CH3OOH) = ( C(ind_PTG4103) )

  ! ----- IC: HCHO -----
    flow(HCHO_sink) = ( C(ind_PTG4108) + &
      C(ind_PTG4109) + C(ind_PTG6401) + C(ind_PTG7400) + C(ind_PTJ4101a) + &
      C(ind_PTJ4101b) )
    flow(CH4_HCHO) = ( 0.25 * C(ind_PTG4100) )
    flow(CH3OH_HCHO) = ( C(ind_PTG4102) )
    flow(CH3O2_HCHO) = ( C(ind_PTG4104) + &
      C(ind_PTG4105) + 2.0 * C(ind_PTG4106a) + C(ind_PTG4106b) + &
      C(ind_PTG4206) + C(ind_PTG4215a) + C(ind_PTG4215b) + C(ind_PTG4306) + &
      C(ind_PTG4401) + 0.2222222222222222 * C(ind_PTG4410) + &
      C(ind_PTG6403) ) + &
      0.5_dp * ( 1.25 * C(ind_PTG4505) )
    flow(CH3OOH_HCHO) = ( 0.3 * C(ind_PTG4107) + &
      C(ind_PTG6402) + &
      C(ind_PTJ4100) )
    flow(C2H4_HCHO) = ( C(ind_PTG4201) )
    flow(NACA_HCHO) = ( C(ind_PTG4219) + &
      C(ind_PTJ4203) )
    flow(PAN_HCHO) = ( C(ind_PTG4220) )
    flow(C3H6_HCHO) = ( 0.57 * C(ind_PTG4301) )
    flow(LHOC3H6O2_HCHO) = ( 0.98 * C(ind_PTG4309) )
    flow(CH3COCH2O2_HCHO) = ( C(ind_PTG4313) + &
      C(ind_PTG4314) )
    flow(MVKO2_HCHO) = ( 0.75 * C(ind_PTG4408) + &
      0.7777777777777778 * C(ind_PTG4410) + &
      0.5 * C(ind_PTG4411) )
    flow(C5H8_HCHO) = ( 0.58 * C(ind_PTG4500) )
    flow(ISO2_HCHO) = ( 0.88 * C(ind_PTG4504) + &
      C(ind_PTG4506) ) + &
      0.5_dp * ( 1.25 * C(ind_PTG4505) )
    flow(DMS_HCHO) = ( C(ind_PTG9400a) + &
      C(ind_PTG9401) )
    flow(DMSO_HCHO) = ( C(ind_PTG9402) )
    flow(ACETOL_HCHO) = ( C(ind_PTJ4302) )
    flow(MVK_HCHO) = ( C(ind_PTJ4401) )
    flow(MVKOOH_HCHO) = ( 0.75 * C(ind_PTJ4402) )
    flow(ISOOH_HCHO) = ( C(ind_PTJ4500) )
    flow(ISON_HCHO) = ( C(ind_PTJ4501) )

  ! ----- IC: CO -----
    flow(CO_sink) = ( C(ind_PTG4110) )
    flow(HCHO_CO) = ( C(ind_PTG4108) + &
      C(ind_PTG4109) + C(ind_PTG6401) + C(ind_PTG7400) + C(ind_PTJ4101a) + &
      C(ind_PTJ4101b) )
    flow(C2H4_CO) = ( 0.23 * C(ind_PTG4201) )
    flow(NACA_CO) = ( C(ind_PTG4219) + &
      C(ind_PTJ4203) )
    flow(C3H6_CO) = ( 0.31 * C(ind_PTG4301) )
    flow(MGLYOX_CO) = ( C(ind_PTG4317) + &
      C(ind_PTJ4303) )
    flow(MVK_CO) = ( 0.22 * C(ind_PTG4405) + &
      C(ind_PTJ4401) )
    flow(MVKO2_CO) = ( 0.25 * C(ind_PTG4408) + &
      C(ind_PTG4410) + &
      0.5 * C(ind_PTG4411) )
    flow(C5H8_CO) = ( 0.14 * C(ind_PTG4500) )
    flow(CO2_CO) = ( C(ind_PTJ4102) )
    flow(CH4_CO) = ( C(ind_PTJ4103) )
    flow(CH3CHO_CO) = ( C(ind_PTJ4201) )
    flow(MVKOOH_CO) = ( 0.25 * C(ind_PTJ4402) )

  ! ----- IC: HCOOH -----
    flow(HCOOH_sink) = ( C(ind_PTG4111) )
    flow(C2H4_HCOOH) = ( 0.54 * C(ind_PTG4201) )
    flow(C3H6_HCOOH) = ( 0.22 * C(ind_PTG4301) )
    flow(MVK_HCOOH) = ( 0.45 * C(ind_PTG4405) )
    flow(C5H8_HCOOH) = ( 0.28 * C(ind_PTG4500) )

  ! ----- IC: CO2 -----
    flow(CO2_sink) = ( C(ind_PTJ4102) )
    flow(CO_CO2) = ( C(ind_PTG4110) )
    flow(CH3CO2H_CO2) = ( C(ind_PTG4210) )
    flow(PA_CO2) = ( C(ind_PTG4215a) + &
      C(ind_PTG4216) + &
      2.0 * C(ind_PTG4217) )
    flow(PAN_CO2) = ( 0.4 * C(ind_PTJ4204) )

  ! ----- IC: C2H6 -----
    flow(C2H6_sink) = ( C(ind_PTG4200) )

  ! ----- IC: C2H4 -----
    flow(C2H4_sink) = ( C(ind_PTG4201) + &
      C(ind_PTG4202) )

  ! ----- IC: C2H2 -----
    flow(C2H2_sink) = ( C(ind_PTG4222) )

  ! ----- IC: C2H5O2 -----
    flow(C2H5O2_sink) = ( C(ind_PTG4203) + &
      C(ind_PTG4204) + C(ind_PTG4205) + C(ind_PTG4206) + &
      C(ind_PTG4216) )
    flow(C2H6_C2H5O2) = ( C(ind_PTG4200) )
    flow(C2H5OOH_C2H5O2) = ( 0.3 * C(ind_PTG4207) )
    flow(C3H8_C2H5O2) = ( 0.18 * C(ind_PTG4300) )
    flow(C3H6_C2H5O2) = ( 0.06 * C(ind_PTG4301) )
    flow(LC4H9O2_C2H5O2) = ( C(ind_PTG4401) + &
      0.28 * C(ind_PTG4403) )
    flow(LC4H9OOH_C2H5O2) = ( 0.33 * C(ind_PTJ4400) )
    flow(MEK_C2H5O2) = ( C(ind_PTJ4403) )
    flow(LC4H9NO3_C2H5O2) = ( 0.33 * C(ind_PTJ4406) )

  ! ----- IC: C2H5OOH -----
    flow(C2H5OOH_sink) = ( C(ind_PTG4207) + &
      C(ind_PTJ4200) )
    flow(C2H5O2_C2H5OOH) = ( C(ind_PTG4203) )

  ! ----- IC: CH3CHO -----
    flow(CH3CHO_sink) = ( C(ind_PTG4208) + &
      C(ind_PTG4209) + &
      C(ind_PTJ4201) )
    flow(C2H5O2_CH3CHO) = ( C(ind_PTG4204) + &
      C(ind_PTG4205) + C(ind_PTG4206) + &
      C(ind_PTG4216) )
    flow(C2H5OOH_CH3CHO) = ( 0.7 * C(ind_PTG4207) + &
      C(ind_PTJ4200) )
    flow(C3H6_CH3CHO) = ( 0.47 * C(ind_PTG4301) )
    flow(LHOC3H6O2_CH3CHO) = ( 0.98 * C(ind_PTG4309) )
    flow(LC4H9O2_CH3CHO) = ( C(ind_PTG4401) + &
      0.84 * C(ind_PTG4403) )
    flow(LMEKO2_CH3CHO) = ( 0.985 * C(ind_PTG4415) )
    flow(LC4H9OOH_CH3CHO) = ( 0.33 * C(ind_PTJ4400) )
    flow(LMEKOOH_CH3CHO) = ( C(ind_PTJ4404) )
    flow(LC4H9NO3_CH3CHO) = ( 0.33 * C(ind_PTJ4406) )

  ! ----- IC: CH3CO2H -----
    flow(CH3CO2H_sink) = ( C(ind_PTG4210) )
    flow(PA_CH3CO2H) = ( C(ind_PTG4211b) + &
      C(ind_PTG4215b) + &
      C(ind_PTG4216) )

  ! ----- IC: CH3CO3 -----
    flow(PA_sink) = ( C(ind_PTG4211a) + &
      C(ind_PTG4211b) + C(ind_PTG4212) + C(ind_PTG4213) + C(ind_PTG4214) + &
      C(ind_PTG4215a) + C(ind_PTG4215b) + C(ind_PTG4216) + &
      2.00_dp * C(ind_PTG4217) )
    flow(CH3CHO_PA) = ( C(ind_PTG4208) + &
      C(ind_PTG4209) )
    flow(CH3CO3H_PA) = ( C(ind_PTG4218) )
    flow(PAN_PA) = ( C(ind_PTG4221) + &
      0.6 * C(ind_PTJ4204) )
    flow(C3H6_PA) = ( 0.23 * C(ind_PTG4301) )
    flow(CH3COCH2O2_PA) = ( C(ind_PTG4313) + &
      C(ind_PTG4314) )
    flow(MGLYOX_PA) = ( C(ind_PTG4317) + &
      C(ind_PTJ4303) )
    flow(MVK_PA) = ( 0.1 * C(ind_PTG4405) + &
      C(ind_PTJ4401) )
    flow(MVKO2_PA) = ( 0.25 * C(ind_PTG4408) + &
      C(ind_PTG4410) )
    flow(LMEKO2_PA) = ( 0.985 * C(ind_PTG4415) )
    flow(C5H8_PA) = ( 0.1 * C(ind_PTG4500) )
    flow(CH3COCH3_PA) = ( C(ind_PTJ4301) )
    flow(ACETOL_PA) = ( C(ind_PTJ4302) )
    flow(HYPERACET_PA) = ( C(ind_PTJ4304) )
    flow(MVKOOH_PA) = ( 0.25 * C(ind_PTJ4402) )
    flow(MEK_PA) = ( C(ind_PTJ4403) )
    flow(LMEKOOH_PA) = ( C(ind_PTJ4404) )
    flow(BIACET_PA) = ( 2.0 * C(ind_PTJ4405) )

  ! ----- IC: CH3CO3H -----
    flow(CH3CO3H_sink) = ( C(ind_PTG4218) + &
      C(ind_PTJ4202) )
    flow(PA_CH3CO3H) = ( C(ind_PTG4211a) )

  ! ----- IC: NACA -----
    flow(NACA_sink) = ( C(ind_PTG4219) + &
      C(ind_PTJ4203) )
    flow(ISON_NACA) = ( C(ind_PTG4508) )

  ! ----- IC: PAN -----
    flow(PAN_sink) = ( C(ind_PTG4220) + &
      C(ind_PTG4221) + &
      C(ind_PTJ4204) )
    flow(PA_PAN) = ( C(ind_PTG4213) )

  ! ----- IC: C3H8 -----
    flow(C3H8_sink) = ( C(ind_PTG4300) )

  ! ----- IC: C3H6 -----
    flow(C3H6_sink) = ( C(ind_PTG4301) + &
      C(ind_PTG4302) + &
      C(ind_PTG4303) )

  ! ----- IC: IC3H7O2 -----
    flow(IC3H7O2_sink) = ( C(ind_PTG4304) + &
      C(ind_PTG4305) + &
      C(ind_PTG4306) )
    flow(C3H8_IC3H7O2) = ( 0.82 * C(ind_PTG4300) )
    flow(IC3H7OOH_IC3H7O2) = ( 0.3 * C(ind_PTG4307) )

  ! ----- IC: IC3H7OOH -----
    flow(IC3H7OOH_sink) = ( C(ind_PTG4307) + &
      C(ind_PTJ4300) )
    flow(IC3H7O2_IC3H7OOH) = ( C(ind_PTG4304) )

  ! ----- IC: LHOC3H6O2 -----
    flow(LHOC3H6O2_sink) = ( C(ind_PTG4308) + &
      C(ind_PTG4309) )
    flow(C2H4_LHOC3H6O2) = ( 0.6666666999999999 * C(ind_PTG4202) )
    flow(C3H6_LHOC3H6O2) = ( C(ind_PTG4302) )
    flow(LHOC3H6OOH_LHOC3H6O2) = ( 0.5 * C(ind_PTG4310) )

  ! ----- IC: LHOC3H6OOH -----
    flow(LHOC3H6OOH_sink) = ( C(ind_PTG4310) )
    flow(LHOC3H6O2_LHOC3H6OOH) = ( C(ind_PTG4308) )

  ! ----- IC: CH3COCH3 -----
    flow(CH3COCH3_sink) = ( C(ind_PTG4311) + &
      C(ind_PTJ4301) )
    flow(IC3H7O2_CH3COCH3) = ( 0.96 * C(ind_PTG4305) + &
      C(ind_PTG4306) )
    flow(IC3H7OOH_CH3COCH3) = ( 0.7 * C(ind_PTG4307) + &
      C(ind_PTJ4300) )
    flow(IC3H7NO3_CH3COCH3) = ( C(ind_PTG4320) + &
      C(ind_PTJ4306) )

  ! ----- IC: CH3COCH2O2 -----
    flow(CH3COCH2O2_sink) = ( C(ind_PTG4312) + &
      C(ind_PTG4313) + &
      C(ind_PTG4314) )
    flow(CH3COCH3_CH3COCH2O2) = ( C(ind_PTG4311) )
    flow(HYPERACET_CH3COCH2O2) = ( 0.3 * C(ind_PTG4315) )

  ! ----- IC: HYPERACET -----
    flow(HYPERACET_sink) = ( C(ind_PTG4315) + &
      C(ind_PTJ4304) )
    flow(CH3COCH2O2_HYPERACET) = ( C(ind_PTG4312) )

  ! ----- IC: ACETOL -----
    flow(ACETOL_sink) = ( C(ind_PTG4316) + &
      C(ind_PTJ4302) )
    flow(LHOC3H6OOH_ACETOL) = ( 0.5 * C(ind_PTG4310) )
    flow(CH3COCH2O2_ACETOL) = ( C(ind_PTG4314) )
    flow(MPAN_ACETOL) = ( C(ind_PTG4318) + &
      C(ind_PTJ4305) )
    flow(MVKO2_ACETOL) = ( 0.25 * C(ind_PTG4408) + &
      C(ind_PTG4410) + &
      C(ind_PTG4411) )
    flow(ISO2_ACETOL) = 0.5_dp * ( 0.25 * C(ind_PTG4505) )
    flow(CH3O2_ACETOL) = 0.5_dp * ( 0.25 * C(ind_PTG4505) )
    flow(ISON_ACETOL) = ( C(ind_PTG4508) )
    flow(MVKOOH_ACETOL) = ( 0.25 * C(ind_PTJ4402) )

  ! ----- IC: MGLYOX -----
    flow(MGLYOX_sink) = ( C(ind_PTG4317) + &
      C(ind_PTJ4303) )
    flow(C3H6_MGLYOX) = ( 0.04 * C(ind_PTG4301) )
    flow(CH3COCH2O2_MGLYOX) = ( C(ind_PTG4314) )
    flow(HYPERACET_MGLYOX) = ( 0.7 * C(ind_PTG4315) )
    flow(ACETOL_MGLYOX) = ( C(ind_PTG4316) )
    flow(MVK_MGLYOX) = ( 0.9 * C(ind_PTG4405) )
    flow(MVKO2_MGLYOX) = ( 0.5 * C(ind_PTG4408) + &
      C(ind_PTG4410) + &
      C(ind_PTG4411) )
    flow(ISO2_MGLYOX) = 0.5_dp * ( 0.25 * C(ind_PTG4505) )
    flow(CH3O2_MGLYOX) = 0.5_dp * ( 0.25 * C(ind_PTG4505) )
    flow(MVKOOH_MGLYOX) = ( 0.5 * C(ind_PTJ4402) )

  ! ----- IC: MPAN -----
    flow(MPAN_sink) = ( C(ind_PTG4318) + &
      C(ind_PTG4319) + &
      C(ind_PTJ4305) )
    flow(MVKO2_MPAN) = ( C(ind_PTG4409) )

  ! ----- IC: IC3H7NO3 -----
    flow(IC3H7NO3_sink) = ( C(ind_PTG4320) + &
      C(ind_PTJ4306) )
    flow(IC3H7O2_IC3H7NO3) = ( 0.04 * C(ind_PTG4305) )

  ! ----- IC: NC4H10 -----
    flow(NC4H10_sink) = ( C(ind_PTG4400) )

  ! ----- IC: LC4H9O2 -----
    flow(LC4H9O2_sink) = ( C(ind_PTG4401) + &
      C(ind_PTG4402) + &
      C(ind_PTG4403) )
    flow(NC4H10_LC4H9O2) = ( C(ind_PTG4400) )
    flow(LC4H9OOH_LC4H9O2) = ( 0.15 * C(ind_PTG4404) )

  ! ----- IC: LC4H9OOH -----
    flow(LC4H9OOH_sink) = ( C(ind_PTG4404) + &
      C(ind_PTJ4400) )
    flow(LC4H9O2_LC4H9OOH) = ( C(ind_PTG4402) )

  ! ----- IC: MVK -----
    flow(MVK_sink) = ( C(ind_PTG4405) + &
      C(ind_PTG4406) + &
      C(ind_PTJ4401) )
    flow(C5H8_MVK) = ( 0.65 * C(ind_PTG4500) )
    flow(ISO2_MVK) = ( 0.88 * C(ind_PTG4504) + &
      2.0 * C(ind_PTG4506) ) + &
      0.5_dp * ( 0.5 * C(ind_PTG4505) )
    flow(CH3O2_MVK) = 0.5_dp * ( 0.5 * C(ind_PTG4505) )
    flow(ISOOH_MVK) = ( C(ind_PTG4507) + &
      C(ind_PTJ4500) )
    flow(ISON_MVK) = ( C(ind_PTJ4501) )

  ! ----- IC: MVKO2 -----
    flow(MVKO2_sink) = ( C(ind_PTG4407) + &
      C(ind_PTG4408) + C(ind_PTG4409) + C(ind_PTG4410) + &
      2.00_dp * C(ind_PTG4411) )
    flow(MPAN_MVKO2) = ( C(ind_PTG4319) )
    flow(MVK_MVKO2) = ( C(ind_PTG4406) )
    flow(MVKOOH_MVKO2) = ( C(ind_PTG4412) )
    flow(C5H8_MVKO2) = ( 0.1 * C(ind_PTG4500) )

  ! ----- IC: MVKOOH -----
    flow(MVKOOH_sink) = ( C(ind_PTG4412) + &
      C(ind_PTJ4402) )
    flow(MVKO2_MVKOOH) = ( C(ind_PTG4407) )

  ! ----- IC: MEK -----
    flow(MEK_sink) = ( C(ind_PTG4413) + &
      C(ind_PTJ4403) )
    flow(LC4H9O2_MEK) = ( C(ind_PTG4401) + &
      0.5600000000000001 * C(ind_PTG4403) )
    flow(LC4H9OOH_MEK) = ( 0.85 * C(ind_PTG4404) + &
      0.67 * C(ind_PTJ4400) )
    flow(LC4H9NO3_MEK) = ( C(ind_PTG4417) + &
      0.67 * C(ind_PTJ4406) )

  ! ----- IC: LMEKO2 -----
    flow(LMEKO2_sink) = ( C(ind_PTG4414) + &
      C(ind_PTG4415) )
    flow(MEK_LMEKO2) = ( C(ind_PTG4413) )
    flow(LMEKOOH_LMEKO2) = ( 0.2 * C(ind_PTG4416) )

  ! ----- IC: LMEKOOH -----
    flow(LMEKOOH_sink) = ( C(ind_PTG4416) + &
      C(ind_PTJ4404) )
    flow(LMEKO2_LMEKOOH) = ( C(ind_PTG4414) )

  ! ----- IC: BIACET -----
    flow(BIACET_sink) = ( C(ind_PTJ4405) )
    flow(LMEKOOH_BIACET) = ( 0.8 * C(ind_PTG4416) )

  ! ----- IC: LC4H9NO3 -----
    flow(LC4H9NO3_sink) = ( C(ind_PTG4417) + &
      C(ind_PTJ4406) )
    flow(C3H6_LC4H9NO3) = ( C(ind_PTG4303) )
    flow(LHOC3H6O2_LC4H9NO3) = ( 0.02 * C(ind_PTG4309) )
    flow(LC4H9O2_LC4H9NO3) = ( 0.16 * C(ind_PTG4403) )
    flow(LMEKO2_LC4H9NO3) = ( 0.015 * C(ind_PTG4415) )

  ! ----- IC: C5H8 -----
    flow(C5H8_sink) = ( C(ind_PTG4500) + &
      C(ind_PTG4501) + &
      C(ind_PTG4502) )

  ! ----- IC: ISO2 -----
    flow(ISO2_sink) = ( C(ind_PTG4503) + &
      C(ind_PTG4504) + C(ind_PTG4505) + &
      2.00_dp * C(ind_PTG4506) )
    flow(C5H8_ISO2) = ( C(ind_PTG4501) )

  ! ----- IC: ISOOH -----
    flow(ISOOH_sink) = ( C(ind_PTG4507) + &
      C(ind_PTJ4500) )
    flow(ISO2_ISOOH) = ( C(ind_PTG4503) )

  ! ----- IC: ISON -----
    flow(ISON_sink) = ( C(ind_PTG4508) + &
      C(ind_PTJ4501) )
    flow(C5H8_ISON) = ( C(ind_PTG4502) )
    flow(ISO2_ISON) = ( 0.12 * C(ind_PTG4504) )

  ! ----- IC: CCl4 -----
    flow(CCl4_sink) = ( C(ind_PTG6404) + &
      C(ind_PTJ6401) )

  ! ----- IC: CH3Cl -----
    flow(CH3Cl_sink) = ( C(ind_PTG6405) + &
      C(ind_PTG6406) + &
      C(ind_PTJ6400) )

  ! ----- IC: CH3CCl3 -----
    flow(CH3CCl3_sink) = ( C(ind_PTG6407) + &
      C(ind_PTG6408) + &
      C(ind_PTJ6402) )

  ! ----- IC: CF2Cl2 -----
    flow(CF2Cl2_sink) = ( C(ind_PTG6500) + &
      C(ind_PTJ6501) )

  ! ----- IC: CFCl3 -----
    flow(CFCl3_sink) = ( C(ind_PTG6501) + &
      C(ind_PTJ6500) )

  ! ----- IC: CH3Br -----
    flow(CH3Br_sink) = ( C(ind_PTG7403) + &
      C(ind_PTJ7400) )

  ! ----- IC: CF3Br -----
    flow(CF3Br_sink) = ( C(ind_PTJ7500) )

  ! ----- IC: CF2ClBr -----
    flow(CF2ClBr_sink) = ( C(ind_PTJ7601) )

  ! ----- IC: CH3SO3H -----
    flow(DMSO_CH3SO3H) = ( 0.4 * C(ind_PTG9402) )

  ! ----- IC: CH3SO3H -----
    flow(CH3SO3_CH3SO3H) = ( C(ind_PTG9405) )

  ! ----- IC: DMS -----
    flow(DMS_sink) = ( C(ind_PTG9400a) + &
      C(ind_PTG9400b) + &
      C(ind_PTG9401) )

  ! ----- IC: DMSO -----
    flow(DMSO_sink) = ( C(ind_PTG9402) )
    flow(DMS_DMSO) = ( C(ind_PTG9400b) )

  ! ----- IC: CH3SO2 -----
    flow(CH3SO2_sink) = ( C(ind_PTG9403) + &
      C(ind_PTG9404) )
    flow(DMS_CH3SO2) = ( C(ind_PTG9400a) + &
      C(ind_PTG9401) )

  ! ----- IC: CH3SO3 -----
    flow(CH3SO3_sink) = ( C(ind_PTG9405) )
    flow(CH3SO2_CH3SO3) = ( C(ind_PTG9404) )

#endif

  END SUBROUTINE tag_IC_flow_calc

! -----------------------------------------------------------------------------

! main subroutine of isotopic exchange calculation

  SUBROUTINE tag_IC_integrate(TSL, nstep, C, press, cair, temp)

! turned off so far due to incompatibility with CAABA variables management
!   USE messy_mecca_kpp, ONLY: A, SPC_NAMES, EQN_TAGS

    IMPLICIT NONE

    ! I/O
    REAL(dp), INTENT(IN) :: C(:)
    REAL(dp), INTENT(IN) :: press
    REAL(dp), INTENT(IN) :: cair
    REAL(dp), INTENT(IN) :: temp

    INTRINSIC SUM

  ! TSL = times_step_len value    
    REAL(dp), INTENT(IN) :: TSL
  
  ! number of steps to take ( = nsteps from integrator? )
    INTEGER, INTENT(IN)  :: nstep

    REAL(dp) :: tot

#ifdef I_LINMAX
    INTEGER  :: n, s, k, nok, nbad
  ! "jacobians"
    REAL(dp) :: J(NTCSPEC,NTCSPEC,NTCISO)
  ! "weights"
    REAL(dp) :: Z(NTCSPEC)

    REAL(dp) :: ITA(NTCSPEC), &
                ITR(NTCSPEC,2:NTCISO), &
                ITAR(NTCSPEC,2:NTCISO)
  ! REAL(dp) :: ISAVE(NTCSPEC,NTCISO), IDER(NTCSPEC,NTCISO)
    REAL(dp) :: kiecorr, delta
    INTEGER  :: steps
#endif

#ifdef I_SIMEULER
    INTEGER  :: n, s, nok, nbad
    REAL(dp) :: part, delta, done
    LOGICAL  :: reject, reject_last
    REAL(dp) :: ISAVE(NTCSPEC,NTCISO), IDER(NTCSPEC,NTCISO)
    REAL(dp), PARAMETER :: CLOSE_FAC = 0.2_dp, FAR_FAC = 2.0_dp
#endif

#ifdef I_CASHKARP
    INTEGER  :: n, nok, nbad
#endif

  ! ===== PROCESS section =====================================================

  ! updating total C fractions
  ! (they do not change during the integration)

  ! updating TC, comment to optimize
  ! CALL tag_IC_calctotals
    tot = T12C + T13C
    IF (tot /= 0.0_dp) THEN
      F12C(ind_tTC) = T12C / tot
      F13C(ind_tTC) = T13C / tot
    ELSE
      F12C(ind_tTC) = 0.0_dp
      F13C(ind_tTC) = 0.0_dp
    ENDIF

! turned off so far due to incompatibility with CAABA variables management
  ! checking A() and PTs correspondence
!   tag_IC_PEPTAD = 0
!   DO n = 1, NTCREAC
!     IF ( ( A(TRPTCIND(n,2)) / (C(TRPTCIND(n,1))/TSL) ) .LT.  0.1_dp ) THEN
#ifdef DEBUG
!       print *,'tag_IC_process: A << PT: ',TRIM(EQN_TAGS(TRPTCIND(n,1)))
#endif
!       tag_IC_PEPTAD = tag_IC_PEPTAD + 1
!     ENDIF
!     IF ( ( A(TRPTCIND(n,2)) / (C(TRPTCIND(n,1))/TSL) ) .GT. 10.0_dp ) THEN
#ifdef DEBUG
!       print *,'tag_IC_process: A >> PT: ',TRIM(EQN_TAGS(TRPTCIND(n,1)))
#endif
!       tag_IC_PEPTAD = tag_IC_PEPTAD + 1
!     ENDIF
!   ENDDO

  ! ----- main calculation cycle ------------------------------------

#ifndef INTERFLOW
  ! calculate C molecules flow through PTs (or A)
    CALL tag_IC_flow_calc(C)
    
    CALL tag_IC_update_kie(C, press, cair, temp)
#endif

#ifdef I_LINMAX
! >>>>> LINEAR-MATRIX integration scheme >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

    tag_IC_NREJCT = 0

  ! filtering "below-threshold" species  (also an optimisation issue?)
!    DO n = 1, NTCSPEC
!      tot = I12C(n) + I13C(n)                ! summing 12C+13C
!      IF (tot .LT. THRES) THEN
!        I12C(n) = 0.0_dp; I13C(n) = 0.0_dp
!        tag_IC_NREJCT = tag_IC_NREJCT + 1
!      ENDIF
!    ENDDO

#define xI_LINMAX_INV

  ! ----- stepping -----

    steps = 260                              ! # steps 
    delta = TSL / DBLE(steps)                ! stepping
    
  ! ----- setting up jacobians -----

#ifdef I_LINMAX_INV
  ! setup with inversion

    CALL prepare_Z(5,TSL)                    ! prepare weights:    type 1 2 3 4 5
    CALL prepare_J(.TRUE.)                   ! prepare "major jacobian"
    CALL inverse(J,NTCSPEC)
#else
  ! setup without inversion

    CALL prepare_Z(5,TSL)                    ! prepare weights:    type 1 2 3 4 5
    CALL prepare_J(.FALSE.)                  ! prepare "major jacobian"
#endif

  ! filling the minor matrices
    DO k = 2, NTCISO
      J(:,:,k) = J(:,:,1)
    ENDDO

  ! ----- accounting KIE -----

  ! prepairing "minor jacobian(s)"




  ! ----- integration loop -----

  ! preparing major and minor jac. matrices for integration
    DO n = 1, NTCSPEC
      DO s = 1, NTCSPEC
        J(n,s,:) = J(n,s,:) / (1.0_dp - delta * J(s,s,:))
      ENDDO
    ENDDO

    DO nok = 1, steps

    ! scaling tracers: molecules to atoms
    ! abundant
      ITA(:) = ISOC(:,1)
      DO k = 2, NTCISO  
      ! rare
        ITR(:,k) = ISOC(:,k) / QTCATOM(:)
      ! abundant in rare
        ITAR(:,k) = ISOC(:,k) - ITR(:,k)
      ENDDO

    ! advancing solution
      ITA(:) = ITA(:) + delta * MATMUL(J(:,:,1),ITA(:))

      DO k = 2, NTCISO
        ITR(:,k)  = ITR(:,k)  + delta * MATMUL(J(:,:,k),ITR(:,k) )
        ITAR(:,k) = ITAR(:,k) + delta * MATMUL(J(:,:,k),ITAR(:,k))
      ENDDO

    ! scaling tracers: atoms to molecules
    ! abundant  
      ISOC(:,1) = ITA(:) + SUM(ITAR(:,:),DIM=2) - SUM(ITR(:,:),DIM=2) * (QTCATOM(:)-1)
    ! rare
      DO k = 2, NTCISO  
        ISOC(:,k) = ITR(:,k) * QTCATOM(:)
      ENDDO

/*    verif. example
 $    I12C(:) = (ITA(:) + ITAA(:)) - ITR(:) * (QTCATOM(:)-1)
 $    I13C(:) = ITR(:) * (QTCATOM(:))
*/

/*  ! advancing solution
 $    DO k = 1, NTCISO
 $      ISOC(:,k) = ISOC(:,k) + delta * MATMUL(J(:,:,k),ISOC(:,k))
 $    ENDDO
*/

    ! filtering negative concentrations 
      DO n = 1, NTCSPEC
        DO k = 1, NTCISO    
          IF (ISOC(n,k) .LT. 0.0_dp) THEN
          print *,'tag_IC_integrate: ',TRIM(SPC_NAMES(RTCIND(n))),', class #',k,&
	          ' is negative = ',ISOC(n,k)
          ISOC(n,k) = 0.0_dp
          ENDIF
	ENDDO
      ENDDO

    ENDDO

  ! ----- finalizing -----

!    CALL tag_IC_calcdeltas

!    print *,' DD13,DC = ',D13C(ind_tCH3O2)-(C(ind_I13CH3O2)/C(ind_I12CH3O2)/VPDB_13C-1.0_dp)*1000.0_dp, &
!            ' ',I12C(ind_tCH3O2)+I13C(ind_tCH3O2)-C(ind_CH3O2)

    tag_IC_NSTEP = steps
    tag_IC_NREJCT = tag_IC_NREJCT / tag_IC_NSTEP

    ! necessary for this integrator
    CALL tag_IC_correct2reg(C)
    
! <<<<< LINEAR-MATRIX integration scheme <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
#endif


#ifdef I_SIMEULER
! >>>>> Simple Euler integration scheme >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

  ! partitioning = 1/nstep
    part = 1.0_dp / DBLE(nstep)

    tag_IC_NREJCT = 0   ! # of rejected species
    tag_IC_NSTEP  = 0   ! # of calculation steps made
    
    delta = part        ! assume first suggested delta = partitioning
    reject = .FALSE.; reject_last = .FALSE.
    done = 0.0_dp
    nok = 0; nbad = 0

    DO WHILE (done .LT. 1.0_dp)

#ifdef DEBUG    
      print *, 'step = ',tag_IC_NSTEP+1,'   done = ',done,'   delta = ',delta
#endif

      IF (.NOT. reject) THEN
      ! normal case
      !
      ! saving tracers (except TC)
        ISAVE = ISOC 
      ELSE
      ! overshooting case, perivous step was rejected
      !
      ! restoring tracers and calculating again with a new delta
        ISOC = ISAVE 
      ENDIF

    ! calculating new isotopologues budgets

      CALL iderivs(0.0_dp, ISOC, IDER)
      ISOC(:,:) = ISOC(:,:) + delta * IDER(:,:)

    ! overshoot check
      reject = .FALSE.
      DO n = 1, NTCISO
        DO s = 1, NTCSPEC
          IF ( ISOC(s,n) .LT. 0.0_dp )  THEN
          ! step is rejected
            reject = .TRUE.
            reject_last = .TRUE.
  
          ! choosing new, smaller delta from all overshooted:
          !
          ! to reach >0, delta should be scaled down,
          ! new delta <= -delta * P/(I-P), among all isotopologues
          !
            delta = DMIN1(delta, 1.0_dp-done, &
                          -CLOSE_FAC * delta * ISAVE(s,n) &
                         / ( ISOC(s,n) - ISAVE(s,n) ) )
          ENDIF
        ENDDO
      ENDDO

    ! prepairing new step
      IF (.NOT. reject) THEN
        done = done + delta

      ! assume next suggested delta = partitioning,
      ! or the rest if part goes beyond the calculation interval (1.0)
        IF (reject_last) THEN
          delta = DMIN1(delta, 1.0_dp-done)
          reject_last = .FALSE.
        ELSE
          delta = delta * FAR_FAC
      delta = DMIN1(delta, 1.0_dp-done)
        ENDIF

        nok = nok + 1
      ELSE
        nbad = nbad + 1
      ENDIF

    ENDDO        !   (WHILE)

    tag_IC_NSTEP = nok + nbad
    tag_IC_NREJCT = tag_IC_NREJCT / tag_IC_NSTEP

! <<<<< Simple Euler integration scheme <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
#endif

#ifdef I_CASHKARP
! >>>>> CASH-KARP RK integration scheme >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                                              
  ! calling integrator                                                        
    CALL rkckintegrate(ISOC, &                                          
                       0.0_dp, 1.0_dp, 1.0E-7_dp, &                           
                       1.0_dp/DBLE(nstep), 0.0_dp, &                          
                       nok, nbad)                                             
                                                                              
  ! run-control parameters                                                    
    tag_IC_NSTEP = nok + nbad      ! # of integration steps made              
                                                                              
    ! # of rejected species (approx.: C-K takes derivatives 6 times per step) 
    IF ( tag_IC_NSTEP /= 0 ) THEN                                             
      tag_IC_NREJCT = tag_IC_NREJCT / ( tag_IC_NSTEP * 6 )                    
    ELSE                                                                      
      tag_IC_NREJCT = 0                                                       
    ENDIF                                                                     
                                                                              
! <<<<< CASH-KARP RK integration scheme <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
#endif

  ! CALL tag_IC_correct2reg(C)
  ! CALL tag_IC_calctotals(C)
  ! CALL tag_IC_calcdeltas

  ! run-control parameters                                                    
    tag_IC_NSTEP_REQ = nstep       ! # of requested steps                     

#ifdef DEBUG
    print *,'tag_IC_integrate: passed, req: ',tag_IC_NSTEP_REQ, &
                                    ', steps: ', tag_IC_NSTEP, &
                                    ', rej: ', tag_IC_NREJCT
#endif 

  CONTAINS

  ! ----------------------------------------------------------------------------


    SUBROUTINE iderivs(t,IVI,IDO)

    ! Subroutine iderivs returns isotopologues derivatives in IDO(), using 
    ! the starting values from IVI(), PTs and flow() at the moment t (which
    ! actually is not used)

      IMPLICIT NONE

      INTRINSIC SUM
      
      REAL(dp), INTENT(IN)  :: t 
      REAL(dp), INTENT(IN)  :: IVI(NTCSPEC,NTCISO)
      REAL(dp), INTENT(OUT) :: IDO(NTCSPEC,NTCISO)
  
      REAL(dp)              :: tot
      INTEGER               :: i

      ! getting the fractions of isotopologues
        DO i = 1, NTCSPEC
          tot = SUM(IVI(i,:))    ! summing spec 
          IF (tot .LT. THRES) THEN
!         IF (tot .NE. 0.0_dp) THEN
            F12C(i) = 0.0_dp; F13C(i) = 0.0_dp
            tag_IC_NREJCT = tag_IC_NREJCT + 1
          ELSE
            F12C(i) = (IVI(i,1) / tot)
            F13C(i) = (IVI(i,2) / tot)
          ENDIF
        ENDDO

      ! calculating 12C 13C isotopologues derivatives

    ! ===== tag_IC: IDO(tag_IC_#,1) <- ( F12C(tag_IC_#)*flow() + ... ) =====

      ! ----- CH4 -----  WARN: indicated as fixed species
      IDO(tag_IC_CH4,1) = ( &
        -   F12C(tag_IC_CH4) * ( flow(CH4_sink) )  &
        +  F12C(tag_IC_C3H6) * ( flow(C3H6_CH4) ) )

      ! ----- CH3OH -----
      IDO(tag_IC_CH3OH,1) = ( &
        - F12C(tag_IC_CH3OH) * ( flow(CH3OH_sink) )  &
        + F12C(tag_IC_CH3O2) * ( flow(CH3O2_CH3OH) )  &
        +  F12C(tag_IC_C3H6) * ( flow(C3H6_CH3OH) )  &
        +  F12C(tag_IC_ISO2) * ( flow(ISO2_CH3OH) ) )

      ! ----- CH3O2 -----
      IDO(tag_IC_CH3O2,1) = ( &
        - F12C(tag_IC_CH3O2) * ( flow(CH3O2_sink) )  &
        +   F12C(tag_IC_CH4) * ( flow(CH4_CH3O2) )  &
        + F12C(tag_IC_CH3OOH) * ( flow(CH3OOH_CH3O2) )  &
        + F12C(tag_IC_CH3CO2H) * ( flow(CH3CO2H_CH3O2) )  &
        +    F12C(tag_IC_PA) * ( flow(PA_CH3O2) )  &
        +  F12C(tag_IC_C2H2) * ( flow(C2H2_CH3O2) )  &
        +  F12C(tag_IC_C3H6) * ( flow(C3H6_CH3O2) )  &
        +  F12C(tag_IC_C5H8) * ( flow(C5H8_CH3O2) )  &
        +  F12C(tag_IC_DMSO) * ( flow(DMSO_CH3O2) )  &
        + F12C(tag_IC_CH3SO2) * ( flow(CH3SO2_CH3O2) )  &
        + F12C(tag_IC_CH3CHO) * ( flow(CH3CHO_CH3O2) )  &
        +   F12C(tag_IC_CH3CO3H) * ( flow(CH3CO3H_CH3O2) )  &
        +   F12C(tag_IC_PAN) * ( flow(PAN_CH3O2) )  &
        + F12C(tag_IC_CH3COCH3) * ( flow(CH3COCH3_CH3O2) )  &
        + F12C(tag_IC_CH3Cl) * ( flow(CH3Cl_CH3O2) )  &
        + F12C(tag_IC_CH3Br) * ( flow(CH3Br_CH3O2) ) )

      ! ----- CH3OOH -----
      IDO(tag_IC_CH3OOH,1) = ( &
        - F12C(tag_IC_CH3OOH) * ( flow(CH3OOH_sink) )  &
        + F12C(tag_IC_CH3O2) * ( flow(CH3O2_CH3OOH) ) )

      ! ----- HCHO -----
      IDO(tag_IC_HCHO,1) = ( &
        -  F12C(tag_IC_HCHO) * ( flow(HCHO_sink) )  &
        +   F12C(tag_IC_CH4) * ( flow(CH4_HCHO) )  &
        + F12C(tag_IC_CH3OH) * ( flow(CH3OH_HCHO) )  &
        + F12C(tag_IC_CH3O2) * ( flow(CH3O2_HCHO) )  &
        + F12C(tag_IC_CH3OOH) * ( flow(CH3OOH_HCHO) )  &
        +  F12C(tag_IC_C2H4) * ( flow(C2H4_HCHO) )  &
        +  F12C(tag_IC_NACA) * ( flow(NACA_HCHO) )  &
        +   F12C(tag_IC_PAN) * ( flow(PAN_HCHO) )  &
        +  F12C(tag_IC_C3H6) * ( flow(C3H6_HCHO) )  &
        + F12C(tag_IC_LHOC3H6O2) * ( flow(LHOC3H6O2_HCHO) )  &
        + F12C(tag_IC_CH3COCH2O2) * ( flow(CH3COCH2O2_HCHO) )  &
        + F12C(tag_IC_MVKO2) * ( flow(MVKO2_HCHO) )  &
        +  F12C(tag_IC_C5H8) * ( flow(C5H8_HCHO) )  &
        +  F12C(tag_IC_ISO2) * ( flow(ISO2_HCHO) )  &
        +   F12C(tag_IC_DMS) * ( flow(DMS_HCHO) )  &
        +  F12C(tag_IC_DMSO) * ( flow(DMSO_HCHO) )  &
        + F12C(tag_IC_ACETOL) * ( flow(ACETOL_HCHO) )  &
        +   F12C(tag_IC_MVK) * ( flow(MVK_HCHO) )  &
        + F12C(tag_IC_MVKOOH) * ( flow(MVKOOH_HCHO) )  &
        + F12C(tag_IC_ISOOH) * ( flow(ISOOH_HCHO) )  &
        +  F12C(tag_IC_ISON) * ( flow(ISON_HCHO) ) )

      ! ----- CO -----
      IDO(tag_IC_CO,1) = ( &
        -    F12C(tag_IC_CO) * ( flow(CO_sink) )  &
        +  F12C(tag_IC_HCHO) * ( flow(HCHO_CO) )  &
        +  F12C(tag_IC_C2H4) * ( flow(C2H4_CO) )  &
        +  F12C(tag_IC_NACA) * ( flow(NACA_CO) )  &
        +  F12C(tag_IC_C3H6) * ( flow(C3H6_CO) )  &
        + F12C(tag_IC_MGLYOX) * ( flow(MGLYOX_CO) )  &
        +   F12C(tag_IC_MVK) * ( flow(MVK_CO) )  &
        + F12C(tag_IC_MVKO2) * ( flow(MVKO2_CO) )  &
        +  F12C(tag_IC_C5H8) * ( flow(C5H8_CO) )  &
        +   F12C(tag_IC_CO2) * ( flow(CO2_CO) )  &
        +   F12C(tag_IC_CH4) * ( flow(CH4_CO) )  &
        + F12C(tag_IC_CH3CHO) * ( flow(CH3CHO_CO) )  &
        + F12C(tag_IC_MVKOOH) * ( flow(MVKOOH_CO) ) )

      ! ----- HCOOH -----
      IDO(tag_IC_HCOOH,1) = ( &
        - F12C(tag_IC_HCOOH) * ( flow(HCOOH_sink) )  &
        +  F12C(tag_IC_C2H4) * ( flow(C2H4_HCOOH) )  &
        +  F12C(tag_IC_C3H6) * ( flow(C3H6_HCOOH) )  &
        +   F12C(tag_IC_MVK) * ( flow(MVK_HCOOH) )  &
        +  F12C(tag_IC_C5H8) * ( flow(C5H8_HCOOH) ) )

      ! ----- CO2 -----
      IDO(tag_IC_CO2,1) = ( &
        -   F12C(tag_IC_CO2) * ( flow(CO2_sink) )  &
        +    F12C(tag_IC_CO) * ( flow(CO_CO2) )  &
        + F12C(tag_IC_CH3CO2H) * ( flow(CH3CO2H_CO2) )  &
        +    F12C(tag_IC_PA) * ( flow(PA_CO2) )  &
        +   F12C(tag_IC_PAN) * ( flow(PAN_CO2) ) )

      ! ----- C2H6 -----
      IDO(tag_IC_C2H6,1) = ( &
        -  F12C(tag_IC_C2H6) * ( flow(C2H6_sink) ) )

      ! ----- C2H4 -----
      IDO(tag_IC_C2H4,1) = ( &
        -  F12C(tag_IC_C2H4) * ( flow(C2H4_sink) ) )

      ! ----- C2H2 -----
      IDO(tag_IC_C2H2,1) = ( &
        -  F12C(tag_IC_C2H2) * ( flow(C2H2_sink) ) )

      ! ----- C2H5O2 -----
      IDO(tag_IC_C2H5O2,1) = ( &
        -  F12C(tag_IC_C2H5O2) * ( flow(C2H5O2_sink) )  &
        +  F12C(tag_IC_C2H6) * ( flow(C2H6_C2H5O2) )  &
        + F12C(tag_IC_C2H5OOH) * ( flow(C2H5OOH_C2H5O2) )  &
        +  F12C(tag_IC_C3H8) * ( flow(C3H8_C2H5O2) )  &
        +  F12C(tag_IC_C3H6) * ( flow(C3H6_C2H5O2) )  &
        + F12C(tag_IC_LC4H9O2) * ( flow(LC4H9O2_C2H5O2) )  &
        + F12C(tag_IC_LC4H9OOH) * ( flow(LC4H9OOH_C2H5O2) )  &
        +   F12C(tag_IC_MEK) * ( flow(MEK_C2H5O2) )  &
        +  F12C(tag_IC_LC4H9NO3) * ( flow(LC4H9NO3_C2H5O2) ) )

      ! ----- C2H5OOH -----
      IDO(tag_IC_C2H5OOH,1) = ( &
        - F12C(tag_IC_C2H5OOH) * ( flow(C2H5OOH_sink) )  &
        +  F12C(tag_IC_C2H5O2) * ( flow(C2H5O2_C2H5OOH) ) )

      ! ----- CH3CHO -----
      IDO(tag_IC_CH3CHO,1) = ( &
        - F12C(tag_IC_CH3CHO) * ( flow(CH3CHO_sink) )  &
        +  F12C(tag_IC_C2H5O2) * ( flow(C2H5O2_CH3CHO) )  &
        + F12C(tag_IC_C2H5OOH) * ( flow(C2H5OOH_CH3CHO) )  &
        +  F12C(tag_IC_C3H6) * ( flow(C3H6_CH3CHO) )  &
        + F12C(tag_IC_LHOC3H6O2) * ( flow(LHOC3H6O2_CH3CHO) )  &
        + F12C(tag_IC_LC4H9O2) * ( flow(LC4H9O2_CH3CHO) )  &
        + F12C(tag_IC_LMEKO2) * ( flow(LMEKO2_CH3CHO) )  &
        + F12C(tag_IC_LC4H9OOH) * ( flow(LC4H9OOH_CH3CHO) )  &
        + F12C(tag_IC_LMEKOOH) * ( flow(LMEKOOH_CH3CHO) )  &
        +  F12C(tag_IC_LC4H9NO3) * ( flow(LC4H9NO3_CH3CHO) ) )

      ! ----- CH3CO2H -----
      IDO(tag_IC_CH3CO2H,1) = ( &
        - F12C(tag_IC_CH3CO2H) * ( flow(CH3CO2H_sink) )  &
        +    F12C(tag_IC_PA) * ( flow(PA_CH3CO2H) ) )

      ! ----- CH3CO3 -----
      IDO(tag_IC_PA,1) = ( &
        -    F12C(tag_IC_PA) * ( flow(PA_sink) )  &
        + F12C(tag_IC_CH3CHO) * ( flow(CH3CHO_PA) )  &
        +   F12C(tag_IC_CH3CO3H) * ( flow(CH3CO3H_PA) )  &
        +   F12C(tag_IC_PAN) * ( flow(PAN_PA) )  &
        +  F12C(tag_IC_C3H6) * ( flow(C3H6_PA) )  &
        + F12C(tag_IC_CH3COCH2O2) * ( flow(CH3COCH2O2_PA) )  &
        + F12C(tag_IC_MGLYOX) * ( flow(MGLYOX_PA) )  &
        +   F12C(tag_IC_MVK) * ( flow(MVK_PA) )  &
        + F12C(tag_IC_MVKO2) * ( flow(MVKO2_PA) )  &
        + F12C(tag_IC_LMEKO2) * ( flow(LMEKO2_PA) )  &
        +  F12C(tag_IC_C5H8) * ( flow(C5H8_PA) )  &
        + F12C(tag_IC_CH3COCH3) * ( flow(CH3COCH3_PA) )  &
        + F12C(tag_IC_ACETOL) * ( flow(ACETOL_PA) )  &
        + F12C(tag_IC_HYPERACET) * ( flow(HYPERACET_PA) )  &
        + F12C(tag_IC_MVKOOH) * ( flow(MVKOOH_PA) )  &
        +   F12C(tag_IC_MEK) * ( flow(MEK_PA) )  &
        + F12C(tag_IC_LMEKOOH) * ( flow(LMEKOOH_PA) )  &
        + F12C(tag_IC_BIACET) * ( flow(BIACET_PA) ) )

      ! ----- CH3CO3H -----
      IDO(tag_IC_CH3CO3H,1) = ( &
        -   F12C(tag_IC_CH3CO3H) * ( flow(CH3CO3H_sink) )  &
        +    F12C(tag_IC_PA) * ( flow(PA_CH3CO3H) ) )

      ! ----- NACA -----
      IDO(tag_IC_NACA,1) = ( &
        -  F12C(tag_IC_NACA) * ( flow(NACA_sink) )  &
        +  F12C(tag_IC_ISON) * ( flow(ISON_NACA) ) )

      ! ----- PAN -----
      IDO(tag_IC_PAN,1) = ( &
        -   F12C(tag_IC_PAN) * ( flow(PAN_sink) )  &
        +    F12C(tag_IC_PA) * ( flow(PA_PAN) ) )

      ! ----- C3H8 -----
      IDO(tag_IC_C3H8,1) = ( &
        -  F12C(tag_IC_C3H8) * ( flow(C3H8_sink) ) )

      ! ----- C3H6 -----
      IDO(tag_IC_C3H6,1) = ( &
        -  F12C(tag_IC_C3H6) * ( flow(C3H6_sink) ) )

      ! ----- IC3H7O2 -----
      IDO(tag_IC_IC3H7O2,1) = ( &
        -  F12C(tag_IC_IC3H7O2) * ( flow(IC3H7O2_sink) )  &
        +  F12C(tag_IC_C3H8) * ( flow(C3H8_IC3H7O2) )  &
        + F12C(tag_IC_IC3H7OOH) * ( flow(IC3H7OOH_IC3H7O2) ) )

      ! ----- IC3H7OOH -----
      IDO(tag_IC_IC3H7OOH,1) = ( &
        - F12C(tag_IC_IC3H7OOH) * ( flow(IC3H7OOH_sink) )  &
        +  F12C(tag_IC_IC3H7O2) * ( flow(IC3H7O2_IC3H7OOH) ) )

      ! ----- LHOC3H6O2 -----
      IDO(tag_IC_LHOC3H6O2,1) = ( &
        - F12C(tag_IC_LHOC3H6O2) * ( flow(LHOC3H6O2_sink) )  &
        +  F12C(tag_IC_C2H4) * ( flow(C2H4_LHOC3H6O2) )  &
        +  F12C(tag_IC_C3H6) * ( flow(C3H6_LHOC3H6O2) )  &
        + F12C(tag_IC_LHOC3H6OOH) * ( flow(LHOC3H6OOH_LHOC3H6O2) ) )

      ! ----- LHOC3H6OOH -----
      IDO(tag_IC_LHOC3H6OOH,1) = ( &
        - F12C(tag_IC_LHOC3H6OOH) * ( flow(LHOC3H6OOH_sink) )  &
        + F12C(tag_IC_LHOC3H6O2) * ( flow(LHOC3H6O2_LHOC3H6OOH) ) )

      ! ----- CH3COCH3 -----
      IDO(tag_IC_CH3COCH3,1) = ( &
        - F12C(tag_IC_CH3COCH3) * ( flow(CH3COCH3_sink) )  &
        +  F12C(tag_IC_IC3H7O2) * ( flow(IC3H7O2_CH3COCH3) )  &
        + F12C(tag_IC_IC3H7OOH) * ( flow(IC3H7OOH_CH3COCH3) )  &
        + F12C(tag_IC_IC3H7NO3) * ( flow(IC3H7NO3_CH3COCH3) ) )

      ! ----- CH3COCH2O2 -----
      IDO(tag_IC_CH3COCH2O2,1) = ( &
        - F12C(tag_IC_CH3COCH2O2) * ( flow(CH3COCH2O2_sink) )  &
        + F12C(tag_IC_CH3COCH3) * ( flow(CH3COCH3_CH3COCH2O2) )  &
        + F12C(tag_IC_HYPERACET) * ( flow(HYPERACET_CH3COCH2O2) ) )

      ! ----- HYPERACET -----
      IDO(tag_IC_HYPERACET,1) = ( &
        - F12C(tag_IC_HYPERACET) * ( flow(HYPERACET_sink) )  &
        + F12C(tag_IC_CH3COCH2O2) * ( flow(CH3COCH2O2_HYPERACET) ) )

      ! ----- ACETOL -----
      IDO(tag_IC_ACETOL,1) = ( &
        - F12C(tag_IC_ACETOL) * ( flow(ACETOL_sink) )  &
        + F12C(tag_IC_LHOC3H6OOH) * ( flow(LHOC3H6OOH_ACETOL) )  &
        + F12C(tag_IC_CH3COCH2O2) * ( flow(CH3COCH2O2_ACETOL) )  &
        +  F12C(tag_IC_MPAN) * ( flow(MPAN_ACETOL) )  &
        + F12C(tag_IC_MVKO2) * ( flow(MVKO2_ACETOL) )  &
        +  F12C(tag_IC_ISO2) * ( flow(ISO2_ACETOL) )  &
        + F12C(tag_IC_CH3O2) * ( flow(CH3O2_ACETOL) )  &
        +  F12C(tag_IC_ISON) * ( flow(ISON_ACETOL) )  &
        + F12C(tag_IC_MVKOOH) * ( flow(MVKOOH_ACETOL) ) )

      ! ----- MGLYOX -----
      IDO(tag_IC_MGLYOX,1) = ( &
        - F12C(tag_IC_MGLYOX) * ( flow(MGLYOX_sink) )  &
        +  F12C(tag_IC_C3H6) * ( flow(C3H6_MGLYOX) )  &
        + F12C(tag_IC_CH3COCH2O2) * ( flow(CH3COCH2O2_MGLYOX) )  &
        + F12C(tag_IC_HYPERACET) * ( flow(HYPERACET_MGLYOX) )  &
        + F12C(tag_IC_ACETOL) * ( flow(ACETOL_MGLYOX) )  &
        +   F12C(tag_IC_MVK) * ( flow(MVK_MGLYOX) )  &
        + F12C(tag_IC_MVKO2) * ( flow(MVKO2_MGLYOX) )  &
        +  F12C(tag_IC_ISO2) * ( flow(ISO2_MGLYOX) )  &
        + F12C(tag_IC_CH3O2) * ( flow(CH3O2_MGLYOX) )  &
        + F12C(tag_IC_MVKOOH) * ( flow(MVKOOH_MGLYOX) ) )

      ! ----- MPAN -----
      IDO(tag_IC_MPAN,1) = ( &
        -  F12C(tag_IC_MPAN) * ( flow(MPAN_sink) )  &
        + F12C(tag_IC_MVKO2) * ( flow(MVKO2_MPAN) ) )

      ! ----- IC3H7NO3 -----
      IDO(tag_IC_IC3H7NO3,1) = ( &
        - F12C(tag_IC_IC3H7NO3) * ( flow(IC3H7NO3_sink) )  &
        +  F12C(tag_IC_IC3H7O2) * ( flow(IC3H7O2_IC3H7NO3) ) )

      ! ----- NC4H10 -----
      IDO(tag_IC_NC4H10,1) = ( &
        - F12C(tag_IC_NC4H10) * ( flow(NC4H10_sink) ) )

      ! ----- LC4H9O2 -----
      IDO(tag_IC_LC4H9O2,1) = ( &
        - F12C(tag_IC_LC4H9O2) * ( flow(LC4H9O2_sink) )  &
        + F12C(tag_IC_NC4H10) * ( flow(NC4H10_LC4H9O2) )  &
        + F12C(tag_IC_LC4H9OOH) * ( flow(LC4H9OOH_LC4H9O2) ) )

      ! ----- LC4H9OOH -----
      IDO(tag_IC_LC4H9OOH,1) = ( &
        - F12C(tag_IC_LC4H9OOH) * ( flow(LC4H9OOH_sink) )  &
        + F12C(tag_IC_LC4H9O2) * ( flow(LC4H9O2_LC4H9OOH) ) )

      ! ----- MVK -----
      IDO(tag_IC_MVK,1) = ( &
        -   F12C(tag_IC_MVK) * ( flow(MVK_sink) )  &
        +  F12C(tag_IC_C5H8) * ( flow(C5H8_MVK) )  &
        +  F12C(tag_IC_ISO2) * ( flow(ISO2_MVK) )  &
        + F12C(tag_IC_CH3O2) * ( flow(CH3O2_MVK) )  &
        + F12C(tag_IC_ISOOH) * ( flow(ISOOH_MVK) )  &
        +  F12C(tag_IC_ISON) * ( flow(ISON_MVK) ) )

      ! ----- MVKO2 -----
      IDO(tag_IC_MVKO2,1) = ( &
        - F12C(tag_IC_MVKO2) * ( flow(MVKO2_sink) )  &
        +  F12C(tag_IC_MPAN) * ( flow(MPAN_MVKO2) )  &
        +   F12C(tag_IC_MVK) * ( flow(MVK_MVKO2) )  &
        + F12C(tag_IC_MVKOOH) * ( flow(MVKOOH_MVKO2) )  &
        +  F12C(tag_IC_C5H8) * ( flow(C5H8_MVKO2) ) )

      ! ----- MVKOOH -----
      IDO(tag_IC_MVKOOH,1) = ( &
        - F12C(tag_IC_MVKOOH) * ( flow(MVKOOH_sink) )  &
        + F12C(tag_IC_MVKO2) * ( flow(MVKO2_MVKOOH) ) )

      ! ----- MEK -----
      IDO(tag_IC_MEK,1) = ( &
        -   F12C(tag_IC_MEK) * ( flow(MEK_sink) )  &
        + F12C(tag_IC_LC4H9O2) * ( flow(LC4H9O2_MEK) )  &
        + F12C(tag_IC_LC4H9OOH) * ( flow(LC4H9OOH_MEK) )  &
        +  F12C(tag_IC_LC4H9NO3) * ( flow(LC4H9NO3_MEK) ) )

      ! ----- LMEKO2 -----
      IDO(tag_IC_LMEKO2,1) = ( &
        - F12C(tag_IC_LMEKO2) * ( flow(LMEKO2_sink) )  &
        +   F12C(tag_IC_MEK) * ( flow(MEK_LMEKO2) )  &
        + F12C(tag_IC_LMEKOOH) * ( flow(LMEKOOH_LMEKO2) ) )

      ! ----- LMEKOOH -----
      IDO(tag_IC_LMEKOOH,1) = ( &
        - F12C(tag_IC_LMEKOOH) * ( flow(LMEKOOH_sink) )  &
        + F12C(tag_IC_LMEKO2) * ( flow(LMEKO2_LMEKOOH) ) )

      ! ----- BIACET -----
      IDO(tag_IC_BIACET,1) = ( &
        - F12C(tag_IC_BIACET) * ( flow(BIACET_sink) )  &
        + F12C(tag_IC_LMEKOOH) * ( flow(LMEKOOH_BIACET) ) )

      ! ----- LC4H9NO3 -----
      IDO(tag_IC_LC4H9NO3,1) = ( &
        -  F12C(tag_IC_LC4H9NO3) * ( flow(LC4H9NO3_sink) )  &
        +  F12C(tag_IC_C3H6) * ( flow(C3H6_LC4H9NO3) )  &
        + F12C(tag_IC_LHOC3H6O2) * ( flow(LHOC3H6O2_LC4H9NO3) )  &
        + F12C(tag_IC_LC4H9O2) * ( flow(LC4H9O2_LC4H9NO3) )  &
        + F12C(tag_IC_LMEKO2) * ( flow(LMEKO2_LC4H9NO3) ) )

      ! ----- C5H8 -----
      IDO(tag_IC_C5H8,1) = ( &
        -  F12C(tag_IC_C5H8) * ( flow(C5H8_sink) ) )

      ! ----- ISO2 -----
      IDO(tag_IC_ISO2,1) = ( &
        -  F12C(tag_IC_ISO2) * ( flow(ISO2_sink) )  &
        +  F12C(tag_IC_C5H8) * ( flow(C5H8_ISO2) ) )

      ! ----- ISOOH -----
      IDO(tag_IC_ISOOH,1) = ( &
        - F12C(tag_IC_ISOOH) * ( flow(ISOOH_sink) )  &
        +  F12C(tag_IC_ISO2) * ( flow(ISO2_ISOOH) ) )

      ! ----- ISON -----
      IDO(tag_IC_ISON,1) = ( &
        -  F12C(tag_IC_ISON) * ( flow(ISON_sink) )  &
        +  F12C(tag_IC_C5H8) * ( flow(C5H8_ISON) )  &
        +  F12C(tag_IC_ISO2) * ( flow(ISO2_ISON) ) )

      ! ----- CCl4 -----
      IDO(tag_IC_CCl4,1) = ( &
        -  F12C(tag_IC_CCl4) * ( flow(CCl4_sink) ) )

      ! ----- CH3Cl -----
      IDO(tag_IC_CH3Cl,1) = ( &
        - F12C(tag_IC_CH3Cl) * ( flow(CH3Cl_sink) ) )

      ! ----- CH3CCl3 -----
      IDO(tag_IC_CH3CCl3,1) = ( &
        - F12C(tag_IC_CH3CCl3) * ( flow(CH3CCl3_sink) ) )

      ! ----- CF2Cl2 -----
      IDO(tag_IC_CF2Cl2,1) = ( &
        - F12C(tag_IC_CF2Cl2) * ( flow(CF2Cl2_sink) ) )

      ! ----- CFCl3 -----
      IDO(tag_IC_CFCl3,1) = ( &
        - F12C(tag_IC_CFCl3) * ( flow(CFCl3_sink) ) )

      ! ----- CH3Br -----
      IDO(tag_IC_CH3Br,1) = ( &
        - F12C(tag_IC_CH3Br) * ( flow(CH3Br_sink) ) )

      ! ----- CF3Br -----
      IDO(tag_IC_CF3Br,1) = ( &
        - F12C(tag_IC_CF3Br) * ( flow(CF3Br_sink) ) )

      ! ----- CF2ClBr -----
      IDO(tag_IC_CF2ClBr,1) = ( &
        - F12C(tag_IC_CF2ClBr) * ( flow(CF2ClBr_sink) ) )

      ! ----- CH3SO3H -----
      IDO(tag_IC_CH3SO3H,1) = ( &
        +  F12C(tag_IC_DMSO) * ( flow(DMSO_CH3SO3H) )  &
        + F12C(tag_IC_CH3SO3) * ( flow(CH3SO3_CH3SO3H) ) )

      ! ----- DMS -----
      IDO(tag_IC_DMS,1) = ( &
        -   F12C(tag_IC_DMS) * ( flow(DMS_sink) ) )

      ! ----- DMSO -----
      IDO(tag_IC_DMSO,1) = ( &
        -  F12C(tag_IC_DMSO) * ( flow(DMSO_sink) )  &
        +   F12C(tag_IC_DMS) * ( flow(DMS_DMSO) ) )

      ! ----- CH3SO2 -----
      IDO(tag_IC_CH3SO2,1) = ( &
        - F12C(tag_IC_CH3SO2) * ( flow(CH3SO2_sink) )  &
        +   F12C(tag_IC_DMS) * ( flow(DMS_CH3SO2) ) )

      ! ----- CH3SO3 -----
      IDO(tag_IC_CH3SO3,1) = ( &
        - F12C(tag_IC_CH3SO3) * ( flow(CH3SO3_sink) )  &
        + F12C(tag_IC_CH3SO2) * ( flow(CH3SO2_CH3SO3) ) )
                                         
    ! ===== tag_IC: IDO(tag_IC_#,2) <- ( F13C(tag_IC_#)*flow() + ... ) =====

      ! ----- CH4 -----  WARN: indicated as fixed species
      IDO(tag_IC_CH4,2) = ( &
        -   F13C(tag_IC_CH4) * ( flow(CH4_sink) )  &
        +  F13C(tag_IC_C3H6) * ( flow(C3H6_CH4) ) )

      ! ----- CH3OH -----
      IDO(tag_IC_CH3OH,2) = ( &
        - F13C(tag_IC_CH3OH) * ( flow(CH3OH_sink) )  &
        + F13C(tag_IC_CH3O2) * ( flow(CH3O2_CH3OH) )  &
        +  F13C(tag_IC_C3H6) * ( flow(C3H6_CH3OH) )  &
        +  F13C(tag_IC_ISO2) * ( flow(ISO2_CH3OH) ) )

      ! ----- CH3O2 -----
      IDO(tag_IC_CH3O2,2) = ( &
        - F13C(tag_IC_CH3O2) * ( flow(CH3O2_sink) )  &
        +   F13C(tag_IC_CH4) * ( flow(CH4_CH3O2) )  &
        + F13C(tag_IC_CH3OOH) * ( flow(CH3OOH_CH3O2) )  &
        + F13C(tag_IC_CH3CO2H) * ( flow(CH3CO2H_CH3O2) )  &
        +    F13C(tag_IC_PA) * ( flow(PA_CH3O2) )  &
        +  F13C(tag_IC_C2H2) * ( flow(C2H2_CH3O2) )  &
        +  F13C(tag_IC_C3H6) * ( flow(C3H6_CH3O2) )  &
        +  F13C(tag_IC_C5H8) * ( flow(C5H8_CH3O2) )  &
        +  F13C(tag_IC_DMSO) * ( flow(DMSO_CH3O2) )  &
        + F13C(tag_IC_CH3SO2) * ( flow(CH3SO2_CH3O2) )  &
        + F13C(tag_IC_CH3CHO) * ( flow(CH3CHO_CH3O2) )  &
        +   F13C(tag_IC_CH3CO3H) * ( flow(CH3CO3H_CH3O2) )  &
        +   F13C(tag_IC_PAN) * ( flow(PAN_CH3O2) )  &
        + F13C(tag_IC_CH3COCH3) * ( flow(CH3COCH3_CH3O2) )  &
        + F13C(tag_IC_CH3Cl) * ( flow(CH3Cl_CH3O2) )  &
        + F13C(tag_IC_CH3Br) * ( flow(CH3Br_CH3O2) ) )

      ! ----- CH3OOH -----
      IDO(tag_IC_CH3OOH,2) = ( &
        - F13C(tag_IC_CH3OOH) * ( flow(CH3OOH_sink) )  &
        + F13C(tag_IC_CH3O2) * ( flow(CH3O2_CH3OOH) ) )

      ! ----- HCHO -----
      IDO(tag_IC_HCHO,2) = ( &
        -  F13C(tag_IC_HCHO) * ( flow(HCHO_sink) )  &
        +   F13C(tag_IC_CH4) * ( flow(CH4_HCHO) )  &
        + F13C(tag_IC_CH3OH) * ( flow(CH3OH_HCHO) )  &
        + F13C(tag_IC_CH3O2) * ( flow(CH3O2_HCHO) )  &
        + F13C(tag_IC_CH3OOH) * ( flow(CH3OOH_HCHO) )  &
        +  F13C(tag_IC_C2H4) * ( flow(C2H4_HCHO) )  &
        +  F13C(tag_IC_NACA) * ( flow(NACA_HCHO) )  &
        +   F13C(tag_IC_PAN) * ( flow(PAN_HCHO) )  &
        +  F13C(tag_IC_C3H6) * ( flow(C3H6_HCHO) )  &
        + F13C(tag_IC_LHOC3H6O2) * ( flow(LHOC3H6O2_HCHO) )  &
        + F13C(tag_IC_CH3COCH2O2) * ( flow(CH3COCH2O2_HCHO) )  &
        + F13C(tag_IC_MVKO2) * ( flow(MVKO2_HCHO) )  &
        +  F13C(tag_IC_C5H8) * ( flow(C5H8_HCHO) )  &
        +  F13C(tag_IC_ISO2) * ( flow(ISO2_HCHO) )  &
        +   F13C(tag_IC_DMS) * ( flow(DMS_HCHO) )  &
        +  F13C(tag_IC_DMSO) * ( flow(DMSO_HCHO) )  &
        + F13C(tag_IC_ACETOL) * ( flow(ACETOL_HCHO) )  &
        +   F13C(tag_IC_MVK) * ( flow(MVK_HCHO) )  &
        + F13C(tag_IC_MVKOOH) * ( flow(MVKOOH_HCHO) )  &
        + F13C(tag_IC_ISOOH) * ( flow(ISOOH_HCHO) )  &
        +  F13C(tag_IC_ISON) * ( flow(ISON_HCHO) ) )

      ! ----- CO -----
      IDO(tag_IC_CO,2) = ( &
        -    F13C(tag_IC_CO) * ( flow(CO_sink) )  &
        +  F13C(tag_IC_HCHO) * ( flow(HCHO_CO) )  &
        +  F13C(tag_IC_C2H4) * ( flow(C2H4_CO) )  &
        +  F13C(tag_IC_NACA) * ( flow(NACA_CO) )  &
        +  F13C(tag_IC_C3H6) * ( flow(C3H6_CO) )  &
        + F13C(tag_IC_MGLYOX) * ( flow(MGLYOX_CO) )  &
        +   F13C(tag_IC_MVK) * ( flow(MVK_CO) )  &
        + F13C(tag_IC_MVKO2) * ( flow(MVKO2_CO) )  &
        +  F13C(tag_IC_C5H8) * ( flow(C5H8_CO) )  &
        +   F13C(tag_IC_CO2) * ( flow(CO2_CO) )  &
        +   F13C(tag_IC_CH4) * ( flow(CH4_CO) )  &
        + F13C(tag_IC_CH3CHO) * ( flow(CH3CHO_CO) )  &
        + F13C(tag_IC_MVKOOH) * ( flow(MVKOOH_CO) ) )

      ! ----- HCOOH -----
      IDO(tag_IC_HCOOH,2) = ( &
        - F13C(tag_IC_HCOOH) * ( flow(HCOOH_sink) )  &
        +  F13C(tag_IC_C2H4) * ( flow(C2H4_HCOOH) )  &
        +  F13C(tag_IC_C3H6) * ( flow(C3H6_HCOOH) )  &
        +   F13C(tag_IC_MVK) * ( flow(MVK_HCOOH) )  &
        +  F13C(tag_IC_C5H8) * ( flow(C5H8_HCOOH) ) )

      ! ----- CO2 -----
      IDO(tag_IC_CO2,2) = ( &
        -   F13C(tag_IC_CO2) * ( flow(CO2_sink) )  &
        +    F13C(tag_IC_CO) * ( flow(CO_CO2) )  &
        + F13C(tag_IC_CH3CO2H) * ( flow(CH3CO2H_CO2) )  &
        +    F13C(tag_IC_PA) * ( flow(PA_CO2) )  &
        +   F13C(tag_IC_PAN) * ( flow(PAN_CO2) ) )

      ! ----- C2H6 -----
      IDO(tag_IC_C2H6,2) = ( &
        -  F13C(tag_IC_C2H6) * ( flow(C2H6_sink) ) )

      ! ----- C2H4 -----
      IDO(tag_IC_C2H4,2) = ( &
        -  F13C(tag_IC_C2H4) * ( flow(C2H4_sink) ) )

      ! ----- C2H2 -----
      IDO(tag_IC_C2H2,2) = ( &
        -  F13C(tag_IC_C2H2) * ( flow(C2H2_sink) ) )

      ! ----- C2H5O2 -----
      IDO(tag_IC_C2H5O2,2) = ( &
        -  F13C(tag_IC_C2H5O2) * ( flow(C2H5O2_sink) )  &
        +  F13C(tag_IC_C2H6) * ( flow(C2H6_C2H5O2) )  &
        + F13C(tag_IC_C2H5OOH) * ( flow(C2H5OOH_C2H5O2) )  &
        +  F13C(tag_IC_C3H8) * ( flow(C3H8_C2H5O2) )  &
        +  F13C(tag_IC_C3H6) * ( flow(C3H6_C2H5O2) )  &
        + F13C(tag_IC_LC4H9O2) * ( flow(LC4H9O2_C2H5O2) )  &
        + F13C(tag_IC_LC4H9OOH) * ( flow(LC4H9OOH_C2H5O2) )  &
        +   F13C(tag_IC_MEK) * ( flow(MEK_C2H5O2) )  &
        +  F13C(tag_IC_LC4H9NO3) * ( flow(LC4H9NO3_C2H5O2) ) )

      ! ----- C2H5OOH -----
      IDO(tag_IC_C2H5OOH,2) = ( &
        - F13C(tag_IC_C2H5OOH) * ( flow(C2H5OOH_sink) )  &
        +  F13C(tag_IC_C2H5O2) * ( flow(C2H5O2_C2H5OOH) ) )

      ! ----- CH3CHO -----
      IDO(tag_IC_CH3CHO,2) = ( &
        - F13C(tag_IC_CH3CHO) * ( flow(CH3CHO_sink) )  &
        +  F13C(tag_IC_C2H5O2) * ( flow(C2H5O2_CH3CHO) )  &
        + F13C(tag_IC_C2H5OOH) * ( flow(C2H5OOH_CH3CHO) )  &
        +  F13C(tag_IC_C3H6) * ( flow(C3H6_CH3CHO) )  &
        + F13C(tag_IC_LHOC3H6O2) * ( flow(LHOC3H6O2_CH3CHO) )  &
        + F13C(tag_IC_LC4H9O2) * ( flow(LC4H9O2_CH3CHO) )  &
        + F13C(tag_IC_LMEKO2) * ( flow(LMEKO2_CH3CHO) )  &
        + F13C(tag_IC_LC4H9OOH) * ( flow(LC4H9OOH_CH3CHO) )  &
        + F13C(tag_IC_LMEKOOH) * ( flow(LMEKOOH_CH3CHO) )  &
        +  F13C(tag_IC_LC4H9NO3) * ( flow(LC4H9NO3_CH3CHO) ) )

      ! ----- CH3CO2H -----
      IDO(tag_IC_CH3CO2H,2) = ( &
        - F13C(tag_IC_CH3CO2H) * ( flow(CH3CO2H_sink) )  &
        +    F13C(tag_IC_PA) * ( flow(PA_CH3CO2H) ) )

      ! ----- CH3CO3 -----
      IDO(tag_IC_PA,2) = ( &
        -    F13C(tag_IC_PA) * ( flow(PA_sink) )  &
        + F13C(tag_IC_CH3CHO) * ( flow(CH3CHO_PA) )  &
        +   F13C(tag_IC_CH3CO3H) * ( flow(CH3CO3H_PA) )  &
        +   F13C(tag_IC_PAN) * ( flow(PAN_PA) )  &
        +  F13C(tag_IC_C3H6) * ( flow(C3H6_PA) )  &
        + F13C(tag_IC_CH3COCH2O2) * ( flow(CH3COCH2O2_PA) )  &
        + F13C(tag_IC_MGLYOX) * ( flow(MGLYOX_PA) )  &
        +   F13C(tag_IC_MVK) * ( flow(MVK_PA) )  &
        + F13C(tag_IC_MVKO2) * ( flow(MVKO2_PA) )  &
        + F13C(tag_IC_LMEKO2) * ( flow(LMEKO2_PA) )  &
        +  F13C(tag_IC_C5H8) * ( flow(C5H8_PA) )  &
        + F13C(tag_IC_CH3COCH3) * ( flow(CH3COCH3_PA) )  &
        + F13C(tag_IC_ACETOL) * ( flow(ACETOL_PA) )  &
        + F13C(tag_IC_HYPERACET) * ( flow(HYPERACET_PA) )  &
        + F13C(tag_IC_MVKOOH) * ( flow(MVKOOH_PA) )  &
        +   F13C(tag_IC_MEK) * ( flow(MEK_PA) )  &
        + F13C(tag_IC_LMEKOOH) * ( flow(LMEKOOH_PA) )  &
        + F13C(tag_IC_BIACET) * ( flow(BIACET_PA) ) )

      ! ----- CH3CO3H -----
      IDO(tag_IC_CH3CO3H,2) = ( &
        -   F13C(tag_IC_CH3CO3H) * ( flow(CH3CO3H_sink) )  &
        +    F13C(tag_IC_PA) * ( flow(PA_CH3CO3H) ) )

      ! ----- NACA -----
      IDO(tag_IC_NACA,2) = ( &
        -  F13C(tag_IC_NACA) * ( flow(NACA_sink) )  &
        +  F13C(tag_IC_ISON) * ( flow(ISON_NACA) ) )

      ! ----- PAN -----
      IDO(tag_IC_PAN,2) = ( &
        -   F13C(tag_IC_PAN) * ( flow(PAN_sink) )  &
        +    F13C(tag_IC_PA) * ( flow(PA_PAN) ) )

      ! ----- C3H8 -----
      IDO(tag_IC_C3H8,2) = ( &
        -  F13C(tag_IC_C3H8) * ( flow(C3H8_sink) ) )

      ! ----- C3H6 -----
      IDO(tag_IC_C3H6,2) = ( &
        -  F13C(tag_IC_C3H6) * ( flow(C3H6_sink) ) )

      ! ----- IC3H7O2 -----
      IDO(tag_IC_IC3H7O2,2) = ( &
        -  F13C(tag_IC_IC3H7O2) * ( flow(IC3H7O2_sink) )  &
        +  F13C(tag_IC_C3H8) * ( flow(C3H8_IC3H7O2) )  &
        + F13C(tag_IC_IC3H7OOH) * ( flow(IC3H7OOH_IC3H7O2) ) )

      ! ----- IC3H7OOH -----
      IDO(tag_IC_IC3H7OOH,2) = ( &
        - F13C(tag_IC_IC3H7OOH) * ( flow(IC3H7OOH_sink) )  &
        +  F13C(tag_IC_IC3H7O2) * ( flow(IC3H7O2_IC3H7OOH) ) )

      ! ----- LHOC3H6O2 -----
      IDO(tag_IC_LHOC3H6O2,2) = ( &
        - F13C(tag_IC_LHOC3H6O2) * ( flow(LHOC3H6O2_sink) )  &
        +  F13C(tag_IC_C2H4) * ( flow(C2H4_LHOC3H6O2) )  &
        +  F13C(tag_IC_C3H6) * ( flow(C3H6_LHOC3H6O2) )  &
        + F13C(tag_IC_LHOC3H6OOH) * ( flow(LHOC3H6OOH_LHOC3H6O2) ) )

      ! ----- LHOC3H6OOH -----
      IDO(tag_IC_LHOC3H6OOH,2) = ( &
        - F13C(tag_IC_LHOC3H6OOH) * ( flow(LHOC3H6OOH_sink) )  &
        + F13C(tag_IC_LHOC3H6O2) * ( flow(LHOC3H6O2_LHOC3H6OOH) ) )

      ! ----- CH3COCH3 -----
      IDO(tag_IC_CH3COCH3,2) = ( &
        - F13C(tag_IC_CH3COCH3) * ( flow(CH3COCH3_sink) )  &
        +  F13C(tag_IC_IC3H7O2) * ( flow(IC3H7O2_CH3COCH3) )  &
        + F13C(tag_IC_IC3H7OOH) * ( flow(IC3H7OOH_CH3COCH3) )  &
        + F13C(tag_IC_IC3H7NO3) * ( flow(IC3H7NO3_CH3COCH3) ) )

      ! ----- CH3COCH2O2 -----
      IDO(tag_IC_CH3COCH2O2,2) = ( &
        - F13C(tag_IC_CH3COCH2O2) * ( flow(CH3COCH2O2_sink) )  &
        + F13C(tag_IC_CH3COCH3) * ( flow(CH3COCH3_CH3COCH2O2) )  &
        + F13C(tag_IC_HYPERACET) * ( flow(HYPERACET_CH3COCH2O2) ) )

      ! ----- HYPERACET -----
      IDO(tag_IC_HYPERACET,2) = ( &
        - F13C(tag_IC_HYPERACET) * ( flow(HYPERACET_sink) )  &
        + F13C(tag_IC_CH3COCH2O2) * ( flow(CH3COCH2O2_HYPERACET) ) )

      ! ----- ACETOL -----
      IDO(tag_IC_ACETOL,2) = ( &
        - F13C(tag_IC_ACETOL) * ( flow(ACETOL_sink) )  &
        + F13C(tag_IC_LHOC3H6OOH) * ( flow(LHOC3H6OOH_ACETOL) )  &
        + F13C(tag_IC_CH3COCH2O2) * ( flow(CH3COCH2O2_ACETOL) )  &
        +  F13C(tag_IC_MPAN) * ( flow(MPAN_ACETOL) )  &
        + F13C(tag_IC_MVKO2) * ( flow(MVKO2_ACETOL) )  &
        +  F13C(tag_IC_ISO2) * ( flow(ISO2_ACETOL) )  &
        + F13C(tag_IC_CH3O2) * ( flow(CH3O2_ACETOL) )  &
        +  F13C(tag_IC_ISON) * ( flow(ISON_ACETOL) )  &
        + F13C(tag_IC_MVKOOH) * ( flow(MVKOOH_ACETOL) ) )

      ! ----- MGLYOX -----
      IDO(tag_IC_MGLYOX,2) = ( &
        - F13C(tag_IC_MGLYOX) * ( flow(MGLYOX_sink) )  &
        +  F13C(tag_IC_C3H6) * ( flow(C3H6_MGLYOX) )  &
        + F13C(tag_IC_CH3COCH2O2) * ( flow(CH3COCH2O2_MGLYOX) )  &
        + F13C(tag_IC_HYPERACET) * ( flow(HYPERACET_MGLYOX) )  &
        + F13C(tag_IC_ACETOL) * ( flow(ACETOL_MGLYOX) )  &
        +   F13C(tag_IC_MVK) * ( flow(MVK_MGLYOX) )  &
        + F13C(tag_IC_MVKO2) * ( flow(MVKO2_MGLYOX) )  &
        +  F13C(tag_IC_ISO2) * ( flow(ISO2_MGLYOX) )  &
        + F13C(tag_IC_CH3O2) * ( flow(CH3O2_MGLYOX) )  &
        + F13C(tag_IC_MVKOOH) * ( flow(MVKOOH_MGLYOX) ) )

      ! ----- MPAN -----
      IDO(tag_IC_MPAN,2) = ( &
        -  F13C(tag_IC_MPAN) * ( flow(MPAN_sink) )  &
        + F13C(tag_IC_MVKO2) * ( flow(MVKO2_MPAN) ) )

      ! ----- IC3H7NO3 -----
      IDO(tag_IC_IC3H7NO3,2) = ( &
        - F13C(tag_IC_IC3H7NO3) * ( flow(IC3H7NO3_sink) )  &
        +  F13C(tag_IC_IC3H7O2) * ( flow(IC3H7O2_IC3H7NO3) ) )

      ! ----- NC4H10 -----
      IDO(tag_IC_NC4H10,2) = ( &
        - F13C(tag_IC_NC4H10) * ( flow(NC4H10_sink) ) )

      ! ----- LC4H9O2 -----
      IDO(tag_IC_LC4H9O2,2) = ( &
        - F13C(tag_IC_LC4H9O2) * ( flow(LC4H9O2_sink) )  &
        + F13C(tag_IC_NC4H10) * ( flow(NC4H10_LC4H9O2) )  &
        + F13C(tag_IC_LC4H9OOH) * ( flow(LC4H9OOH_LC4H9O2) ) )

      ! ----- LC4H9OOH -----
      IDO(tag_IC_LC4H9OOH,2) = ( &
        - F13C(tag_IC_LC4H9OOH) * ( flow(LC4H9OOH_sink) )  &
        + F13C(tag_IC_LC4H9O2) * ( flow(LC4H9O2_LC4H9OOH) ) )

      ! ----- MVK -----
      IDO(tag_IC_MVK,2) = ( &
        -   F13C(tag_IC_MVK) * ( flow(MVK_sink) )  &
        +  F13C(tag_IC_C5H8) * ( flow(C5H8_MVK) )  &
        +  F13C(tag_IC_ISO2) * ( flow(ISO2_MVK) )  &
        + F13C(tag_IC_CH3O2) * ( flow(CH3O2_MVK) )  &
        + F13C(tag_IC_ISOOH) * ( flow(ISOOH_MVK) )  &
        +  F13C(tag_IC_ISON) * ( flow(ISON_MVK) ) )

      ! ----- MVKO2 -----
      IDO(tag_IC_MVKO2,2) = ( &
        - F13C(tag_IC_MVKO2) * ( flow(MVKO2_sink) )  &
        +  F13C(tag_IC_MPAN) * ( flow(MPAN_MVKO2) )  &
        +   F13C(tag_IC_MVK) * ( flow(MVK_MVKO2) )  &
        + F13C(tag_IC_MVKOOH) * ( flow(MVKOOH_MVKO2) )  &
        +  F13C(tag_IC_C5H8) * ( flow(C5H8_MVKO2) ) )

      ! ----- MVKOOH -----
      IDO(tag_IC_MVKOOH,2) = ( &
        - F13C(tag_IC_MVKOOH) * ( flow(MVKOOH_sink) )  &
        + F13C(tag_IC_MVKO2) * ( flow(MVKO2_MVKOOH) ) )

      ! ----- MEK -----
      IDO(tag_IC_MEK,2) = ( &
        -   F13C(tag_IC_MEK) * ( flow(MEK_sink) )  &
        + F13C(tag_IC_LC4H9O2) * ( flow(LC4H9O2_MEK) )  &
        + F13C(tag_IC_LC4H9OOH) * ( flow(LC4H9OOH_MEK) )  &
        +  F13C(tag_IC_LC4H9NO3) * ( flow(LC4H9NO3_MEK) ) )

      ! ----- LMEKO2 -----
      IDO(tag_IC_LMEKO2,2) = ( &
        - F13C(tag_IC_LMEKO2) * ( flow(LMEKO2_sink) )  &
        +   F13C(tag_IC_MEK) * ( flow(MEK_LMEKO2) )  &
        + F13C(tag_IC_LMEKOOH) * ( flow(LMEKOOH_LMEKO2) ) )

      ! ----- LMEKOOH -----
      IDO(tag_IC_LMEKOOH,2) = ( &
        - F13C(tag_IC_LMEKOOH) * ( flow(LMEKOOH_sink) )  &
        + F13C(tag_IC_LMEKO2) * ( flow(LMEKO2_LMEKOOH) ) )

      ! ----- BIACET -----
      IDO(tag_IC_BIACET,2) = ( &
        - F13C(tag_IC_BIACET) * ( flow(BIACET_sink) )  &
        + F13C(tag_IC_LMEKOOH) * ( flow(LMEKOOH_BIACET) ) )

      ! ----- LC4H9NO3 -----
      IDO(tag_IC_LC4H9NO3,2) = ( &
        -  F13C(tag_IC_LC4H9NO3) * ( flow(LC4H9NO3_sink) )  &
        +  F13C(tag_IC_C3H6) * ( flow(C3H6_LC4H9NO3) )  &
        + F13C(tag_IC_LHOC3H6O2) * ( flow(LHOC3H6O2_LC4H9NO3) )  &
        + F13C(tag_IC_LC4H9O2) * ( flow(LC4H9O2_LC4H9NO3) )  &
        + F13C(tag_IC_LMEKO2) * ( flow(LMEKO2_LC4H9NO3) ) )

      ! ----- C5H8 -----
      IDO(tag_IC_C5H8,2) = ( &
        -  F13C(tag_IC_C5H8) * ( flow(C5H8_sink) ) )

      ! ----- ISO2 -----
      IDO(tag_IC_ISO2,2) = ( &
        -  F13C(tag_IC_ISO2) * ( flow(ISO2_sink) )  &
        +  F13C(tag_IC_C5H8) * ( flow(C5H8_ISO2) ) )

      ! ----- ISOOH -----
      IDO(tag_IC_ISOOH,2) = ( &
        - F13C(tag_IC_ISOOH) * ( flow(ISOOH_sink) )  &
        +  F13C(tag_IC_ISO2) * ( flow(ISO2_ISOOH) ) )

      ! ----- ISON -----
      IDO(tag_IC_ISON,2) = ( &
        -  F13C(tag_IC_ISON) * ( flow(ISON_sink) )  &
        +  F13C(tag_IC_C5H8) * ( flow(C5H8_ISON) )  &
        +  F13C(tag_IC_ISO2) * ( flow(ISO2_ISON) ) )

      ! ----- CCl4 -----
      IDO(tag_IC_CCl4,2) = ( &
        -  F13C(tag_IC_CCl4) * ( flow(CCl4_sink) ) )

      ! ----- CH3Cl -----
      IDO(tag_IC_CH3Cl,2) = ( &
        - F13C(tag_IC_CH3Cl) * ( flow(CH3Cl_sink) ) )

      ! ----- CH3CCl3 -----
      IDO(tag_IC_CH3CCl3,2) = ( &
        - F13C(tag_IC_CH3CCl3) * ( flow(CH3CCl3_sink) ) )

      ! ----- CF2Cl2 -----
      IDO(tag_IC_CF2Cl2,2) = ( &
        - F13C(tag_IC_CF2Cl2) * ( flow(CF2Cl2_sink) ) )

      ! ----- CFCl3 -----
      IDO(tag_IC_CFCl3,2) = ( &
        - F13C(tag_IC_CFCl3) * ( flow(CFCl3_sink) ) )

      ! ----- CH3Br -----
      IDO(tag_IC_CH3Br,2) = ( &
        - F13C(tag_IC_CH3Br) * ( flow(CH3Br_sink) ) )

      ! ----- CF3Br -----
      IDO(tag_IC_CF3Br,2) = ( &
        - F13C(tag_IC_CF3Br) * ( flow(CF3Br_sink) ) )

      ! ----- CF2ClBr -----
      IDO(tag_IC_CF2ClBr,2) = ( &
        - F13C(tag_IC_CF2ClBr) * ( flow(CF2ClBr_sink) ) )

      ! ----- CH3SO3H -----
      IDO(tag_IC_CH3SO3H,2) = ( &
        +  F13C(tag_IC_DMSO) * ( flow(DMSO_CH3SO3H) )  &
        + F13C(tag_IC_CH3SO3) * ( flow(CH3SO3_CH3SO3H) ) )

      ! ----- DMS -----
      IDO(tag_IC_DMS,2) = ( &
        -   F13C(tag_IC_DMS) * ( flow(DMS_sink) ) )

      ! ----- DMSO -----
      IDO(tag_IC_DMSO,2) = ( &
        -  F13C(tag_IC_DMSO) * ( flow(DMSO_sink) )  &
        +   F13C(tag_IC_DMS) * ( flow(DMS_DMSO) ) )

      ! ----- CH3SO2 -----
      IDO(tag_IC_CH3SO2,2) = ( &
        - F13C(tag_IC_CH3SO2) * ( flow(CH3SO2_sink) )  &
        +   F13C(tag_IC_DMS) * ( flow(DMS_CH3SO2) ) )

      ! ----- CH3SO3 -----
      IDO(tag_IC_CH3SO3,2) = ( &
        - F13C(tag_IC_CH3SO3) * ( flow(CH3SO3_sink) )  &
        + F13C(tag_IC_CH3SO2) * ( flow(CH3SO2_CH3SO3) ) )

    END SUBROUTINE iderivs

  ! ----------------------------------------------------------------------------

#ifdef I_LINMAX
! >>>>> LINEAR-MATRIX integration scheme >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

    SUBROUTINE prepare_Z(akind,stepping)

      IMPLICIT NONE
      
      INTRINSIC SUM

      INTEGER, INTENT(in) :: akind           ! "weighting": fractions of current & already calculated budgets
      REAL(dp), INTENT(in) :: stepping       ! # of steps

      ! coefficients are chosen empirically, need to understand
      SELECT CASE (akind)
      CASE (1)
        Z(:) = SUM(ISOC(:,:),DIM=2)
      CASE (2)
        Z(:) = 0.75_dp * SUM(ISOC(:,:),DIM=2) + 0.25_dp * C(RTCIND(:))
      CASE DEFAULT     ! or 3
        Z(:) = 0.5_dp * (SUM(ISOC(:,:),DIM=2) + C(RTCIND(:)))
      CASE (4)
        Z(:) = 0.25_dp * SUM(ISOC(:,:),DIM=2) + 0.75_dp * C(RTCIND(:))
      CASE (5)
        Z(:) = C(RTCIND(:))
      END SELECT
      
      Z(:) = Z(:) * stepping

    END SUBROUTINE prepare_Z
    
  ! ---------------------------------------------------------------------------

    SUBROUTINE prepare_J(do_inv)

      IMPLICIT NONE
      
      LOGICAL, INTENT(in) :: do_inv          ! do a preparation for a further J inversion? 
                                             !   i.e. J = (I - J/stepping)    -> ^(-1)
      INTEGER :: n

      J(:,:,1) = 0.0_dp

      ! weights (Z) should be defined by this moment

      J(tag_IC_CH4,tag_IC_CH4,1) = zerodiv(-flow(CH4_sink),Z(tag_IC_CH4))
      J(tag_IC_CH3O2,tag_IC_CH4,1) = zerodiv(+flow(CH4_CH3O2),Z(tag_IC_CH4))
      J(tag_IC_HCHO,tag_IC_CH4,1) = zerodiv(+flow(CH4_HCHO),Z(tag_IC_CH4))
      J(tag_IC_CO,tag_IC_CH4,1) = zerodiv(+flow(CH4_CO),Z(tag_IC_CH4))
      J(tag_IC_CH3OH,tag_IC_CH3OH,1) = zerodiv(-flow(CH3OH_sink),Z(tag_IC_CH3OH))
      J(tag_IC_HCHO,tag_IC_CH3OH,1) = zerodiv(+flow(CH3OH_HCHO),Z(tag_IC_CH3OH))
      J(tag_IC_CH3OH,tag_IC_CH3O2,1) = zerodiv(+flow(CH3O2_CH3OH),Z(tag_IC_CH3O2))
      J(tag_IC_CH3O2,tag_IC_CH3O2,1) = zerodiv(-flow(CH3O2_sink),Z(tag_IC_CH3O2))
      J(tag_IC_CH3OOH,tag_IC_CH3O2,1) = zerodiv(+flow(CH3O2_CH3OOH),Z(tag_IC_CH3O2))
      J(tag_IC_HCHO,tag_IC_CH3O2,1) = zerodiv(+flow(CH3O2_HCHO),Z(tag_IC_CH3O2))
      J(tag_IC_ACETOL,tag_IC_CH3O2,1) = zerodiv(+flow(CH3O2_ACETOL),Z(tag_IC_CH3O2))
      J(tag_IC_MGLYOX,tag_IC_CH3O2,1) = zerodiv(+flow(CH3O2_MGLYOX),Z(tag_IC_CH3O2))
      J(tag_IC_MVK,tag_IC_CH3O2,1) = zerodiv(+flow(CH3O2_MVK),Z(tag_IC_CH3O2))
      J(tag_IC_CH3O2,tag_IC_CH3OOH,1) = zerodiv(+flow(CH3OOH_CH3O2),Z(tag_IC_CH3OOH))
      J(tag_IC_CH3OOH,tag_IC_CH3OOH,1) = zerodiv(-flow(CH3OOH_sink),Z(tag_IC_CH3OOH))
      J(tag_IC_HCHO,tag_IC_CH3OOH,1) = zerodiv(+flow(CH3OOH_HCHO),Z(tag_IC_CH3OOH))
      J(tag_IC_HCHO,tag_IC_HCHO,1) = zerodiv(-flow(HCHO_sink),Z(tag_IC_HCHO))
      J(tag_IC_CO,tag_IC_HCHO,1) = zerodiv(+flow(HCHO_CO),Z(tag_IC_HCHO))
      J(tag_IC_CO,tag_IC_CO,1) = zerodiv(-flow(CO_sink),Z(tag_IC_CO))
      J(tag_IC_CO2,tag_IC_CO,1) = zerodiv(+flow(CO_CO2),Z(tag_IC_CO))
      J(tag_IC_HCOOH,tag_IC_HCOOH,1) = zerodiv(-flow(HCOOH_sink),Z(tag_IC_HCOOH))
      J(tag_IC_CO,tag_IC_CO2,1) = zerodiv(+flow(CO2_CO),Z(tag_IC_CO2))
      J(tag_IC_CO2,tag_IC_CO2,1) = zerodiv(-flow(CO2_sink),Z(tag_IC_CO2))
      J(tag_IC_C2H6,tag_IC_C2H6,1) = zerodiv(-flow(C2H6_sink),Z(tag_IC_C2H6))
      J(tag_IC_C2H5O2,tag_IC_C2H6,1) = zerodiv(+flow(C2H6_C2H5O2),Z(tag_IC_C2H6))
      J(tag_IC_HCHO,tag_IC_C2H4,1) = zerodiv(+flow(C2H4_HCHO),Z(tag_IC_C2H4))
      J(tag_IC_CO,tag_IC_C2H4,1) = zerodiv(+flow(C2H4_CO),Z(tag_IC_C2H4))
      J(tag_IC_HCOOH,tag_IC_C2H4,1) = zerodiv(+flow(C2H4_HCOOH),Z(tag_IC_C2H4))
      J(tag_IC_C2H4,tag_IC_C2H4,1) = zerodiv(-flow(C2H4_sink),Z(tag_IC_C2H4))
      J(tag_IC_LHOC3H6O2,tag_IC_C2H4,1) = zerodiv(+flow(C2H4_LHOC3H6O2),Z(tag_IC_C2H4))
      J(tag_IC_CH3O2,tag_IC_C2H2,1) = zerodiv(+flow(C2H2_CH3O2),Z(tag_IC_C2H2))
      J(tag_IC_C2H2,tag_IC_C2H2,1) = zerodiv(-flow(C2H2_sink),Z(tag_IC_C2H2))
      J(tag_IC_C2H5O2,tag_IC_C2H5O2,1) = zerodiv(-flow(C2H5O2_sink),Z(tag_IC_C2H5O2))
      J(tag_IC_C2H5OOH,tag_IC_C2H5O2,1) = zerodiv(+flow(C2H5O2_C2H5OOH),Z(tag_IC_C2H5O2))
      J(tag_IC_CH3CHO,tag_IC_C2H5O2,1) = zerodiv(+flow(C2H5O2_CH3CHO),Z(tag_IC_C2H5O2))
      J(tag_IC_C2H5O2,tag_IC_C2H5OOH,1) = zerodiv(+flow(C2H5OOH_C2H5O2),Z(tag_IC_C2H5OOH))
      J(tag_IC_C2H5OOH,tag_IC_C2H5OOH,1) = zerodiv(-flow(C2H5OOH_sink),Z(tag_IC_C2H5OOH))
      J(tag_IC_CH3CHO,tag_IC_C2H5OOH,1) = zerodiv(+flow(C2H5OOH_CH3CHO),Z(tag_IC_C2H5OOH))
      J(tag_IC_CH3O2,tag_IC_CH3CHO,1) = zerodiv(+flow(CH3CHO_CH3O2),Z(tag_IC_CH3CHO))
      J(tag_IC_CO,tag_IC_CH3CHO,1) = zerodiv(+flow(CH3CHO_CO),Z(tag_IC_CH3CHO))
      J(tag_IC_CH3CHO,tag_IC_CH3CHO,1) = zerodiv(-flow(CH3CHO_sink),Z(tag_IC_CH3CHO))
      J(tag_IC_PA,tag_IC_CH3CHO,1) = zerodiv(+flow(CH3CHO_PA),Z(tag_IC_CH3CHO))
      J(tag_IC_CH3O2,tag_IC_CH3CO2H,1) = zerodiv(+flow(CH3CO2H_CH3O2),Z(tag_IC_CH3CO2H))
      J(tag_IC_CO2,tag_IC_CH3CO2H,1) = zerodiv(+flow(CH3CO2H_CO2),Z(tag_IC_CH3CO2H))
      J(tag_IC_CH3CO2H,tag_IC_CH3CO2H,1) = zerodiv(-flow(CH3CO2H_sink),Z(tag_IC_CH3CO2H))
      J(tag_IC_CH3O2,tag_IC_PA,1) = zerodiv(+flow(PA_CH3O2),Z(tag_IC_PA))
      J(tag_IC_CO2,tag_IC_PA,1) = zerodiv(+flow(PA_CO2),Z(tag_IC_PA))
      J(tag_IC_CH3CO2H,tag_IC_PA,1) = zerodiv(+flow(PA_CH3CO2H),Z(tag_IC_PA))
      J(tag_IC_PA,tag_IC_PA,1) = zerodiv(-flow(PA_sink),Z(tag_IC_PA))
      J(tag_IC_CH3CO3H,tag_IC_PA,1) = zerodiv(+flow(PA_CH3CO3H),Z(tag_IC_PA))
      J(tag_IC_PAN,tag_IC_PA,1) = zerodiv(+flow(PA_PAN),Z(tag_IC_PA))
      J(tag_IC_CH3O2,tag_IC_CH3CO3H,1) = zerodiv(+flow(CH3CO3H_CH3O2),Z(tag_IC_CH3CO3H))
      J(tag_IC_PA,tag_IC_CH3CO3H,1) = zerodiv(+flow(CH3CO3H_PA),Z(tag_IC_CH3CO3H))
      J(tag_IC_CH3CO3H,tag_IC_CH3CO3H,1) = zerodiv(-flow(CH3CO3H_sink),Z(tag_IC_CH3CO3H))
      J(tag_IC_HCHO,tag_IC_NACA,1) = zerodiv(+flow(NACA_HCHO),Z(tag_IC_NACA))
      J(tag_IC_CO,tag_IC_NACA,1) = zerodiv(+flow(NACA_CO),Z(tag_IC_NACA))
      J(tag_IC_NACA,tag_IC_NACA,1) = zerodiv(-flow(NACA_sink),Z(tag_IC_NACA))
      J(tag_IC_CH3O2,tag_IC_PAN,1) = zerodiv(+flow(PAN_CH3O2),Z(tag_IC_PAN))
      J(tag_IC_HCHO,tag_IC_PAN,1) = zerodiv(+flow(PAN_HCHO),Z(tag_IC_PAN))
      J(tag_IC_CO2,tag_IC_PAN,1) = zerodiv(+flow(PAN_CO2),Z(tag_IC_PAN))
      J(tag_IC_PA,tag_IC_PAN,1) = zerodiv(+flow(PAN_PA),Z(tag_IC_PAN))
      J(tag_IC_PAN,tag_IC_PAN,1) = zerodiv(-flow(PAN_sink),Z(tag_IC_PAN))
      J(tag_IC_C2H5O2,tag_IC_C3H8,1) = zerodiv(+flow(C3H8_C2H5O2),Z(tag_IC_C3H8))
      J(tag_IC_C3H8,tag_IC_C3H8,1) = zerodiv(-flow(C3H8_sink),Z(tag_IC_C3H8))
      J(tag_IC_IC3H7O2,tag_IC_C3H8,1) = zerodiv(+flow(C3H8_IC3H7O2),Z(tag_IC_C3H8))
      J(tag_IC_CH4,tag_IC_C3H6,1) = zerodiv(+flow(C3H6_CH4),Z(tag_IC_C3H6))
      J(tag_IC_CH3OH,tag_IC_C3H6,1) = zerodiv(+flow(C3H6_CH3OH),Z(tag_IC_C3H6))
      J(tag_IC_CH3O2,tag_IC_C3H6,1) = zerodiv(+flow(C3H6_CH3O2),Z(tag_IC_C3H6))
      J(tag_IC_HCHO,tag_IC_C3H6,1) = zerodiv(+flow(C3H6_HCHO),Z(tag_IC_C3H6))
      J(tag_IC_CO,tag_IC_C3H6,1) = zerodiv(+flow(C3H6_CO),Z(tag_IC_C3H6))
      J(tag_IC_HCOOH,tag_IC_C3H6,1) = zerodiv(+flow(C3H6_HCOOH),Z(tag_IC_C3H6))
      J(tag_IC_C2H5O2,tag_IC_C3H6,1) = zerodiv(+flow(C3H6_C2H5O2),Z(tag_IC_C3H6))
      J(tag_IC_CH3CHO,tag_IC_C3H6,1) = zerodiv(+flow(C3H6_CH3CHO),Z(tag_IC_C3H6))
      J(tag_IC_PA,tag_IC_C3H6,1) = zerodiv(+flow(C3H6_PA),Z(tag_IC_C3H6))
      J(tag_IC_C3H6,tag_IC_C3H6,1) = zerodiv(-flow(C3H6_sink),Z(tag_IC_C3H6))
      J(tag_IC_LHOC3H6O2,tag_IC_C3H6,1) = zerodiv(+flow(C3H6_LHOC3H6O2),Z(tag_IC_C3H6))
      J(tag_IC_MGLYOX,tag_IC_C3H6,1) = zerodiv(+flow(C3H6_MGLYOX),Z(tag_IC_C3H6))
      J(tag_IC_LC4H9NO3,tag_IC_C3H6,1) = zerodiv(+flow(C3H6_LC4H9NO3),Z(tag_IC_C3H6))
      J(tag_IC_IC3H7O2,tag_IC_IC3H7O2,1) = zerodiv(-flow(IC3H7O2_sink),Z(tag_IC_IC3H7O2))
      J(tag_IC_IC3H7OOH,tag_IC_IC3H7O2,1) = zerodiv(+flow(IC3H7O2_IC3H7OOH),Z(tag_IC_IC3H7O2))
      J(tag_IC_CH3COCH3,tag_IC_IC3H7O2,1) = zerodiv(+flow(IC3H7O2_CH3COCH3),Z(tag_IC_IC3H7O2))
      J(tag_IC_IC3H7NO3,tag_IC_IC3H7O2,1) = zerodiv(+flow(IC3H7O2_IC3H7NO3),Z(tag_IC_IC3H7O2))
      J(tag_IC_IC3H7O2,tag_IC_IC3H7OOH,1) = zerodiv(+flow(IC3H7OOH_IC3H7O2),Z(tag_IC_IC3H7OOH))
      J(tag_IC_IC3H7OOH,tag_IC_IC3H7OOH,1) = zerodiv(-flow(IC3H7OOH_sink),Z(tag_IC_IC3H7OOH))
      J(tag_IC_CH3COCH3,tag_IC_IC3H7OOH,1) = zerodiv(+flow(IC3H7OOH_CH3COCH3),Z(tag_IC_IC3H7OOH))
      J(tag_IC_HCHO,tag_IC_LHOC3H6O2,1) = zerodiv(+flow(LHOC3H6O2_HCHO),Z(tag_IC_LHOC3H6O2))
      J(tag_IC_CH3CHO,tag_IC_LHOC3H6O2,1) = zerodiv(+flow(LHOC3H6O2_CH3CHO),Z(tag_IC_LHOC3H6O2))
      J(tag_IC_LHOC3H6O2,tag_IC_LHOC3H6O2,1) = zerodiv(-flow(LHOC3H6O2_sink),Z(tag_IC_LHOC3H6O2))
      J(tag_IC_LHOC3H6OOH,tag_IC_LHOC3H6O2,1) = zerodiv(+flow(LHOC3H6O2_LHOC3H6OOH),Z(tag_IC_LHOC3H6O2))
      J(tag_IC_LC4H9NO3,tag_IC_LHOC3H6O2,1) = zerodiv(+flow(LHOC3H6O2_LC4H9NO3),Z(tag_IC_LHOC3H6O2))
      J(tag_IC_LHOC3H6O2,tag_IC_LHOC3H6OOH,1) = zerodiv(+flow(LHOC3H6OOH_LHOC3H6O2),Z(tag_IC_LHOC3H6OOH))
      J(tag_IC_LHOC3H6OOH,tag_IC_LHOC3H6OOH,1) = zerodiv(-flow(LHOC3H6OOH_sink),Z(tag_IC_LHOC3H6OOH))
      J(tag_IC_ACETOL,tag_IC_LHOC3H6OOH,1) = zerodiv(+flow(LHOC3H6OOH_ACETOL),Z(tag_IC_LHOC3H6OOH))
      J(tag_IC_CH3O2,tag_IC_CH3COCH3,1) = zerodiv(+flow(CH3COCH3_CH3O2),Z(tag_IC_CH3COCH3))
      J(tag_IC_PA,tag_IC_CH3COCH3,1) = zerodiv(+flow(CH3COCH3_PA),Z(tag_IC_CH3COCH3))
      J(tag_IC_CH3COCH3,tag_IC_CH3COCH3,1) = zerodiv(-flow(CH3COCH3_sink),Z(tag_IC_CH3COCH3))
      J(tag_IC_CH3COCH2O2,tag_IC_CH3COCH3,1) = zerodiv(+flow(CH3COCH3_CH3COCH2O2),Z(tag_IC_CH3COCH3))
      J(tag_IC_HCHO,tag_IC_CH3COCH2O2,1) = zerodiv(+flow(CH3COCH2O2_HCHO),Z(tag_IC_CH3COCH2O2))
      J(tag_IC_PA,tag_IC_CH3COCH2O2,1) = zerodiv(+flow(CH3COCH2O2_PA),Z(tag_IC_CH3COCH2O2))
      J(tag_IC_CH3COCH2O2,tag_IC_CH3COCH2O2,1) = zerodiv(-flow(CH3COCH2O2_sink),Z(tag_IC_CH3COCH2O2))
      J(tag_IC_HYPERACET,tag_IC_CH3COCH2O2,1) = zerodiv(+flow(CH3COCH2O2_HYPERACET),Z(tag_IC_CH3COCH2O2))
      J(tag_IC_ACETOL,tag_IC_CH3COCH2O2,1) = zerodiv(+flow(CH3COCH2O2_ACETOL),Z(tag_IC_CH3COCH2O2))
      J(tag_IC_MGLYOX,tag_IC_CH3COCH2O2,1) = zerodiv(+flow(CH3COCH2O2_MGLYOX),Z(tag_IC_CH3COCH2O2))
      J(tag_IC_PA,tag_IC_HYPERACET,1) = zerodiv(+flow(HYPERACET_PA),Z(tag_IC_HYPERACET))
      J(tag_IC_CH3COCH2O2,tag_IC_HYPERACET,1) = zerodiv(+flow(HYPERACET_CH3COCH2O2),Z(tag_IC_HYPERACET))
      J(tag_IC_HYPERACET,tag_IC_HYPERACET,1) = zerodiv(-flow(HYPERACET_sink),Z(tag_IC_HYPERACET))
      J(tag_IC_MGLYOX,tag_IC_HYPERACET,1) = zerodiv(+flow(HYPERACET_MGLYOX),Z(tag_IC_HYPERACET))
      J(tag_IC_HCHO,tag_IC_ACETOL,1) = zerodiv(+flow(ACETOL_HCHO),Z(tag_IC_ACETOL))
      J(tag_IC_PA,tag_IC_ACETOL,1) = zerodiv(+flow(ACETOL_PA),Z(tag_IC_ACETOL))
      J(tag_IC_ACETOL,tag_IC_ACETOL,1) = zerodiv(-flow(ACETOL_sink),Z(tag_IC_ACETOL))
      J(tag_IC_MGLYOX,tag_IC_ACETOL,1) = zerodiv(+flow(ACETOL_MGLYOX),Z(tag_IC_ACETOL))
      J(tag_IC_CO,tag_IC_MGLYOX,1) = zerodiv(+flow(MGLYOX_CO),Z(tag_IC_MGLYOX))
      J(tag_IC_PA,tag_IC_MGLYOX,1) = zerodiv(+flow(MGLYOX_PA),Z(tag_IC_MGLYOX))
      J(tag_IC_MGLYOX,tag_IC_MGLYOX,1) = zerodiv(-flow(MGLYOX_sink),Z(tag_IC_MGLYOX))
      J(tag_IC_ACETOL,tag_IC_MPAN,1) = zerodiv(+flow(MPAN_ACETOL),Z(tag_IC_MPAN))
      J(tag_IC_MPAN,tag_IC_MPAN,1) = zerodiv(-flow(MPAN_sink),Z(tag_IC_MPAN))
      J(tag_IC_MVKO2,tag_IC_MPAN,1) = zerodiv(+flow(MPAN_MVKO2),Z(tag_IC_MPAN))
      J(tag_IC_CH3COCH3,tag_IC_IC3H7NO3,1) = zerodiv(+flow(IC3H7NO3_CH3COCH3),Z(tag_IC_IC3H7NO3))
      J(tag_IC_IC3H7NO3,tag_IC_IC3H7NO3,1) = zerodiv(-flow(IC3H7NO3_sink),Z(tag_IC_IC3H7NO3))
      J(tag_IC_NC4H10,tag_IC_NC4H10,1) = zerodiv(-flow(NC4H10_sink),Z(tag_IC_NC4H10))
      J(tag_IC_LC4H9O2,tag_IC_NC4H10,1) = zerodiv(+flow(NC4H10_LC4H9O2),Z(tag_IC_NC4H10))
      J(tag_IC_C2H5O2,tag_IC_LC4H9O2,1) = zerodiv(+flow(LC4H9O2_C2H5O2),Z(tag_IC_LC4H9O2))
      J(tag_IC_CH3CHO,tag_IC_LC4H9O2,1) = zerodiv(+flow(LC4H9O2_CH3CHO),Z(tag_IC_LC4H9O2))
      J(tag_IC_LC4H9O2,tag_IC_LC4H9O2,1) = zerodiv(-flow(LC4H9O2_sink),Z(tag_IC_LC4H9O2))
      J(tag_IC_LC4H9OOH,tag_IC_LC4H9O2,1) = zerodiv(+flow(LC4H9O2_LC4H9OOH),Z(tag_IC_LC4H9O2))
      J(tag_IC_MEK,tag_IC_LC4H9O2,1) = zerodiv(+flow(LC4H9O2_MEK),Z(tag_IC_LC4H9O2))
      J(tag_IC_LC4H9NO3,tag_IC_LC4H9O2,1) = zerodiv(+flow(LC4H9O2_LC4H9NO3),Z(tag_IC_LC4H9O2))
      J(tag_IC_C2H5O2,tag_IC_LC4H9OOH,1) = zerodiv(+flow(LC4H9OOH_C2H5O2),Z(tag_IC_LC4H9OOH))
      J(tag_IC_CH3CHO,tag_IC_LC4H9OOH,1) = zerodiv(+flow(LC4H9OOH_CH3CHO),Z(tag_IC_LC4H9OOH))
      J(tag_IC_LC4H9O2,tag_IC_LC4H9OOH,1) = zerodiv(+flow(LC4H9OOH_LC4H9O2),Z(tag_IC_LC4H9OOH))
      J(tag_IC_LC4H9OOH,tag_IC_LC4H9OOH,1) = zerodiv(-flow(LC4H9OOH_sink),Z(tag_IC_LC4H9OOH))
      J(tag_IC_MEK,tag_IC_LC4H9OOH,1) = zerodiv(+flow(LC4H9OOH_MEK),Z(tag_IC_LC4H9OOH))
      J(tag_IC_HCHO,tag_IC_MVK,1) = zerodiv(+flow(MVK_HCHO),Z(tag_IC_MVK))
      J(tag_IC_CO,tag_IC_MVK,1) = zerodiv(+flow(MVK_CO),Z(tag_IC_MVK))
      J(tag_IC_HCOOH,tag_IC_MVK,1) = zerodiv(+flow(MVK_HCOOH),Z(tag_IC_MVK))
      J(tag_IC_PA,tag_IC_MVK,1) = zerodiv(+flow(MVK_PA),Z(tag_IC_MVK))
      J(tag_IC_MGLYOX,tag_IC_MVK,1) = zerodiv(+flow(MVK_MGLYOX),Z(tag_IC_MVK))
      J(tag_IC_MVK,tag_IC_MVK,1) = zerodiv(-flow(MVK_sink),Z(tag_IC_MVK))
      J(tag_IC_MVKO2,tag_IC_MVK,1) = zerodiv(+flow(MVK_MVKO2),Z(tag_IC_MVK))
      J(tag_IC_HCHO,tag_IC_MVKO2,1) = zerodiv(+flow(MVKO2_HCHO),Z(tag_IC_MVKO2))
      J(tag_IC_CO,tag_IC_MVKO2,1) = zerodiv(+flow(MVKO2_CO),Z(tag_IC_MVKO2))
      J(tag_IC_PA,tag_IC_MVKO2,1) = zerodiv(+flow(MVKO2_PA),Z(tag_IC_MVKO2))
      J(tag_IC_ACETOL,tag_IC_MVKO2,1) = zerodiv(+flow(MVKO2_ACETOL),Z(tag_IC_MVKO2))
      J(tag_IC_MGLYOX,tag_IC_MVKO2,1) = zerodiv(+flow(MVKO2_MGLYOX),Z(tag_IC_MVKO2))
      J(tag_IC_MPAN,tag_IC_MVKO2,1) = zerodiv(+flow(MVKO2_MPAN),Z(tag_IC_MVKO2))
      J(tag_IC_MVKO2,tag_IC_MVKO2,1) = zerodiv(-flow(MVKO2_sink),Z(tag_IC_MVKO2))
      J(tag_IC_MVKOOH,tag_IC_MVKO2,1) = zerodiv(+flow(MVKO2_MVKOOH),Z(tag_IC_MVKO2))
      J(tag_IC_HCHO,tag_IC_MVKOOH,1) = zerodiv(+flow(MVKOOH_HCHO),Z(tag_IC_MVKOOH))
      J(tag_IC_CO,tag_IC_MVKOOH,1) = zerodiv(+flow(MVKOOH_CO),Z(tag_IC_MVKOOH))
      J(tag_IC_PA,tag_IC_MVKOOH,1) = zerodiv(+flow(MVKOOH_PA),Z(tag_IC_MVKOOH))
      J(tag_IC_ACETOL,tag_IC_MVKOOH,1) = zerodiv(+flow(MVKOOH_ACETOL),Z(tag_IC_MVKOOH))
      J(tag_IC_MGLYOX,tag_IC_MVKOOH,1) = zerodiv(+flow(MVKOOH_MGLYOX),Z(tag_IC_MVKOOH))
      J(tag_IC_MVKO2,tag_IC_MVKOOH,1) = zerodiv(+flow(MVKOOH_MVKO2),Z(tag_IC_MVKOOH))
      J(tag_IC_MVKOOH,tag_IC_MVKOOH,1) = zerodiv(-flow(MVKOOH_sink),Z(tag_IC_MVKOOH))
      J(tag_IC_C2H5O2,tag_IC_MEK,1) = zerodiv(+flow(MEK_C2H5O2),Z(tag_IC_MEK))
      J(tag_IC_PA,tag_IC_MEK,1) = zerodiv(+flow(MEK_PA),Z(tag_IC_MEK))
      J(tag_IC_MEK,tag_IC_MEK,1) = zerodiv(-flow(MEK_sink),Z(tag_IC_MEK))
      J(tag_IC_LMEKO2,tag_IC_MEK,1) = zerodiv(+flow(MEK_LMEKO2),Z(tag_IC_MEK))
      J(tag_IC_CH3CHO,tag_IC_LMEKO2,1) = zerodiv(+flow(LMEKO2_CH3CHO),Z(tag_IC_LMEKO2))
      J(tag_IC_PA,tag_IC_LMEKO2,1) = zerodiv(+flow(LMEKO2_PA),Z(tag_IC_LMEKO2))
      J(tag_IC_LMEKO2,tag_IC_LMEKO2,1) = zerodiv(-flow(LMEKO2_sink),Z(tag_IC_LMEKO2))
      J(tag_IC_LMEKOOH,tag_IC_LMEKO2,1) = zerodiv(+flow(LMEKO2_LMEKOOH),Z(tag_IC_LMEKO2))
      J(tag_IC_LC4H9NO3,tag_IC_LMEKO2,1) = zerodiv(+flow(LMEKO2_LC4H9NO3),Z(tag_IC_LMEKO2))
      J(tag_IC_CH3CHO,tag_IC_LMEKOOH,1) = zerodiv(+flow(LMEKOOH_CH3CHO),Z(tag_IC_LMEKOOH))
      J(tag_IC_PA,tag_IC_LMEKOOH,1) = zerodiv(+flow(LMEKOOH_PA),Z(tag_IC_LMEKOOH))
      J(tag_IC_LMEKO2,tag_IC_LMEKOOH,1) = zerodiv(+flow(LMEKOOH_LMEKO2),Z(tag_IC_LMEKOOH))
      J(tag_IC_LMEKOOH,tag_IC_LMEKOOH,1) = zerodiv(-flow(LMEKOOH_sink),Z(tag_IC_LMEKOOH))
      J(tag_IC_BIACET,tag_IC_LMEKOOH,1) = zerodiv(+flow(LMEKOOH_BIACET),Z(tag_IC_LMEKOOH))
      J(tag_IC_PA,tag_IC_BIACET,1) = zerodiv(+flow(BIACET_PA),Z(tag_IC_BIACET))
      J(tag_IC_BIACET,tag_IC_BIACET,1) = zerodiv(-flow(BIACET_sink),Z(tag_IC_BIACET))
      J(tag_IC_C2H5O2,tag_IC_LC4H9NO3,1) = zerodiv(+flow(LC4H9NO3_C2H5O2),Z(tag_IC_LC4H9NO3))
      J(tag_IC_CH3CHO,tag_IC_LC4H9NO3,1) = zerodiv(+flow(LC4H9NO3_CH3CHO),Z(tag_IC_LC4H9NO3))
      J(tag_IC_MEK,tag_IC_LC4H9NO3,1) = zerodiv(+flow(LC4H9NO3_MEK),Z(tag_IC_LC4H9NO3))
      J(tag_IC_LC4H9NO3,tag_IC_LC4H9NO3,1) = zerodiv(-flow(LC4H9NO3_sink),Z(tag_IC_LC4H9NO3))
      J(tag_IC_CH3O2,tag_IC_C5H8,1) = zerodiv(+flow(C5H8_CH3O2),Z(tag_IC_C5H8))
      J(tag_IC_HCHO,tag_IC_C5H8,1) = zerodiv(+flow(C5H8_HCHO),Z(tag_IC_C5H8))
      J(tag_IC_CO,tag_IC_C5H8,1) = zerodiv(+flow(C5H8_CO),Z(tag_IC_C5H8))
      J(tag_IC_HCOOH,tag_IC_C5H8,1) = zerodiv(+flow(C5H8_HCOOH),Z(tag_IC_C5H8))
      J(tag_IC_PA,tag_IC_C5H8,1) = zerodiv(+flow(C5H8_PA),Z(tag_IC_C5H8))
      J(tag_IC_MVK,tag_IC_C5H8,1) = zerodiv(+flow(C5H8_MVK),Z(tag_IC_C5H8))
      J(tag_IC_MVKO2,tag_IC_C5H8,1) = zerodiv(+flow(C5H8_MVKO2),Z(tag_IC_C5H8))
      J(tag_IC_C5H8,tag_IC_C5H8,1) = zerodiv(-flow(C5H8_sink),Z(tag_IC_C5H8))
      J(tag_IC_ISO2,tag_IC_C5H8,1) = zerodiv(+flow(C5H8_ISO2),Z(tag_IC_C5H8))
      J(tag_IC_ISON,tag_IC_C5H8,1) = zerodiv(+flow(C5H8_ISON),Z(tag_IC_C5H8))
      J(tag_IC_CH3OH,tag_IC_ISO2,1) = zerodiv(+flow(ISO2_CH3OH),Z(tag_IC_ISO2))
      J(tag_IC_HCHO,tag_IC_ISO2,1) = zerodiv(+flow(ISO2_HCHO),Z(tag_IC_ISO2))
      J(tag_IC_ACETOL,tag_IC_ISO2,1) = zerodiv(+flow(ISO2_ACETOL),Z(tag_IC_ISO2))
      J(tag_IC_MGLYOX,tag_IC_ISO2,1) = zerodiv(+flow(ISO2_MGLYOX),Z(tag_IC_ISO2))
      J(tag_IC_MVK,tag_IC_ISO2,1) = zerodiv(+flow(ISO2_MVK),Z(tag_IC_ISO2))
      J(tag_IC_ISO2,tag_IC_ISO2,1) = zerodiv(-flow(ISO2_sink),Z(tag_IC_ISO2))
      J(tag_IC_ISOOH,tag_IC_ISO2,1) = zerodiv(+flow(ISO2_ISOOH),Z(tag_IC_ISO2))
      J(tag_IC_ISON,tag_IC_ISO2,1) = zerodiv(+flow(ISO2_ISON),Z(tag_IC_ISO2))
      J(tag_IC_HCHO,tag_IC_ISOOH,1) = zerodiv(+flow(ISOOH_HCHO),Z(tag_IC_ISOOH))
      J(tag_IC_MVK,tag_IC_ISOOH,1) = zerodiv(+flow(ISOOH_MVK),Z(tag_IC_ISOOH))
      J(tag_IC_ISOOH,tag_IC_ISOOH,1) = zerodiv(-flow(ISOOH_sink),Z(tag_IC_ISOOH))
      J(tag_IC_HCHO,tag_IC_ISON,1) = zerodiv(+flow(ISON_HCHO),Z(tag_IC_ISON))
      J(tag_IC_NACA,tag_IC_ISON,1) = zerodiv(+flow(ISON_NACA),Z(tag_IC_ISON))
      J(tag_IC_ACETOL,tag_IC_ISON,1) = zerodiv(+flow(ISON_ACETOL),Z(tag_IC_ISON))
      J(tag_IC_MVK,tag_IC_ISON,1) = zerodiv(+flow(ISON_MVK),Z(tag_IC_ISON))
      J(tag_IC_ISON,tag_IC_ISON,1) = zerodiv(-flow(ISON_sink),Z(tag_IC_ISON))
      J(tag_IC_CCl4,tag_IC_CCl4,1) = zerodiv(-flow(CCl4_sink),Z(tag_IC_CCl4))
      J(tag_IC_CH3O2,tag_IC_CH3Cl,1) = zerodiv(+flow(CH3Cl_CH3O2),Z(tag_IC_CH3Cl))
      J(tag_IC_CH3Cl,tag_IC_CH3Cl,1) = zerodiv(-flow(CH3Cl_sink),Z(tag_IC_CH3Cl))
      J(tag_IC_CH3CCl3,tag_IC_CH3CCl3,1) = zerodiv(-flow(CH3CCl3_sink),Z(tag_IC_CH3CCl3))
      J(tag_IC_CF2Cl2,tag_IC_CF2Cl2,1) = zerodiv(-flow(CF2Cl2_sink),Z(tag_IC_CF2Cl2))
      J(tag_IC_CFCl3,tag_IC_CFCl3,1) = zerodiv(-flow(CFCl3_sink),Z(tag_IC_CFCl3))
      J(tag_IC_CH3O2,tag_IC_CH3Br,1) = zerodiv(+flow(CH3Br_CH3O2),Z(tag_IC_CH3Br))
      J(tag_IC_CH3Br,tag_IC_CH3Br,1) = zerodiv(-flow(CH3Br_sink),Z(tag_IC_CH3Br))
      J(tag_IC_CF3Br,tag_IC_CF3Br,1) = zerodiv(-flow(CF3Br_sink),Z(tag_IC_CF3Br))
      J(tag_IC_CF2ClBr,tag_IC_CF2ClBr,1) = zerodiv(-flow(CF2ClBr_sink),Z(tag_IC_CF2ClBr))
      J(tag_IC_HCHO,tag_IC_DMS,1) = zerodiv(+flow(DMS_HCHO),Z(tag_IC_DMS))
      J(tag_IC_DMS,tag_IC_DMS,1) = zerodiv(-flow(DMS_sink),Z(tag_IC_DMS))
      J(tag_IC_DMSO,tag_IC_DMS,1) = zerodiv(+flow(DMS_DMSO),Z(tag_IC_DMS))
      J(tag_IC_CH3SO2,tag_IC_DMS,1) = zerodiv(+flow(DMS_CH3SO2),Z(tag_IC_DMS))
      J(tag_IC_CH3O2,tag_IC_DMSO,1) = zerodiv(+flow(DMSO_CH3O2),Z(tag_IC_DMSO))
      J(tag_IC_HCHO,tag_IC_DMSO,1) = zerodiv(+flow(DMSO_HCHO),Z(tag_IC_DMSO))
      J(tag_IC_CH3SO3H,tag_IC_DMSO,1) = zerodiv(+flow(DMSO_CH3SO3H),Z(tag_IC_DMSO))
      J(tag_IC_DMSO,tag_IC_DMSO,1) = zerodiv(-flow(DMSO_sink),Z(tag_IC_DMSO))
      J(tag_IC_CH3O2,tag_IC_CH3SO2,1) = zerodiv(+flow(CH3SO2_CH3O2),Z(tag_IC_CH3SO2))
      J(tag_IC_CH3SO2,tag_IC_CH3SO2,1) = zerodiv(-flow(CH3SO2_sink),Z(tag_IC_CH3SO2))
      J(tag_IC_CH3SO3,tag_IC_CH3SO2,1) = zerodiv(+flow(CH3SO2_CH3SO3),Z(tag_IC_CH3SO2))
      J(tag_IC_CH3SO3H,tag_IC_CH3SO3,1) = zerodiv(+flow(CH3SO3_CH3SO3H),Z(tag_IC_CH3SO3))
      J(tag_IC_CH3SO3,tag_IC_CH3SO3,1) = zerodiv(-flow(CH3SO3_sink),Z(tag_IC_CH3SO3))

      
      IF (do_inv) THEN          ! (do_inv .EQ. .TRUE.) removed due to g95 problems
      ! inverting coeffs
        J(:,:,1) = -J(:,:,1)    
      ! adding E to M
        DO n = 1, NTCSPEC
          J(n,n,1) = J(n,n,1) + 1.0_dp
        ENDDO

      ENDIF

    END SUBROUTINE prepare_J

  ! - some linear algebra routines --------------------------------------------

    SUBROUTINE inverse(M,n)

      IMPLICIT NONE

      INTEGER, INTENT(IN) :: n
      REAL(dp), INTENT(INOUT) :: M(n,n)

      INTEGER  :: indx(n), i
      REAL(dp) :: E(n,n), d

      E(:,:)=0.0_dp
      DO i = 1, n                    ! setting up identity matrix
         E(i,i)=1.0_dp
      ENDDO

      CALL ludcmp(M,indx,d,n)        ! decomposing matrix just once
      DO i = 1, n                    ! finding inverse by columns
         CALL lubksb(M,indx,E(:,i),n)
!                           E(1,i)
      ENDDO

      M = E

    END SUBROUTINE inverse

  ! ---------------------------------------------------------------------------

    SUBROUTINE ludcmp(a,indx,d,n)
  
      IMPLICIT NONE
  
      INTEGER, INTENT(IN) :: n
      REAL(dp), INTENT(INOUT) :: a(n,n)
  
      REAL(dp), INTENT(OUT)   :: d
      INTEGER, INTENT(OUT)    :: indx(n)
  
      REAL(dp), PARAMETER :: TINY = 1.0E-20_dp      ! a small number.
  
    ! Given a matrix a(1:n,1:n), with physical dimension np by np, this routine replaces it by
    ! the LU decomposition of a rowwise permutation of itself. a and n are input. a is output,
    ! arranged as in equation (2.3.14) above; indx(1:n) is an output vector that records the
    ! row permutation effected by the partial pivoting; d is output as +-1 depending on whether
    ! the number of row interchanges was even or odd, respectively. This routine is used in
    ! combination with lubksb to solve linear equations or invert a matrix.
  
      INTEGER  :: i, imax, j, k
      REAL(dp) :: aamax, dum, sum, &
                  vv(n) ! vv stores the implicit scaling of each row.
  
      d=1.0_dp                 ! No row interchanges yet.
  
      DO i=1,n                 ! Loop over rows to get the implicit scaling information
        aamax=0.0_dp
        DO j=1,n
          IF (ABS(a(i,j)) .GT. aamax) aamax=ABS(a(i,j))
        ENDDO
      IF (aamax .EQ.0.0_dp ) pause 'singular matrix in ludcmp' ! No nonzero largest element.
      vv(i)=1.0_dp /aamax              ! Save the scaling.
      ENDDO
  
      DO j=1,n                 ! This is the loop over columns of Crout's method.
        DO i=1,j-1             ! This is equation (2.3.12) except for i = j.
          sum=a(i,j)
          DO k=1,i-1
            sum=sum-a(i,k)*a(k,j)
          ENDDO
          a(i,j)=sum
        ENDDO
        aamax=0.0_dp ! Initialize for the search for largest pivot element.
        DO i=j,n               ! This is i = j of equation (2.3.12) and i = j+1: ::N
          sum=a(i,j)              ! of equation (2.3.13).
          DO k=1,j-1
            sum=sum-a(i,k)*a(k,j)
          ENDDO
          a(i,j)=sum
          dum=vv(i)*ABS(sum)       ! Figure of merit for the pivot.
          IF (dum .GE. aamax) THEN ! Is it better than the best so far?
            imax=i
            aamax=dum
          ENDIF
        ENDDO
        IF (j .NE. imax) THEN     ! DO we need to interchange rows?
          DO k=1,n             ! Yes, DO so...
            dum=a(imax,k)
            a(imax,k)=a(j,k)
            a(j,k)=dum
          ENDDO
          d=-d                    ! ...and change the parity of d.
          vv(imax)=vv(j)          ! Also interchange the scale factor.
        ENDIF
        indx(j)=imax
        IF (a(j,j) .EQ.0.0_dp ) a(j,j)=TINY
    ! IF the pivot element is zero the matrix is singular 
    ! (at least to the precision of the algorithm).
    ! For some applications on singular matrices, 
    ! it is desirable to substitute TINY for zero.
        IF (j .NE. n) THEN        ! Now, finally, divide by the pivot element.
          dum=1.0_dp /a(j,j)
          DO i=j+1,n
            a(i,j)=a(i,j)*dum
          ENDDO
        ENDIF
      ENDDO                    ! Go back for the next column in the reduction.
      return
    END SUBROUTINE ludcmp
  
    ! --------------------------------------------------------------------------
  
    SUBROUTINE lubksb(a,indx,b,n)
    
      IMPLICIT NONE

      INTEGER, INTENT(IN) :: n
      REAL(dp), INTENT(IN) :: a(n,n)
      INTEGER,  INTENT(IN) :: indx(n)
      REAL(dp), INTENT(INOUT) :: b(n)
  
    ! Solves the set of n linear equations A * X = B. Here a is input, not as the matrix A but
    ! rather as its LU decomposition, determined by the routine ludcmp. indx is input as the
    ! permutation vector returned by ludcmp. b(1:n) is input as the right-hand side vector B,
    ! and returns with the solution vector X. a, n, np, and indx are not modifed by this routine
    ! and can be left in place for successive calls with different right-hand sides b. This 
    ! routine takes into account the possibility that b will begin with many zero elements, 
    ! so it is efficient for use in matrix inversion.
    
      INTEGER i,ii,j,ll
      REAL sum
      ii=0  ! When ii is set to a positive value, it will become the index
            ! of the first nonvanishing element of b. We now DO
            ! the forward substitution, equation (2.3.6). The only new
            ! wrinkle is to unscramble the permutation as we go.
      DO i=1, n
        ll=indx(i)
        sum=b(ll)
        b(ll)=b(i)
        IF (ii .NE. 0) THEN
          DO j = ii, i-1
            sum=sum-a(i,j)*b(j)
          ENDDO 
        ELSE IF (sum .NE.0.0_dp ) THEN
          ii=i ! A nonzero element was encountered, so from now on we will
               ! have to DO the sums in the loop above
        ENDIF
        b(i)=sum
      ENDDO
  
      DO i = n, 1, -1     ! Now we do the backsubstitution, equation (2.3.7).
        sum=b(i)
        DO j = i+1, n
          sum=sum-a(i,j)*b(j)
        ENDDO
        b(i)=sum/a(i,i)  ! Store a component of the solution vector X.
      ENDDO
    
      return             ! All done!
    
    END SUBROUTINE lubksb

  ! ----------------------------------------------------------------------------

! <<<<< LINEAR-MATRIX integration scheme <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
#endif
    
#ifdef I_CASHKARP
! >>>>> CASH-KARP RK integration scheme >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

    SUBROUTINE cashkarp(IVI,IDI,t,h,IVO,IER)   
    
      IMPLICIT NONE
    
      REAL(dp), INTENT(IN)  :: h, t           
      REAL(dp), INTENT(IN)  :: IVI(NTCSPEC,NTCISO), IDI(NTCSPEC,NTCISO)
      REAL(dp), INTENT(OUT) :: IVO(NTCSPEC,NTCISO), IER(NTCSPEC,NTCISO)
    
  ! using the 5th-order Cash-Karp Runge-Kutta method to advance the solution over an 
  ! interval h and return the incremented variables as IVO; also return an estimate 
  ! of the IVO local truncation error IER using the embedded fourth-order method
  ! 
  ! input: 
  ! :values for NTCSPEC variables IVI and their derivatives IDI known at t
  ! h: advance interval
  !
  ! output: 
  ! IVO and IER: vectors of new values and estimated error
  !
  ! iderivs returns the right-hand side derivatives using isotopologues concentrations 
  ! from IVT and PTs

      REAL(dp)            :: IVT(NTCSPEC,NTCISO)      ! temp

      REAL(dp), DIMENSION(NTCSPEC,NTCISO) :: AK2, AK3, AK4, AK5, AK6
      REAL(dp), PARAMETER ::  A2 = 0.2_dp, &
                              A3 = 0.3_dp, &
                              A4 = 0.6_dp, &
                              A5 = 1.0_dp, &
                              A6 = 0.875_dp, &
                             B21 = 0.2_dp, &
                             B31 = 3.0_dp/40.0_dp, &
                             B32 = 9.0_dp/40.0_dp, &
                             B41 = 0.3_dp, &
                             B42 = -0.9_dp, &
                             B43 = 1.2_dp, &
                             B51 = -11.0_dp/54.0_dp, &
                             B52 = 2.5_dp, &
                             B53 = -70.0_dp/27.0_dp, &
                             B54 = 35.0_dp/27.0_dp, &
                             B61 = 1631.0_dp/55296.0_dp, &
                             B62 = 175.0_dp/512.0_dp, &
                             B63 = 575.0_dp/13824.0_dp, &
                             B64 = 44275.0_dp/110592.0_dp, &
                             B65 = 253.0_dp/4096.0_dp, &
                              C1 = 37.0_dp/378.0_dp, &
                              C3 = 250.0_dp/621.0_dp, &
                              C4 = 125.0_dp/594.0_dp, &
                              C6 = 512.0_dp/1771.0_dp, &
                             DC1 = C1-2825.0_dp/27648.0_dp, &
                             DC3 = C3-18575.0_dp/48384.0_dp, &
                             DC4 = C4-13525.0_dp/55296.0_dp, &
                             DC5 = -277.0_dp/14336.0_dp, &
                             DC6 = C6-0.25

    ! First step.
      IVT(:,:) = IVI(:,:)+h*(B21*IDI(:,:))
      CALL iderivs(t+A2*h,IVT,AK2)        ! Second step.

      IVT(:,:) = IVI(:,:)+h*(B31*IDI(:,:)+B32*AK2(:,:))
      CALL iderivs(t+A3*h,IVT,AK3)        ! Third step.

      IVT(:,:) = IVI(:,:)+h*(B41*IDI(:,:)+B42*AK2(:,:)+B43*AK3(:,:))
      CALL iderivs(t+A4*h,IVT,AK4)        ! Fourth step.

      IVT(:,:) = IVI(:,:)+h*(B51*IDI(:,:)+B52*AK2(:,:)+B53*AK3(:,:)+B54*AK4(:,:))
      CALL iderivs(t+A5*h,IVT,AK5)        ! Fifth step.

      IVT(:,:) = IVI(:,:)+h*(B61*IDI(:,:)+B62*AK2(:,:)+B63*AK3(:,:)+B64*AK4(:,:)+B65*AK5(:,:))
      CALL iderivs(t+A6*h,IVT,AK6)        ! Sixth step.
    
    ! output:

    ! accumulating increments with proper weights
      IVO(:,:) = IVI(:,:)+h*(C1*IDI(:,:)+C3*AK3(:,:)+C4*AK4(:,:)+C6*AK6(:,:))    
    
    ! Estimate error as difference between fourth and fifth order methods.
      IER(:,:) = h*(DC1*IDI(:,:)+DC3*AK3(:,:)+DC4*AK4(:,:)+DC5*AK5(:,:)+DC6*AK6(:,:))
    
!     RETURN
    
    END SUBROUTINE cashkarp
    
  ! ---------------------------------------------------------------------------

  ! stepper calls the cashkarp to take a Cash-Karp Runge-Kutta step:

    SUBROUTINE stepper(IVIO,IDI,t,htry,eps,ESC,hdid,hnext) ! +n,derivs
  
      IMPLICIT NONE
  
      REAL(dp), INTENT(INOUT) :: t, IVIO(NTCSPEC,NTCISO)
      REAL(dp), INTENT(OUT)   :: hdid, hnext
      REAL(dp), INTENT(IN)    :: IDI(NTCSPEC,NTCISO), &
                                 ESC(NTCSPEC,NTCISO), &      ! error scale
                                 htry, eps
  
    ! fifth-order Runge-Kutta stepper with monitoring of local truncation error to 
    ! ensure accuracy and adjust stepsize
    !
    ! input: 
    ! :NTCSPECxNTCISO-size vectors of variables IVIO and its derivatives IDI at 
    ! the starting value of the independent variable t
    ! htry: the stepsize to be attempted htry
    ! eps: required accuracy eps
    ! ESC: vector against which the error is scaled
    !
    ! output: 
    ! :IVIO and t are replaced by their new values
    ! hdid: stepsize that was actually accomplished
    ! hnext: estimated next stepsize
  
      INTEGER             :: i, j
      REAL(dp)            :: errmax, h, htemp, tnew

      REAL(dp)            :: IVT(NTCSPEC,NTCISO)      ! temp
      REAL(dp)            :: IER(NTCSPEC,NTCISO)      ! error
      
      REAL(dp), PARAMETER :: SAFETY = 0.9_dp, &
                              PGROW = -0.2_dp, &
                             PSHRNK = -0.25_dp, &
                             ERRCON = (5.0_dp/SAFETY)**(1.0_dp/PGROW)  ! 1.89E-4_dp !
    
      ! The value ERRCON equals , see use below.
    
      h = htry           ! setting stepsize to the initial trial value
    
   77 CALL cashkarp(IVIO,IDI,t,h,IVT,IER)      ! taking a step
  
      errmax = 0.0_dp                          ! evaluating accuracy
      DO j = 1, NTCISO 
        DO i = 1, NTCSPEC 
          errmax = MAX(errmax,DABS(IER(i,j)/ESC(i,j)))
    ENDDO
      ENDDO
    
      errmax = errmax/eps                      ! scaling relative to required tolerance
    
      IF (errmax .GT. 1.0_dp) THEN             ! truncation error is too large, reduce stepsize
    
        htemp = SAFETY * h * (errmax**PSHRNK)
        h = SIGN(MAX(DABS(htemp),0.1_dp*DABS(h)),h)     ! Not more than a factor of 10
        tnew = t + h
    
        IF (tnew .EQ. t) pause 'stepper: stepsize underflow'
        GOTO 77                                ! For another try.
  
      ELSE                                     ! Step succeeded. Computing the size of next step.
  
        IF (errmax .GT. ERRCON) THEN
          hnext = SAFETY * h * (errmax**PGROW)
        ELSE                                   ! No more than a factor of 5 increase.
          hnext = 5.0_dp * h
        ENDIF
    
        hdid = h
        t = t + h
    
        IVIO = IVT                             ! IVT() is returned from cashkarp
    
        RETURN
  
      ENDIF
    
    END SUBROUTINE stepper
  
  ! ---------------------------------------------------------------------------

    SUBROUTINE rkckintegrate(IVIO,t1,t2,eps,h1,hmin,nok,nbad)
    
      REAL(dp), INTENT(INOUT) :: IVIO(NTCSPEC,NTCISO)  ! in-out values
      REAL(dp), INTENT(IN)    :: t1, t2, eps, h1, hmin
  
      INTEGER, INTENT(OUT)    :: nok, nbad
  
      REAL(dp)                :: IVT(NTCSPEC,NTCISO)      ! temp vars
      REAL(dp)                :: IDT(NTCSPEC,NTCISO)      ! temp der
      REAL(dp)                :: IER(NTCSPEC,NTCISO)      ! error
      REAL(dp)                :: ESC(NTCSPEC,NTCISO)      ! error scale
  
      INTEGER, PARAMETER :: MAXSTP = 10000, &
                            ATINY =  1.e-30 ! TINY(dp) !
  
    ! Runge-Kutta driver with adaptive stepsize control
    ! 
    ! input:
    ! integrating the starting values IVIO()
    ! from t1 to t2 with accuracy eps
    ! storing intermediate results in the common block /path/.
    ! h1 should be set as a guessed first stepsize
    ! hmin as the minimum allowed stepsize (can be zero). 
    !
    ! output:
    ! nok and nbad are the number of good and bad (but retried and fixed) steps taken
    ! and IVIO is replaced by values at the end of the integration interval
    
      INTEGER                 :: i, j, nstp, nact
      REAL(dp)                :: t, h, hdid, hnext
    
      t = t1
      h = DSIGN(h1,t2-t1)
      nok = 0
      nbad = 0
    
      IVT = IVIO                               ! IVT - operational vector

      DO nstp = 1, MAXSTP                      ! take at most MAXSTP steps
  
        CALL iderivs(t,IVT,IDT)
      
        ! scaling (used for monitoring accuracy)
        ! can be modifed if there is a need

        ESC(:,:) = DABS(IVT(:,:)) + DABS(h*IDT(:,:)) + ATINY
    
        ! if stepsize can overshoot, decreasing
        IF ((t+h-t2)*(t+h-t1) .GT. 0.0_dp) h = t2 - t  
        
        CALL stepper(IVT,IDT,t,h,eps,ESC,hdid,hnext)
  
        IF (hdid .EQ. h) THEN
          nok = nok+1
        ELSE
          nbad = nbad+1
        ENDIF
    
        IF ((t-t2)*(t2-t1) .GE. 0.) THEN      ! done?
          
          IVIO = IVT                          ! output values
          RETURN                              ! normal exit
  
        ENDIF
  
        IF (DABS(hnext) .LT. hmin) pause 'rkckintegrate: stepsize smaller than minimum'
        h = hnext
      
      ENDDO       ! nstp cycle
  
      pause 'rkckintegrate: too many steps'
  
      RETURN
  
    END SUBROUTINE rkckintegrate

! <<<<< CASH-KARP RK integration scheme <<<<<<<<<<<<<<<<<<<<<<<<<<<<<
#endif

  END SUBROUTINE tag_IC_integrate



! -----------------------------------------------------------------------------

  SUBROUTINE tag_IC_calctotals(C)

    IMPLICIT NONE

    ! I/O
    REAL(dp), INTENT(IN) :: C(:)

    INTEGER  :: i

  ! minor isotopologues contribute with 1 rare atom
    TC(2:NTCISO) = SUM(ISOC(:,2:NTCISO))
    
  ! abundant atoms quantity is the rest
    TC(1) = SUM(SUM(ISOC(:,:),DIM=2)*QTCATOM(:)) - SUM(TC(2:NTCISO))

  ! total C atoms quantity from the regular mechanism
    TC_R = SUM(C(RTCIND(:))*QTCATOM(:))

!***    T13C = SUM(I13C(:))
!    T12C = SUM(I12C(1:NTCSPEC)*QTCATOM(:))

#ifdef DEBUG
    print *,'tag_IC_calctotals: passed'
#endif 

  END SUBROUTINE tag_IC_calctotals



! -----------------------------------------------------------------------------
  
! correction of total isotopologues budget to "regular" species budget  

  SUBROUTINE tag_IC_correct2reg(C)

    USE messy_mecca_kpp, ONLY: SPC_NAMES

    IMPLICIT NONE

    ! I/O
    REAL(dp), INTENT(IN)  :: C(:)

    INTEGER        :: i
    CHARACTER(100) :: specs
    REAL(dp) :: tot
    
    specs = ""
    tag_IC_NCOR2R = 0

    DO i = 1, NTCSPEC
      tot = ( I12C(i) + I13C(i) )
      IF (tot .EQ. 0.0_dp) THEN
        specs = TRIM(specs)//" "//TRIM(SPC_NAMES(RTCIND(i)))
        I12C(i) = 0.0_dp
        I13C(i) = 0.0_dp
      ELSE
#ifdef C2R_FILTER
        IF ( (tot/C(RTCIND(i))) .GT. THRES_C2R) THEN
#endif
          I12C(i) = ( C(RTCIND(i)) * I12C(i) ) / tot
          I13C(i) = ( C(RTCIND(i)) * I13C(i) ) / tot
          tag_IC_NCOR2R = tag_IC_NCOR2R + 1
#ifdef C2R_FILTER
        ENDIF
#endif 
      ENDIF

    ENDDO

  ! getting a fraction of corrected specs
    tag_IC_NCOR2R = tag_IC_NCOR2R / NTCSPEC

#ifdef DEBUG
    IF (LEN(TRIM(specs)) .GT. 0) THEN
      WRITE(*,'(A,A)') 'tag_IC_correct2reg: '//&
              'cannot correct isotopic C species due to zero-budget: ', &
               specs
    ELSE
      print *,'tag_IC_correct2reg: working'
    ENDIF
#endif 

  END SUBROUTINE tag_IC_correct2reg



! -----------------------------------------------------------------------------
  
! correction of "regular" species budget to the total isotopologues budget

  SUBROUTINE tag_IC_correct2iso(C)

    IMPLICIT NONE

    ! I/O
    REAL(dp), INTENT(INOUT)  :: C(:)

    INTEGER  :: i

      C(RTCIND(:)) = I12C(:) + I13C(:)

#ifdef DEBUG
    print *,'tag_IC_correct2iso: working'
#endif 

  END SUBROUTINE tag_IC_correct2iso



! ---------------------------------------------------------------------------

#ifndef I_LINMAX
#ifndef I_SIMEULER
#ifndef I_CASHKARP
  small check: is integration method choosed?
#endif
#endif
#endif

END MODULE messy_mecca_tag_IC

! ***************************************************************************

